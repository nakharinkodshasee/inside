using System;
using UnityEngine;

// Token: 0x0200043A RID: 1082
public class FenceField : Device, IPreAwake
{
	// Token: 0x06001C4D RID: 7245 RVA: 0x000F7BC0 File Offset: 0x000F5DC0
	public bool PreAwake(int callcount)
	{
		this.gateOpen = SignalOut.Create("gateOpen", base.gameObject);
		return true;
	}

	// Token: 0x06001C4E RID: 7246 RVA: 0x000F7BDC File Offset: 0x000F5DDC
	protected override void Start()
	{
		base.Start();
		this.triggerJump.enterTrigger.Register(this, ref this.jumpTriggerEnterHandler);
		this.triggerForceLeft.enterTrigger.Register(this, ref this.forceLeftTriggerEnterHandle);
		this.triggerForceLeft.exitTrigger.Register(this, ref this.forceLeftTriggerExitHandle);
		this.animFence.Play(this.animFenceIdle.name);
	}

	// Token: 0x06001C4F RID: 7247 RVA: 0x000F7C4C File Offset: 0x000F5E4C
	public override void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		base.OnFastEventEx(sender, ref collider);
		if (sender == this.triggerJump.enterTrigger)
		{
			this.OnEnterTriggerJump(collider);
		}
		else if (sender == this.triggerForceLeft.enterTrigger)
		{
			this.OnEnterForceLeft(collider);
		}
		else if (sender == this.triggerForceLeft.exitTrigger)
		{
			this.OnExitForceLeft(collider);
		}
	}

	// Token: 0x06001C50 RID: 7248 RVA: 0x000F7CB8 File Offset: 0x000F5EB8
	private void Update()
	{
		if (this.isOpen)
		{
			return;
		}
		int i = 0;
		int count = this.boysInside.Count;
		while (i < count)
		{
			Boy boy = this.boysInside[i];
			if (!(boy.state is BoyCustomAnimState))
			{
				float x = boy.input.stick.x;
				if (Mathf.Abs(x) > 0.3f)
				{
					float num = Mathf.Sign(base.transform.position.x - boy.pos.x);
					if (Mathf.Sign(x) == num)
					{
						BoyUtils.StartCustomAnim(boy, (num != 1f) ? this.animClimbLeft : this.animClimbRight, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
					}
				}
			}
			i++;
		}
	}

	// Token: 0x06001C51 RID: 7249 RVA: 0x000F7D9C File Offset: 0x000F5F9C
	private void OnEnterTriggerJump(Collider collider)
	{
		if (this.isOpen)
		{
			return;
		}
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component)
		{
			Boy boy = component.boy;
			float num = Mathf.Sign(base.transform.position.x - boy.pos.x);
			if (num == 1f && boy.facing == 1f && !(boy.state is BoyCustomAnimState))
			{
				this.gateOpen.Signal();
				BoyUtils.StartCustomAnim(boy, this.animJump, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
				this.animFence.CrossFade(this.animFenceOpen.name, 0.2f);
				SingletonBehaviour<CameraScript>.instance.OverrideCustomAnimAdjustment(0.2f, 1f);
				this.fenceCollider.gameObject.SetActive(false);
				this.isOpen = true;
			}
		}
	}

	// Token: 0x06001C52 RID: 7250 RVA: 0x000F7E88 File Offset: 0x000F6088
	private void OnEnterForceLeft(Collider collider)
	{
		if (this.isOpen)
		{
			return;
		}
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component && component.boy.facing == -1f)
		{
			this.boyForcedLeft = component.boy;
			this.inputLimit.activateScript();
		}
	}

	// Token: 0x06001C53 RID: 7251 RVA: 0x000F7EE0 File Offset: 0x000F60E0
	private void OnExitForceLeft(Collider collider)
	{
		if (this.isOpen)
		{
			return;
		}
		if (this.boyForcedLeft)
		{
			BoyProbe component = collider.GetComponent<BoyProbe>();
			if (component)
			{
				this.boyForcedLeft = null;
				this.inputLimit.deactivateScript();
			}
		}
	}

	// Token: 0x040033EC RID: 13292
	public CollisionEvents triggerJump;

	// Token: 0x040033ED RID: 13293
	public CollisionEvents triggerForceLeft;

	// Token: 0x040033EE RID: 13294
	public AnimClipNode animClimbRight;

	// Token: 0x040033EF RID: 13295
	public AnimClipNode animClimbLeft;

	// Token: 0x040033F0 RID: 13296
	public AnimClipNode animJump;

	// Token: 0x040033F1 RID: 13297
	public Animation animFence;

	// Token: 0x040033F2 RID: 13298
	public AnimationClip animFenceIdle;

	// Token: 0x040033F3 RID: 13299
	public AnimationClip animFenceOpen;

	// Token: 0x040033F4 RID: 13300
	public Collider fenceCollider;

	// Token: 0x040033F5 RID: 13301
	public BoySetInput inputLimit;

	// Token: 0x040033F6 RID: 13302
	private SignalOut gateOpen;

	// Token: 0x040033F7 RID: 13303
	private bool isOpen;

	// Token: 0x040033F8 RID: 13304
	private Boy boyForcedLeft;

	// Token: 0x040033F9 RID: 13305
	private int jumpTriggerEnterHandler = -1;

	// Token: 0x040033FA RID: 13306
	private int forceLeftTriggerEnterHandle = -1;

	// Token: 0x040033FB RID: 13307
	private int forceLeftTriggerExitHandle = -1;
}