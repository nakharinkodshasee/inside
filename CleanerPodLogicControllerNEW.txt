using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020004FA RID: 1274
public class CleanerPodLogicControllerNEW : MonoBehaviour
{
	// Token: 0x0600215D RID: 8541 RVA: 0x00117404 File Offset: 0x00115604
	private void Start()
	{
		for (int i = 0; i < this.areaPosList.Count; i++)
		{
			int num = i + 1;
			if (num >= this.areaPosList.Count)
			{
				num = 0;
			}
			Vector3 normalized = (this.areaPosList[num].position - this.areaPosList[i].position).normalized;
			this.dirList.Add(normalized);
			this.normalList.Add(-new Vector3(-normalized.y, normalized.x));
			this.distList.Add((this.areaPosList[num].position - this.areaPosList[i].position).magnitude);
		}
	}

	// Token: 0x0600215E RID: 8542 RVA: 0x001174E0 File Offset: 0x001156E0
	private void OnTriggerEnter(Collider coll)
	{
		if (coll.GetComponent<BoyProbe>())
		{
			this.boyInside = true;
		}
	}

	// Token: 0x0600215F RID: 8543 RVA: 0x001174FC File Offset: 0x001156FC
	private void OnTriggerExit(Collider coll)
	{
		if (coll.GetComponent<BoyProbe>())
		{
			this.boyInside = false;
		}
	}

	// Token: 0x06002160 RID: 8544 RVA: 0x00117518 File Offset: 0x00115718
	private Vector3 ClampPosWithinSide(Vector3 pos, Vector3 dir, Vector3 normal, Vector3 cornerPos, float dist, bool concaveCornerLeft, bool concaveCornerRight)
	{
		Vector3 vector = Vector3.Project(pos - cornerPos, dir) + cornerPos;
		Vector3 normalized = (vector - pos).normalized;
		float num = Vector3.Dot(normalized, normal);
		if (num < 0f)
		{
			if (!concaveCornerLeft && !concaveCornerRight)
			{
				return vector;
			}
			Vector3 normalized2 = (vector - cornerPos).normalized;
			float num2 = Vector3.Dot(dir, normalized2);
			float magnitude = (vector - cornerPos).magnitude;
			if (concaveCornerLeft && num2 > 0f)
			{
				pos = vector;
			}
			else if (concaveCornerRight && magnitude < dist)
			{
				pos = vector;
			}
		}
		return pos;
	}

	// Token: 0x06002161 RID: 8545 RVA: 0x001175CC File Offset: 0x001157CC
	private void FixedUpdate()
	{
		if (this.controllerIsActive)
		{
			this.timerControllerActive += Time.deltaTime;
		}
		else
		{
			this.timerControllerActive = 0f;
		}
		if (!this.controllerIsActive && this.boyInside && ScriptGlobals.boy.input.rawAction)
		{
			this.controllerIsActive = true;
			BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.animBlendNode, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			this.controllerFraction = 0.5f;
		}
		else if (this.controllerIsActive && !ScriptGlobals.boy.input.rawAction)
		{
			BoyUtils.ClearState(ScriptGlobals.boy, -1f);
			this.controllerIsActive = false;
			this.controllerFraction = 0.5f;
		}
		if (this.controllerIsActive)
		{
			float num = ScriptGlobals.boy.input.stick.y;
			if (Mathf.Abs(num) > 0.8f)
			{
				num = 1f * Mathf.Sign(num);
			}
			this.controllerFraction = Mathf.MoveTowards(this.controllerFraction, Mathf.InverseLerp(-1f, 1f, num), Time.deltaTime * 3.5f);
			this.animBlendNode.currentBlendValue = Mathf.Lerp(0f, 0.6f, this.controllerFraction);
		}
		if (this.controllerIsActive && this.timerControllerActive > 0.25f)
		{
			Vector3 vector = this.kinematicCabin.transform.position;
			float z = vector.z;
			vector += new Vector3(ScriptGlobals.boy.input.stick.x, ScriptGlobals.boy.input.stick.y, 0f) * Time.deltaTime * 2f;
			for (int i = 0; i < this.areaPosList.Count; i++)
			{
				int num2 = i + 1;
				if (num2 >= this.areaPosList.Count)
				{
				}
				vector = this.ClampPosWithinSide(vector, this.dirList[i], this.normalList[i], this.areaPosList[i].position, this.distList[i], this.concaveCheckLeft[i], this.concaveCheckRight[i]);
			}
			if (vector.y > this.topNode.position.y)
			{
				vector.y = this.topNode.position.y;
			}
			vector.z = z;
			this.kinematicCabin.MovePosition(vector);
		}
	}

	// Token: 0x04003DD9 RID: 15833
	public Rigidbody kinematicCabin;

	// Token: 0x04003DDA RID: 15834
	public AnimBlendNode animBlendNode;

	// Token: 0x04003DDB RID: 15835
	public List<Transform> areaPosList;

	// Token: 0x04003DDC RID: 15836
	public List<bool> concaveCheckLeft;

	// Token: 0x04003DDD RID: 15837
	public List<bool> concaveCheckRight;

	// Token: 0x04003DDE RID: 15838
	public Transform topNode;

	// Token: 0x04003DDF RID: 15839
	private bool boyInside;

	// Token: 0x04003DE0 RID: 15840
	private List<Vector3> dirList = new List<Vector3>();

	// Token: 0x04003DE1 RID: 15841
	private List<Vector3> normalList = new List<Vector3>();

	// Token: 0x04003DE2 RID: 15842
	private List<float> distList = new List<float>();

	// Token: 0x04003DE3 RID: 15843
	private bool controllerIsActive;

	// Token: 0x04003DE4 RID: 15844
	private float controllerFraction = 0.5f;

	// Token: 0x04003DE5 RID: 15845
	private float timerControllerActive;
}