using System;
using SceneVerification;
using UnityEngine;

// Token: 0x020003E8 RID: 1000
[ExecuteInEditMode]
public class RopeLineRenderer : MonoBehaviour, IPreAwake
{
	// Token: 0x06001AA5 RID: 6821 RVA: 0x000E9204 File Offset: 0x000E7404
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		if (this.meshOutput == null)
		{
			this.lineRenderer = base.GetComponent<LineRenderer>();
			if (!this.lineRenderer)
			{
				this.lineRenderer = base.gameObject.AddComponent<LineRenderer>();
			}
			this.lineRenderer.SetWidth(this.width, this.width);
			this.lineRenderer.shadowCastingMode = ((!this.castShadows) ? 0 : 1);
			this.lineRenderer.receiveShadows = this.recieveShadows;
		}
	}

	// Token: 0x06001AA6 RID: 6822 RVA: 0x000E92A8 File Offset: 0x000E74A8
	public bool PreAwake(int callcount)
	{
		this.straightenVisualRope = SignalIn.Create("straightenVisualRope", base.gameObject, new Action(this.OnStraightenVisualRope));
		this.blendToActualRope = SignalIn.Create("blendToActualRope", base.gameObject, new Action(this.OnBlendToActualRope));
		return true;
	}

	// Token: 0x06001AA7 RID: 6823 RVA: 0x000E92FC File Offset: 0x000E74FC
	private void Start()
	{
		if (!Application.isPlaying)
		{
			return;
		}
		this.OnPreProcess();
		Rope component = base.gameObject.GetComponent<Rope>();
		if (component != null)
		{
			this.blendRope = new RopeLineRenderer.BlendRope(component.bodies, this.bottomAttachedObject, component, 0.15f);
		}
		else
		{
			Transform transform = base.transform;
			Rigidbody rigidbody = null;
			int childCount = transform.childCount;
			if (this.ropeEnd != null)
			{
				rigidbody = this.ropeEnd.GetComponent<Rigidbody>();
			}
			else if (childCount > 0)
			{
				rigidbody = transform.GetChild(childCount - 1).gameObject.GetComponent<Rigidbody>();
			}
			if (rigidbody != null)
			{
				FastList<Rigidbody> fastList = new FastList<Rigidbody>(childCount, FastListExpandMode.Exponential, 100);
				while (rigidbody != null)
				{
					if (!rigidbody.transform.IsChildOf(transform))
					{
						break;
					}
					Joint component2 = rigidbody.GetComponent<Joint>();
					if (component2 != null)
					{
						fastList.Add(rigidbody);
						rigidbody = component2.connectedBody;
					}
					else
					{
						rigidbody = null;
					}
				}
				if (fastList.Count > 0)
				{
					Rigidbody[] array = new Rigidbody[fastList.Count];
					fastList.Reverse();
					fastList.CopyTo(array, 0);
					this.blendRope = new RopeLineRenderer.BlendRope(array, this.bottomAttachedObject, null, 1f);
				}
			}
		}
		if (this.meshOutput != null)
		{
			this.meshBones = (this.meshOutput.bones.Clone() as Transform[]);
			Transform transform2 = this.meshBones[0];
			Transform transform3 = this.meshBones[this.meshBones.Length - 1];
			if (transform2.position.y < transform3.position.y)
			{
				Array.Reverse(this.meshBones);
			}
		}
		else if (this.lineRenderer)
		{
			this.lineRenderer.material = this.lineMaterial;
			this.lineRenderer.material.color = this.color;
			this.lineRenderer.material.mainTextureScale = new Vector2(this.textureRepeat, this.textureWindow);
			this.lineRenderer.material.mainTextureOffset = new Vector2(0f, 0.5f - 0.5f * this.textureWindow);
		}
	}

	// Token: 0x06001AA8 RID: 6824 RVA: 0x000E9554 File Offset: 0x000E7754
	private void OnStraightenVisualRope()
	{
		this.straightBlend = true;
		this.straightBlendVelocity = this.blendTimeScale / this.blendTimeToStraight;
	}

	// Token: 0x06001AA9 RID: 6825 RVA: 0x000E9570 File Offset: 0x000E7770
	private void OnBlendToActualRope()
	{
		this.straightBlend = false;
		this.straightBlendVelocity = this.blendTimeScale / this.blendTimeFromStraight;
	}

	// Token: 0x06001AAA RID: 6826 RVA: 0x000E958C File Offset: 0x000E778C
	public int GetLineRendererVertexCount()
	{
		if (this.blendRope == null)
		{
			return 0;
		}
		return this.blendRope.lineRendererVertexCount;
	}

	// Token: 0x06001AAB RID: 6827 RVA: 0x000E95A8 File Offset: 0x000E77A8
	public float GetRotationSum()
	{
		return (this.blendRope == null) ? 0f : this.blendRope.vertexBodyRotationSum;
	}

	// Token: 0x06001AAC RID: 6828 RVA: 0x000E95D8 File Offset: 0x000E77D8
	private void Update()
	{
		if (this.blendRope == null)
		{
			return;
		}
		this.blendRope.Step(Time.deltaTime, this.straightBlend, this.straightBlendVelocity);
		if (this.meshOutput != null)
		{
			this.blendRope.Draw(RopeLineRenderer.BlendRope.DrawMode.Mesh, null, this.lineDivisions, this.visualCollisionSafety, this.meshBones, this.meshBoneLength);
		}
		else if (this.lineDivisions > 2)
		{
			this.blendRope.Draw(RopeLineRenderer.BlendRope.DrawMode.SplineUniform, this.lineRenderer, this.lineDivisions, this.visualCollisionSafety, null, 0.4f);
		}
		else
		{
			this.blendRope.Draw(RopeLineRenderer.BlendRope.DrawMode.Line, this.lineRenderer, this.lineDivisions, this.visualCollisionSafety, null, 0.4f);
		}
	}

	// Token: 0x06001AAD RID: 6829 RVA: 0x000E96A4 File Offset: 0x000E78A4
	[Verify("Game Logic/Rope", "Check if RopeLineRenderer configuration paramteres are valid")]
	private void VerifyNaming(Form form)
	{
		if (this.width <= 0f)
		{
			form.ReportWarning(this, "zero width");
		}
		if (this.lineMaterial == null)
		{
			form.ReportWarning(this, "missing material");
		}
		if (this.lineDivisions <= 2)
		{
			form.ReportWarning(this, "lineDivisions <= 2");
		}
		if (this.freezeZ)
		{
			form.ReportWarning(this, "freezeZ TODO (poke lasse if required)");
		}
	}

	// Token: 0x0400302F RID: 12335
	private SignalIn straightenVisualRope;

	// Token: 0x04003030 RID: 12336
	private SignalIn blendToActualRope;

	// Token: 0x04003031 RID: 12337
	public GameObject ropeEnd;

	// Token: 0x04003032 RID: 12338
	public GameObject bottomAttachedObject;

	// Token: 0x04003033 RID: 12339
	public Material lineMaterial;

	// Token: 0x04003034 RID: 12340
	public int lineDivisions = 4;

	// Token: 0x04003035 RID: 12341
	public float width;

	// Token: 0x04003036 RID: 12342
	public bool castShadows;

	// Token: 0x04003037 RID: 12343
	public bool recieveShadows;

	// Token: 0x04003038 RID: 12344
	public Color color = Color.white;

	// Token: 0x04003039 RID: 12345
	public float textureRepeat = 1f;

	// Token: 0x0400303A RID: 12346
	public float textureWindow = 1f;

	// Token: 0x0400303B RID: 12347
	public bool freezeZ;

	// Token: 0x0400303C RID: 12348
	public BoxCollider visualCollisionSafety;

	// Token: 0x0400303D RID: 12349
	private bool straightBlend;

	// Token: 0x0400303E RID: 12350
	private float straightBlendVelocity = 1f;

	// Token: 0x0400303F RID: 12351
	public float blendTimeToStraight = 0.15f;

	// Token: 0x04003040 RID: 12352
	public float blendTimeFromStraight = 0.7f;

	// Token: 0x04003041 RID: 12353
	public float blendTimeScale = 10f;

	// Token: 0x04003042 RID: 12354
	private RopeLineRenderer.BlendRope blendRope;

	// Token: 0x04003043 RID: 12355
	public SkinnedMeshRenderer meshOutput;

	// Token: 0x04003044 RID: 12356
	public float meshBoneLength = 0.4f;

	// Token: 0x04003045 RID: 12357
	private Transform[] meshBones;

	// Token: 0x04003046 RID: 12358
	[SerializeField]
	[HideInInspector]
	private LineRenderer lineRenderer;

	// Token: 0x04003047 RID: 12359
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x020003E9 RID: 1001
	private class BlendRope
	{
		// Token: 0x06001AAE RID: 6830 RVA: 0x000E971C File Offset: 0x000E791C
		public BlendRope(Rigidbody[] bodies, GameObject bottomAttachObjectToSet = null, Rope rope = null, float vertexBlendInterval = 1f)
		{
			this.rope = rope;
			this.vertexBlendVelocity = 1f / vertexBlendInterval;
			this.vertexBodyRotationSum = 0f;
			this.bottomAttachedObject = bottomAttachObjectToSet;
			this.vertexCount = bodies.Length;
			this.vertices = new RopeLineRenderer.BlendRope.BlendVertex[this.vertexCount];
			for (int num = 0; num != this.vertexCount; num++)
			{
				RopeLineRenderer.BlendRope.BlendVertex blendVertex = new RopeLineRenderer.BlendRope.BlendVertex();
				blendVertex.bodyIndex = num;
				blendVertex.body = bodies[num];
				blendVertex.joint = blendVertex.body.GetComponent<Joint>();
				blendVertex.transform = blendVertex.body.transform;
				blendVertex.position = blendVertex.body.position;
				blendVertex.blendSource = RopeLineRenderer.BlendRope.BlendTarget.Body;
				blendVertex.blendTarget = RopeLineRenderer.BlendRope.BlendTarget.Body;
				blendVertex.blendCursor = 1f;
				blendVertex.feetDelta = Vector3Fast.zero;
				this.vertices[num] = blendVertex;
			}
			this.tempPoints = new Vector3[0];
			this.tempDistances = new float[0];
			this.postSleepStep = false;
			this.postSleepDraw = false;
		}

		// Token: 0x06001AAF RID: 6831 RVA: 0x000E9824 File Offset: 0x000E7A24
		private bool CheckSleeping()
		{
			RopeLineRenderer.BlendRope.BlendVertex blendVertex = this.vertices[this.vertexCount - 1];
			return (blendVertex.blendSource != RopeLineRenderer.BlendRope.BlendTarget.Straight || blendVertex.blendCursor >= 1f) && (blendVertex.blendTarget != RopeLineRenderer.BlendRope.BlendTarget.Straight || blendVertex.blendCursor >= 1f) && blendVertex.body.IsSleeping();
		}

		// Token: 0x06001AB0 RID: 6832 RVA: 0x000E9888 File Offset: 0x000E7A88
		public Vector3 VertexCollisionSafety(Vector3 pos, BoxCollider visualCollisionSafety)
		{
			if (visualCollisionSafety != null)
			{
				Vector3 vector = visualCollisionSafety.transform.InverseTransformPoint(pos);
				float num = Mathf.Abs(vector.y);
				float num2 = Mathf.Abs(vector.x);
				float num3 = 0.55f;
				if (num2 < 0.5f && num < 0.55f)
				{
					float num4 = 1f;
					if (num > 0.5f)
					{
						num4 = (num3 - num) / (num3 - 0.5f);
					}
					vector.x = num4 * 0.5f * Mathf.Sign(vector.x) + (1f - num4) * vector.x;
					return visualCollisionSafety.transform.TransformPoint(vector);
				}
			}
			return pos;
		}

		// Token: 0x06001AB1 RID: 6833 RVA: 0x000E9940 File Offset: 0x000E7B40
		public void Step(float dt, bool straightBlend, float straightBlendVelocity)
		{
			bool flag = this.CheckSleeping();
			if (flag && this.postSleepStep)
			{
				return;
			}
			this.postSleepStep = flag;
			Vector3 topAnchor = this.vertices[0].topAnchor;
			Vector3 bottomAnchor = this.vertices[this.vertexCount - 1].bottomAnchor;
			Vector3 vector = bottomAnchor - topAnchor;
			this.vertexBodyRotationSum = 0f;
			float num = this.vertices[0].body.angularVelocity.z;
			float fraction;
			if (straightBlend || this.vertices[0].blendSource == RopeLineRenderer.BlendRope.BlendTarget.Straight)
			{
				fraction = dt * straightBlendVelocity;
			}
			else
			{
				fraction = dt * this.vertexBlendVelocity;
			}
			if (straightBlend)
			{
				for (int num2 = 0; num2 != this.vertexCount; num2++)
				{
					RopeLineRenderer.BlendRope.BlendVertex blendVertex = this.vertices[num2];
					blendVertex.BlendStep(RopeLineRenderer.BlendRope.BlendTarget.Straight, topAnchor + vector * (((float)num2 + 1f) / (float)this.vertexCount), fraction);
					float z = blendVertex.body.angularVelocity.z;
					this.vertexBodyRotationSum += ((z <= num) ? (num - z) : (z - num));
					num = z;
				}
				return;
			}
			if (this.rope == null)
			{
				for (int num3 = 0; num3 != this.vertexCount; num3++)
				{
					RopeLineRenderer.BlendRope.BlendVertex blendVertex2 = this.vertices[num3];
					blendVertex2.BlendStep(RopeLineRenderer.BlendRope.BlendTarget.Body, blendVertex2.bottomAnchor, fraction);
					float z = blendVertex2.body.angularVelocity.z;
					this.vertexBodyRotationSum += ((z <= num) ? (num - z) : (z - num));
					num = z;
				}
				return;
			}
			float num4 = (float)(Time.timeDbl - Time.fixedTimeDbl);
			bool flag2 = !this.rope.bodies[0].isKinematic;
			int num5 = this.rope.handIndex;
			int feetIndex = this.rope.feetIndex;
			int num6 = feetIndex - num5;
			if (num5 == this.vertexCount - 1)
			{
				num5 = this.vertexCount - 2;
			}
			Vector3 zero = Vector3Fast.zero;
			Vector3 vector2 = this.rope.handPos + this.rope.handVel * num4;
			Vector3 vector3 = this.rope.feetPos + this.rope.feetVel * num4;
			Vector3 normalized = (vector2 - this.rope.topPos).normalized;
			Vector3 normalized2 = (vector3 - vector2).normalized;
			for (int num7 = 0; num7 != this.vertexCount; num7++)
			{
				RopeLineRenderer.BlendRope.BlendVertex blendVertex3 = this.vertices[num7];
				RopeLineRenderer.BlendRope.BlendTarget target;
				Vector3 targetPos;
				if (blendVertex3.bodyIndex < num5 && !flag2)
				{
					target = RopeLineRenderer.BlendRope.BlendTarget.HandSpan;
					targetPos = topAnchor + (0.5f + (float)blendVertex3.bodyIndex) * this.rope.segmentLength * normalized;
				}
				else if (blendVertex3.bodyIndex == num5)
				{
					target = RopeLineRenderer.BlendRope.BlendTarget.Hand;
					targetPos = vector2;
				}
				else if (blendVertex3.bodyIndex < feetIndex)
				{
					target = RopeLineRenderer.BlendRope.BlendTarget.FeetSpan;
					targetPos = Vector3Fast.Lerp(ref vector2, ref vector3, (float)(blendVertex3.bodyIndex - num5) / (float)num6);
				}
				else if (blendVertex3.bodyIndex == feetIndex)
				{
					target = RopeLineRenderer.BlendRope.BlendTarget.Feet;
					targetPos = vector3;
				}
				else
				{
					target = RopeLineRenderer.BlendRope.BlendTarget.Body;
					targetPos = blendVertex3.bottomAnchor;
				}
				if (blendVertex3.bodyIndex > feetIndex && feetIndex >= 0)
				{
					blendVertex3.feetDelta = Vector3Fast.Lerp(ref blendVertex3.feetDelta, ref this.rope.feetDelta, 0.1f);
				}
				else
				{
					blendVertex3.feetDelta = Vector3Fast.Lerp(ref blendVertex3.feetDelta, ref zero, 0.1f);
				}
				targetPos.x += blendVertex3.feetDelta.x;
				targetPos.y += blendVertex3.feetDelta.y;
				targetPos.z += blendVertex3.feetDelta.z;
				blendVertex3.BlendStep(target, targetPos, fraction);
				float z = blendVertex3.body.angularVelocity.z;
				this.vertexBodyRotationSum += ((z <= num) ? (num - z) : (z - num));
				num = z;
			}
		}

		// Token: 0x06001AB2 RID: 6834 RVA: 0x000E9DC0 File Offset: 0x000E7FC0
		public void Draw(RopeLineRenderer.BlendRope.DrawMode mode, LineRenderer lineRenderer, int lineDivisions, BoxCollider ropeSafety = null, Transform[] meshBones = null, float meshBoneLength = 0.4f)
		{
			bool flag = this.CheckSleeping();
			if (flag && this.postSleepDraw)
			{
				return;
			}
			this.postSleepDraw = flag;
			switch (mode)
			{
			case RopeLineRenderer.BlendRope.DrawMode.Debug:
				if (!(this.rope == null))
				{
					DebugRendering.DrawCircle(this.rope.GetHashCode() + "t", this.rope.topPos, 0.1f, new Color?(Color.red), (DebugRendering.Flags)0, null);
					for (int num = 0; num != this.vertexCount; num++)
					{
						DebugRendering.DrawLine(this.rope.GetHashCode() + "fd" + num, this.vertices[num].position, this.vertices[num].position - this.vertices[num].feetDelta, new Color?(Color.cyan), new float?(0.02f), (DebugRendering.Flags)0);
						DebugRendering.DrawCircle(this.rope.GetHashCode() + "b" + num, this.vertices[num].position, 0.1f, new Color?(Color.white), (DebugRendering.Flags)0, null);
					}
				}
				break;
			case RopeLineRenderer.BlendRope.DrawMode.Line:
				this.lineRendererVertexCount = 1 + this.vertexCount;
				lineRenderer.SetVertexCount(this.lineRendererVertexCount);
				lineRenderer.SetPosition(0, (!(this.rope != null)) ? this.vertices[0].topAnchor : this.rope.topPos);
				for (int num2 = 0; num2 != this.vertexCount; num2++)
				{
					lineRenderer.SetPosition(num2 + 1, this.vertices[num2].position);
				}
				break;
			case RopeLineRenderer.BlendRope.DrawMode.Spline:
			{
				float num3 = 1f / (float)(lineDivisions - 1);
				int num4 = 1 + this.vertexCount * (lineDivisions - 1);
				int num5 = 0;
				Vector3 vector = (!(this.rope != null)) ? this.vertices[0].topAnchor : this.rope.topPos;
				Vector3 vector2 = this.vertices[0].position - vector;
				this.lineRendererVertexCount = num4;
				lineRenderer.SetVertexCount(this.lineRendererVertexCount);
				lineRenderer.SetPosition(num5++, vector);
				for (int num6 = 0; num6 != this.vertexCount; num6++)
				{
					Vector3 position = this.vertices[num6].position;
					Vector3 vector3 = (num6 != this.vertexCount - 1) ? (0.5f * (this.vertices[num6 + 1].position - vector)) : (this.vertices[num6].position - vector);
					for (int i = 1; i < lineDivisions; i++)
					{
						float num7 = (float)i * num3;
						float num8 = num7 * num7;
						float num9 = num8 * num7;
						float num10 = 2f * num9 - 3f * num8 + 1f;
						float num11 = num9 - 2f * num8 + num7;
						float num12 = -2f * num9 + 3f * num8;
						float num13 = num9 - num8;
						Vector3 vector4;
						vector4.x = num10 * vector.x + num11 * vector2.x + num12 * position.x + num13 * vector3.x;
						vector4.y = num10 * vector.y + num11 * vector2.y + num12 * position.y + num13 * vector3.y;
						vector4.z = num10 * vector.z + num11 * vector2.z + num12 * position.z + num13 * vector3.z;
						lineRenderer.SetPosition(num5++, vector4);
					}
					vector = position;
					vector2 = vector3;
				}
				break;
			}
			case RopeLineRenderer.BlendRope.DrawMode.SplineUniform:
				if (this.rope == null)
				{
					this.Draw(RopeLineRenderer.BlendRope.DrawMode.Spline, lineRenderer, lineDivisions, null, null, 0.4f);
				}
				else
				{
					Vector3 vector5 = (!(this.rope != null)) ? this.vertices[0].topAnchor : this.rope.topPos;
					Vector3 vector6 = this.vertices[0].position - vector5;
					float num14 = 1f / (float)(lineDivisions - 1);
					int num15 = 1 + this.vertexCount * (lineDivisions - 1);
					int j = 0;
					if (num15 != this.tempPoints.Length)
					{
						this.tempPoints = new Vector3[num15];
						this.tempDistances = new float[num15];
					}
					this.tempPoints[j++] = vector5;
					this.tempDistances[0] = 0f;
					Vector3 vector7 = this.vertices[0].position;
					vector7 = this.VertexCollisionSafety(vector7, ropeSafety);
					for (int num16 = 0; num16 != this.vertexCount; num16++)
					{
						Vector3 vector8 = vector7;
						Vector3 vector9;
						if (num16 == this.vertexCount - 1)
						{
							vector9 = vector7;
						}
						else
						{
							vector9 = this.VertexCollisionSafety(this.vertices[num16 + 1].position, ropeSafety);
						}
						Vector3 vector10 = (num16 != this.vertexCount - 1) ? (0.5f * (vector9 - vector5)) : (vector7 - vector5);
						for (int k = 1; k < lineDivisions; k++)
						{
							float num17 = (float)k * num14;
							float num18 = num17 * num17;
							float num19 = num18 * num17;
							float num20 = 2f * num19 - 3f * num18 + 1f;
							float num21 = num19 - 2f * num18 + num17;
							float num22 = -2f * num19 + 3f * num18;
							float num23 = num19 - num18;
							this.tempPoints[j].x = num20 * vector5.x + num21 * vector6.x + num22 * vector8.x + num23 * vector10.x;
							this.tempPoints[j].y = num20 * vector5.y + num21 * vector6.y + num22 * vector8.y + num23 * vector10.y;
							this.tempPoints[j].z = num20 * vector5.z + num21 * vector6.z + num22 * vector8.z + num23 * vector10.z;
							j++;
						}
						vector5 = vector8;
						vector6 = vector10;
						vector7 = vector9;
					}
					for (int num24 = 1; num24 != num15; num24++)
					{
						int num25 = num24 - 1;
						float num26 = this.tempPoints[num24].x - this.tempPoints[num25].x;
						float num27 = this.tempPoints[num24].y - this.tempPoints[num25].y;
						float num28 = this.tempPoints[num24].z - this.tempPoints[num25].z;
						this.tempDistances[num24] = this.tempDistances[num24 - 1] + Mathf.Sqrt(num26 * num26 + num27 * num27 + num28 * num28);
					}
					float num29 = this.rope.segmentLength / (float)(lineDivisions - 1);
					float num30 = 0f;
					j = 0;
					int num31 = 0;
					this.lineRendererVertexCount = num15;
					lineRenderer.SetVertexCount(this.lineRendererVertexCount);
					lineRenderer.SetPosition(j++, this.tempPoints[num31++]);
					Vector3 vector11 = Vector3.zero;
					while (j < num15)
					{
						num30 += num29;
						while (num30 > this.tempDistances[num31] && num31 < this.tempPoints.Length - 1)
						{
							num31++;
						}
						int num32 = num31 - 1;
						float num33 = this.tempDistances[num31] - this.tempDistances[num32];
						float num34 = num30 - this.tempDistances[num32];
						float num35 = num34 / num33;
						Vector3 vector12;
						vector12.x = this.tempPoints[num32].x + num35 * (this.tempPoints[num31].x - this.tempPoints[num32].x);
						vector12.y = this.tempPoints[num32].y + num35 * (this.tempPoints[num31].y - this.tempPoints[num32].y);
						vector12.z = this.tempPoints[num32].z + num35 * (this.tempPoints[num31].z - this.tempPoints[num32].z);
						if (this.bottomAttachedObject != null && j == num15 - 1)
						{
							this.bottomAttachedObject.transform.position = vector12;
							Vector3 normalized = (vector12 - vector11).normalized;
							float num36 = Vector3.Angle(normalized, Vector3.down);
							if (normalized.x < 0f)
							{
								num36 = -num36;
							}
							this.bottomAttachedObject.transform.rotation = Quaternion.Euler(0f, 0f, num36);
						}
						lineRenderer.SetPosition(j++, vector12);
						vector11 = vector12;
					}
				}
				break;
			case RopeLineRenderer.BlendRope.DrawMode.Mesh:
			{
				int num37 = meshBones.Length;
				if (num37 >= 2)
				{
					Vector3 vector13 = (!(this.rope != null)) ? this.vertices[0].topAnchor : this.rope.topPos;
					Vector3 vector14 = this.vertices[0].position - vector13;
					float num38 = 1f / (float)(lineDivisions - 1);
					int num39 = 1 + this.vertexCount * (lineDivisions - 1);
					int l = 0;
					if (num39 != this.tempPoints.Length)
					{
						this.tempPoints = new Vector3[num39];
					}
					this.tempPoints[l++] = vector13;
					Vector3 vector15 = this.vertices[0].position;
					vector15 = this.VertexCollisionSafety(vector15, ropeSafety);
					for (int num40 = 0; num40 != this.vertexCount; num40++)
					{
						Vector3 vector16 = vector15;
						Vector3 vector17;
						if (num40 == this.vertexCount - 1)
						{
							vector17 = vector15;
						}
						else
						{
							vector17 = this.VertexCollisionSafety(this.vertices[num40 + 1].position, ropeSafety);
						}
						Vector3 vector18 = (num40 != this.vertexCount - 1) ? (0.5f * (vector17 - vector13)) : (vector15 - vector13);
						for (int m = 1; m < lineDivisions; m++)
						{
							float num41 = (float)m * num38;
							float num42 = num41 * num41;
							float num43 = num42 * num41;
							float num44 = 2f * num43 - 3f * num42 + 1f;
							float num45 = num43 - 2f * num42 + num41;
							float num46 = -2f * num43 + 3f * num42;
							float num47 = num43 - num42;
							this.tempPoints[l].x = num44 * vector13.x + num45 * vector14.x + num46 * vector16.x + num47 * vector18.x;
							this.tempPoints[l].y = num44 * vector13.y + num45 * vector14.y + num46 * vector16.y + num47 * vector18.y;
							this.tempPoints[l].z = num44 * vector13.z + num45 * vector14.z + num46 * vector16.z + num47 * vector18.z;
							l++;
						}
						vector13 = vector16;
						vector14 = vector18;
						vector15 = vector17;
					}
					float num48 = 0.5f * meshBoneLength;
					Vector3 vector19 = (!(this.rope != null)) ? this.vertices[0].topAnchor : this.rope.topPos;
					l = 0;
					int num49 = 0;
					this.lineRendererVertexCount = num37;
					while (l < num37)
					{
						float num50 = this.tempPoints[num49].x - vector19.x;
						float num51 = this.tempPoints[num49].y - vector19.y;
						float num52 = this.tempPoints[num49].z - vector19.z;
						float num53 = num50 * num50 + num51 * num51 + num52 * num52;
						while (num48 * num48 > num53 && num49 < this.tempPoints.Length - 1)
						{
							num49++;
							num50 = this.tempPoints[num49].x - vector19.x;
							num51 = this.tempPoints[num49].y - vector19.y;
							num52 = this.tempPoints[num49].z - vector19.z;
							num53 = num50 * num50 + num51 * num51 + num52 * num52;
						}
						int num54 = num49 - 1;
						if (l == num37 - 1)
						{
							float num55 = num48 * 2f;
							while (num55 * num55 > num53 && num49 < this.tempPoints.Length - 1)
							{
								num49++;
								num50 = this.tempPoints[num49].x - vector19.x;
								num51 = this.tempPoints[num49].y - vector19.y;
								num52 = this.tempPoints[num49].z - vector19.z;
								num53 = num50 * num50 + num51 * num51 + num52 * num52;
							}
						}
						Vector3 vector20 = MathUtils.DiagonalProjection(ref this.tempPoints[num54], ref this.tempPoints[num49], ref vector19, num48);
						Vector3 vector21;
						vector21.x = this.tempPoints[num54].x - this.tempPoints[num49].x;
						vector21.y = this.tempPoints[num54].y - this.tempPoints[num49].y;
						vector21.z = this.tempPoints[num54].z - this.tempPoints[num49].z;
						Quaternion quaternion = Quaternion.LookRotation(Vector3Fast.forward, vector21);
						Quaternion quaternion2 = QuaternionFast.RotationInY(1.5707964f * (float)Math.Sin(Time.timeDbl));
						meshBones[l++].SetPositionRotation(vector20, quaternion);
						num48 = meshBoneLength;
						vector19.x = vector20.x;
						vector19.y = vector20.y;
						vector19.z = vector20.z;
					}
				}
				break;
			}
			}
		}

		// Token: 0x04003048 RID: 12360
		private Rope rope;

		// Token: 0x04003049 RID: 12361
		public int vertexCount;

		// Token: 0x0400304A RID: 12362
		public RopeLineRenderer.BlendRope.BlendVertex[] vertices;

		// Token: 0x0400304B RID: 12363
		public float vertexBlendVelocity;

		// Token: 0x0400304C RID: 12364
		public float vertexBodyRotationSum;

		// Token: 0x0400304D RID: 12365
		public int lineRendererVertexCount;

		// Token: 0x0400304E RID: 12366
		public GameObject bottomAttachedObject;

		// Token: 0x0400304F RID: 12367
		private Vector3[] tempPoints;

		// Token: 0x04003050 RID: 12368
		private float[] tempDistances;

		// Token: 0x04003051 RID: 12369
		private bool postSleepStep;

		// Token: 0x04003052 RID: 12370
		private bool postSleepDraw;

		// Token: 0x020003EA RID: 1002
		public enum BlendTarget
		{
			// Token: 0x04003054 RID: 12372
			None,
			// Token: 0x04003055 RID: 12373
			HandSpan,
			// Token: 0x04003056 RID: 12374
			Hand,
			// Token: 0x04003057 RID: 12375
			FeetSpan,
			// Token: 0x04003058 RID: 12376
			Feet,
			// Token: 0x04003059 RID: 12377
			Body,
			// Token: 0x0400305A RID: 12378
			Straight
		}

		// Token: 0x020003EB RID: 1003
		public enum DrawMode
		{
			// Token: 0x0400305C RID: 12380
			Debug,
			// Token: 0x0400305D RID: 12381
			Line,
			// Token: 0x0400305E RID: 12382
			Spline,
			// Token: 0x0400305F RID: 12383
			SplineUniform,
			// Token: 0x04003060 RID: 12384
			Mesh
		}

		// Token: 0x020003EC RID: 1004
		public class BlendVertex
		{
			// Token: 0x17000083 RID: 131
			// (get) Token: 0x06001AB4 RID: 6836 RVA: 0x000EAD0C File Offset: 0x000E8F0C
			public Vector3 topAnchor
			{
				get
				{
					return this.transform.TransformPoint(this.joint.anchor);
				}
			}

			// Token: 0x17000084 RID: 132
			// (get) Token: 0x06001AB5 RID: 6837 RVA: 0x000EAD24 File Offset: 0x000E8F24
			public Vector3 bottomAnchor
			{
				get
				{
					return this.transform.TransformPoint(-this.joint.anchor);
				}
			}

			// Token: 0x06001AB6 RID: 6838 RVA: 0x000EAD44 File Offset: 0x000E8F44
			public void BlendStep(RopeLineRenderer.BlendRope.BlendTarget target, Vector3 targetPos, float fraction)
			{
				if (this.blendTarget != target)
				{
					this.blendSource = this.blendTarget;
					this.blendTarget = target;
					this.blendCursor = 0f;
				}
				this.blendCursor = Mathf.Clamp01(this.blendCursor + fraction);
				this.position = Vector3Fast.Lerp(ref this.position, ref targetPos, this.blendCursor);
			}

			// Token: 0x04003061 RID: 12385
			public int bodyIndex;

			// Token: 0x04003062 RID: 12386
			public Rigidbody body;

			// Token: 0x04003063 RID: 12387
			public Joint joint;

			// Token: 0x04003064 RID: 12388
			public Transform transform;

			// Token: 0x04003065 RID: 12389
			public Vector3 position;

			// Token: 0x04003066 RID: 12390
			public RopeLineRenderer.BlendRope.BlendTarget blendSource;

			// Token: 0x04003067 RID: 12391
			public RopeLineRenderer.BlendRope.BlendTarget blendTarget;

			// Token: 0x04003068 RID: 12392
			public float blendCursor;

			// Token: 0x04003069 RID: 12393
			public Vector3 feetDelta;
		}
	}
}