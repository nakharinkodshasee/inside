using System;
using UnityEngine;

// Token: 0x020000A7 RID: 167
public class HulvAI : BaseWaypointFollower
{
	// Token: 0x06000578 RID: 1400 RVA: 0x000412E8 File Offset: 0x0003F4E8
	private static Hulv GetAttackingHulv(Hulv thisHulv = null)
	{
		if (HulvAI.attackingHulv != null && HulvAI.attackingHulv != thisHulv)
		{
			if (!HulvAI.attackingHulv.gameObject.activeInHierarchy)
			{
				HulvAI.attackingHulv = null;
			}
			else if (thisHulv != null)
			{
				float num = ScriptGlobals.boy.pos.x - HulvAI.attackingHulv.transform.position.x;
				if (Mathf.Abs(num) > 10f)
				{
					float num2 = ScriptGlobals.boy.pos.x - thisHulv.transform.position.x;
					if (Mathf.Abs(num) > Mathf.Abs(num2))
					{
						HulvAI.attackingHulv = null;
					}
				}
			}
		}
		return HulvAI.attackingHulv;
	}

	// Token: 0x06000579 RID: 1401 RVA: 0x000413C0 File Offset: 0x0003F5C0
	public void InitHulvAI(Hulv hulv)
	{
		if (hulv != null)
		{
			base.InitBaseWaypointFollower(hulv.transform);
		}
		this.hulv = hulv;
		this.aiMode = HulvAI.AIMode.FollowWaypoint;
	}

	// Token: 0x0600057A RID: 1402 RVA: 0x000413F4 File Offset: 0x0003F5F4
	public override void UpdateInput(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		(controls as Hulv.HulvControl).mood = this.lastMood;
		HulvAI.AIMode aimode = this.aiMode;
		if (aimode != HulvAI.AIMode.FollowWaypoint)
		{
			if (aimode == HulvAI.AIMode.ChaseBoy)
			{
				this.UpdateChaseBoy(controls as Hulv.HulvControl, deltaTime);
			}
		}
		else
		{
			Hulv hulvKilledBoy = Hulv.GetHulvKilledBoy();
			if (hulvKilledBoy != null && hulvKilledBoy != this)
			{
				GameObject currentWaypoint = base.GetCurrentWaypoint();
				if (currentWaypoint != null && (currentWaypoint.transform.position - base.transform.position).sqrMagnitude > 80f)
				{
					this.SetChaseMode(HulvAI.ChaseMode.ChargeIn);
					this.UpdateChaseBoy(controls as Hulv.HulvControl, deltaTime);
					return;
				}
				if ((base.transform.position - ScriptGlobals.boy.pos3).sqrMagnitude < 64f && this.hulv.blendHelper.GetTopDefinitionID() == 54)
				{
					this.SetChaseMode(HulvAI.ChaseMode.ChargeIn);
					this.UpdateChaseBoy(controls as Hulv.HulvControl, deltaTime);
					return;
				}
			}
			base.UpdateInput(controls, deltaTime, ref wantedPos);
		}
	}

	// Token: 0x0600057B RID: 1403 RVA: 0x00041518 File Offset: 0x0003F718
	private void OnDisable()
	{
		if (this.hulv == HulvAI.attackingHulv)
		{
			HulvAI.attackingHulv = null;
		}
	}

	// Token: 0x0600057C RID: 1404 RVA: 0x00041538 File Offset: 0x0003F738
	public override void PostUpdateFollowWaypoint_Callback(AnimcontrolledCharacter.AnimControl controls, BaseWaypoint wayPoint)
	{
		Hulv.HulvControl hulvControl = controls as Hulv.HulvControl;
		if (hulvControl != null)
		{
			hulvControl.trotButton = false;
			hulvControl.jumpButton = false;
			if (wayPoint != null)
			{
				HulvWaypoint hulvWaypoint = wayPoint as HulvWaypoint;
				if (hulvWaypoint != null)
				{
					hulvControl.trotButton = (hulvWaypoint.moveMode == HulvWaypoint.MovementMode.Trot);
					hulvControl.jumpButton = (hulvWaypoint.moveMode == HulvWaypoint.MovementMode.Jump);
					if (hulvWaypoint.moveMode == HulvWaypoint.MovementMode.Sneak)
					{
						hulvControl.mood = Hulv.HulvControl.Mood.Sneaky;
					}
					else
					{
						hulvControl.mood = hulvWaypoint.IdleStatus;
					}
					Hulv.HulvAnimationStates topAnimationState = this.hulv.GetTopAnimationState();
					bool flag = false;
					if (topAnimationState == Hulv.HulvAnimationStates.RunStopForWater || topAnimationState == Hulv.HulvAnimationStates.RunStopWildAtLedge || topAnimationState == Hulv.HulvAnimationStates.IdleAtWater)
					{
						hulvControl.stick.x = (hulvControl.stick.y = 0f);
						flag = true;
					}
					bool flag2 = topAnimationState != (Hulv.HulvAnimationStates)hulvWaypoint.uniqueAnimation && !ScriptGlobals.boy.isDead;
					if (!hulvWaypoint.allowAutoKill)
					{
						flag2 = false;
					}
					if (flag2 && !flag && hulvWaypoint.ThreatenBoy)
					{
						Vector3 vector = ScriptGlobals.boy.pos3 - this.hulv.transform.position;
						Vector3 vector2 = vector + ScriptGlobals.boy.velocity3 * 0.3f - this.hulv.velocity * 0.3f;
						vector2.y = 0f;
						float magnitude = vector2.magnitude;
						if (magnitude <= 3f)
						{
							this.SetChaseMode(HulvAI.ChaseMode.ChargeIn);
						}
					}
				}
			}
		}
	}

	// Token: 0x0600057D RID: 1405 RVA: 0x000416D0 File Offset: 0x0003F8D0
	public override bool isFollowingAWaypoint()
	{
		return this.aiMode == HulvAI.AIMode.FollowWaypoint && base.isFollowingAWaypoint();
	}

	// Token: 0x0600057E RID: 1406 RVA: 0x000416E8 File Offset: 0x0003F8E8
	public override void FollowWaypoint(GameObject wayPointToFollow)
	{
		if (wayPointToFollow)
		{
			this.aiMode = HulvAI.AIMode.FollowWaypoint;
			if (HulvAI.attackingHulv == this.hulv)
			{
				HulvAI.attackingHulv = null;
			}
			HulvWaypoint component = wayPointToFollow.GetComponent<HulvWaypoint>();
			if (component != null)
			{
				this.lastMood = component.IdleStatus;
			}
			base.FollowWaypoint(wayPointToFollow);
		}
	}

	// Token: 0x0600057F RID: 1407 RVA: 0x00041748 File Offset: 0x0003F948
	public void SetLeaveWaterWaypoint(BaseWaypoint wp)
	{
		this.leaveWaterWayPoint = (wp as HulvWaypoint);
	}

	// Token: 0x06000580 RID: 1408 RVA: 0x00041758 File Offset: 0x0003F958
	public void SetAttackFenceWaypoint(GameObject wp)
	{
		this.attackFenceWayPoint = wp;
	}

	// Token: 0x06000581 RID: 1409 RVA: 0x00041764 File Offset: 0x0003F964
	public GameObject GetAttackFenceWaypoint()
	{
		return this.attackFenceWayPoint;
	}

	// Token: 0x06000582 RID: 1410 RVA: 0x0004176C File Offset: 0x0003F96C
	public void SetChaseMode(HulvAI.ChaseMode chaseMode)
	{
		if (this.hulv == null)
		{
			return;
		}
		this.aiMode = HulvAI.AIMode.ChaseBoy;
		this.currentChaseMode = chaseMode;
		this.speedUpCounter = 0.2f;
		this.currentTurnFraction = 1f;
		if (chaseMode == HulvAI.ChaseMode.ChargeIn)
		{
			this.speedUpCounter = this.hulv.GetRunBlendSpeed();
			this.speedUpCounter = this.speedUpCounter * 0.8f + 0.2f;
		}
		else if (chaseMode == HulvAI.ChaseMode.ChargeToKill && (HulvAI.GetAttackingHulv(this.hulv) == null || !this.hulv.GetBoyHasTorch()))
		{
			HulvAI.attackingHulv = this.hulv;
		}
	}

	// Token: 0x06000583 RID: 1411 RVA: 0x0004181C File Offset: 0x0003FA1C
	public HulvAI.ChaseMode GetChaseMode()
	{
		return this.currentChaseMode;
	}

	// Token: 0x06000584 RID: 1412 RVA: 0x00041824 File Offset: 0x0003FA24
	public override void NewWaypointSet_Callback(BaseWaypoint wayPoint)
	{
		HulvWaypoint hulvWaypoint = wayPoint as HulvWaypoint;
		if (hulvWaypoint != null)
		{
			if (hulvWaypoint.ThreatenBoy)
			{
				this.hulv.lookAtPoint = ScriptGlobals.boy.gameObject;
			}
			if (hulvWaypoint.uniqueAnimation != Hulv.UniqueAnimations.None)
			{
				this.endWithAnimation = true;
			}
		}
	}

	// Token: 0x06000585 RID: 1413 RVA: 0x00041878 File Offset: 0x0003FA78
	public override void WaypointReached_Callback(BaseWaypoint wayPoint)
	{
		HulvWaypoint hulvWaypoint = wayPoint as HulvWaypoint;
		if (hulvWaypoint != null && hulvWaypoint.enterChaseWhenDone)
		{
			if (this.hulv.IsInWater())
			{
				this.SetChaseMode(HulvAI.ChaseMode.SwimHunt);
			}
			else if (hulvWaypoint.IdleStatus == Hulv.HulvControl.Mood.Furious)
			{
				this.SetChaseMode(HulvAI.ChaseMode.ChargeToKill);
			}
			else
			{
				this.SetChaseMode(HulvAI.ChaseMode.ChargeIn);
			}
		}
	}

	// Token: 0x06000586 RID: 1414 RVA: 0x000418E0 File Offset: 0x0003FAE0
	public override int GetUniqueAnimDefID_Callback(BaseWaypoint wayPoint)
	{
		HulvWaypoint hulvWaypoint = wayPoint as HulvWaypoint;
		if (hulvWaypoint != null)
		{
			return (int)hulvWaypoint.uniqueAnimation;
		}
		return -1;
	}

	// Token: 0x06000587 RID: 1415 RVA: 0x00041908 File Offset: 0x0003FB08
	public override int GetTopAnimDefID_Callback()
	{
		return (int)this.hulv.GetTopAnimationState();
	}

	// Token: 0x06000588 RID: 1416 RVA: 0x00041918 File Offset: 0x0003FB18
	public override void SetUniqueAnimationFromWaypoint_Callback(BaseWaypoint waypointToUse)
	{
		HulvWaypoint hulvWaypoint = waypointToUse as HulvWaypoint;
		if (hulvWaypoint != null)
		{
			this.hulv.SetUniqueAnimation(hulvWaypoint.uniqueAnimation, hulvWaypoint.gameObject, hulvWaypoint.arrivalLineMode, hulvWaypoint.uniqueAnimCustomParameter, -1f, -1f);
		}
	}

	// Token: 0x06000589 RID: 1417 RVA: 0x00041968 File Offset: 0x0003FB68
	private void GotoChargeIn()
	{
		HulvAI.attackingHulv = this.hulv;
		this.speedUpCounter = 0f;
		this.currentChaseMode = HulvAI.ChaseMode.ChargeIn;
	}

	// Token: 0x0600058A RID: 1418 RVA: 0x00041988 File Offset: 0x0003FB88
	private void UpdateChargeIn(ref Hulv.HulvControl controls, float deltaTime)
	{
		Hulv hulvKilledBoy = Hulv.GetHulvKilledBoy();
		if (hulvKilledBoy != null && hulvKilledBoy != this.hulv)
		{
			this.UpdateDeadBoy(ref controls, deltaTime);
			return;
		}
		Vector3 vector = ScriptGlobals.boy.pos3 - this.hulv.transform.position;
		vector.y = 0f;
		float magnitude = (vector + ScriptGlobals.boy.velocity3 * 0.3f - this.hulv.velocity * 0.3f).magnitude;
		vector.z *= 3f;
		vector = vector.normalized;
		this.speedUpCounter = Mathf.Min(this.speedUpCounter + deltaTime * 0.3f, 1f);
		controls.mood = Hulv.HulvControl.Mood.Furious;
		if (!this.IsBoyChargable() && Mathf.Abs(base.transform.position.x - ScriptGlobals.boy.pos3.x) > 2.5f)
		{
			this.GotoThreaten();
			return;
		}
		bool flag = false;
		if (this.hulv.leftWallBlocker != null && ScriptGlobals.boy.pos.x <= this.hulv.leftWallBlocker.transform.position.x + 3f)
		{
			flag = true;
		}
		if (magnitude < this.breakDistFromBoy && ScriptGlobals.boy.facing == Mathf.Sign(-vector.x) && this.hulv.GetBoyHasTorch() && !flag)
		{
			this.GotoThreaten();
		}
		else if (magnitude < 2.5f)
		{
			this.GotoChargeToKill();
		}
		else
		{
			this.speedUpCounter = 1f;
			vector *= this.speedUpCounter;
			controls.stick.x = vector.x;
			controls.stick.y = vector.z;
		}
	}

	// Token: 0x0600058B RID: 1419 RVA: 0x00041BAC File Offset: 0x0003FDAC
	public void OverrideAttackingHulv(Hulv hulv)
	{
		HulvAI.attackingHulv = hulv;
	}

	// Token: 0x0600058C RID: 1420 RVA: 0x00041BB4 File Offset: 0x0003FDB4
	private void GotoThreaten()
	{
		if (HulvAI.attackingHulv == this.hulv)
		{
			HulvAI.attackingHulv = null;
		}
		this.hulv.lookAtPoint = ScriptGlobals.boy.gameObject;
		this.currentChaseMode = HulvAI.ChaseMode.Threaten;
		this.threatenCounter = 0f;
	}

	// Token: 0x0600058D RID: 1421 RVA: 0x00041C04 File Offset: 0x0003FE04
	private void UpdateDeadBoy(ref Hulv.HulvControl controls, float deltaTime)
	{
		this.hulv.lookAtPoint = ScriptGlobals.boy.gameObject;
		Vector3 vector = ScriptGlobals.boy.pos3;
		Hulv hulvKilledBoy = Hulv.GetHulvKilledBoy();
		if (hulvKilledBoy != null)
		{
			vector = hulvKilledBoy.transform.TransformPoint(Vector3.forward * 0.6f);
		}
		Vector3 vector2 = vector - this.hulv.transform.position;
		controls.trotButton = true;
		float magnitude = vector2.magnitude;
		if (magnitude < 1.8f)
		{
			if (magnitude < 0.5f)
			{
				controls.stick.x = vector2.x * 0.1f;
				controls.stick.y = vector2.z * 0.1f;
				controls.jumpButton = true;
			}
			controls.mood = Hulv.HulvControl.Mood.EatingFrenzy;
		}
		else
		{
			controls.stick.x = vector2.x;
			controls.stick.y = vector2.z;
			if (magnitude > 5f)
			{
				controls.trotButton = false;
			}
		}
	}

	// Token: 0x0600058E RID: 1422 RVA: 0x00041D1C File Offset: 0x0003FF1C
	private bool IsBoyChargable()
	{
		return !(this.hulv.secret != null) || !this.hulv.secret.IsBoyClose() || !(Hulv.GetHulvKilledBoy() != this.hulv);
	}

	// Token: 0x0600058F RID: 1423 RVA: 0x00041D6C File Offset: 0x0003FF6C
	private void UpdateThreaten(ref Hulv.HulvControl controls, float deltaTime)
	{
		bool flag = this.IsBoyChargable();
		Hulv hulvKilledBoy = Hulv.GetHulvKilledBoy();
		if (hulvKilledBoy != null && hulvKilledBoy != this.hulv)
		{
			this.UpdateDeadBoy(ref controls, deltaTime);
			return;
		}
		Vector3 vector = ScriptGlobals.boy.pos3;
		if (ScriptGlobals.boy.state is BoyLadderState)
		{
			vector += Vector3.right * ScriptGlobals.boy.facing * 0.3f;
		}
		Vector3 vector2 = vector - this.hulv.transform.position;
		vector2.y = 0f;
		float magnitude = vector2.magnitude;
		float num = Mathf.Abs(ScriptGlobals.boy.pos3.x - this.hulv.transform.position.x);
		vector2 /= magnitude;
		bool flag2 = false;
		if (this.hulv.leftWallBlocker != null && this.hulv.transform.position.x - this.hulv.leftWallBlocker.position.x < 1f && Mathf.Abs(this.hulv.transform.position.z) > 3f)
		{
			flag2 = true;
		}
		if (this.hulv.rightWallBlocker != null && this.hulv.transform.position.x - this.hulv.rightWallBlocker.position.x > -3f && Mathf.Abs(this.hulv.transform.position.z) > 3f)
		{
			flag2 = true;
		}
		if (num > this.breakDistFromBoy || (this.hulv.GetBoyHasTorch() && this.threatenCounter <= 0f && num > this.breakDistFromBoy * 0.5f))
		{
			controls.mood = Hulv.HulvControl.Mood.Furious;
			this.GotoSneakIn();
		}
		else
		{
			if (this.threatenCounter <= 0f)
			{
				controls.mood = Hulv.HulvControl.Mood.Furious;
			}
			else
			{
				controls.mood = Hulv.HulvControl.Mood.Twitchy;
			}
			if (this.hulv.GetBoyHasTorch() && (ScriptGlobals.boy.facing * vector2.x < 0f || !flag) && !ScriptGlobals.boy.isDead)
			{
				if (num < this.scareDist && !flag2)
				{
					bool flag3 = num < 3f;
					if ((ScriptGlobals.boy.velocity.GetSqrLength() > 0.2f && ScriptGlobals.boy.velocity.x * vector2.x < 0f) || flag3)
					{
						float num2 = 2f;
						if (flag3)
						{
							num2 = 10f;
						}
						this.threatenCounter += deltaTime * num2 * 0.5f;
						controls.jumpButton = true;
						if (this.threatenCounter >= 1f)
						{
							this.hulv.ForceSetHulvAnimationState(Hulv.HulvAnimationStates.JumpAndFlee, 0.2f);
							this.GotoRunAway();
							return;
						}
					}
				}
			}
			else
			{
				this.threatenCounter -= deltaTime * 0.5f;
				if (this.attackFenceWayPoint != null && base.transform.InverseTransformPoint(ScriptGlobals.boy.pos3).z < 0f)
				{
					if (flag)
					{
						this.GotoChargeIn();
					}
					return;
				}
				if (num < this.chargeToKillDist && (this.attackFenceWayPoint == null || HulvAI.GetAttackingHulv(this.hulv) == null || HulvAI.GetAttackingHulv(this.hulv) == this.hulv))
				{
					if (flag)
					{
						this.GotoChargeIn();
					}
				}
				else
				{
					controls.stick.x = vector2.x * 0.1f;
					controls.stick.y = vector2.z * 0.1f;
					float z = this.hulv.GetStaticExtraOffset().z;
					if (Mathf.Abs(z) == 0.2f && !ScriptGlobals.boy.isDead)
					{
						Hulv.HulvAnimationStates topAnimationState = this.hulv.GetTopAnimationState();
						if (topAnimationState != Hulv.HulvAnimationStates.JumpFenceBarkLowLoop && topAnimationState != Hulv.HulvAnimationStates.JumpFenceUpStraightBack && topAnimationState != Hulv.HulvAnimationStates.JumpFenceUpStraightBackB && topAnimationState != Hulv.HulvAnimationStates.JumpFenceUpStraightBackC && topAnimationState != Hulv.HulvAnimationStates.JumpFenceUp)
						{
							AnimationBlendHelper blendHelper = this.hulv.GetBlendHelper();
							if (!blendHelper.isDefActive(52) && !blendHelper.isDefActive(39) && !blendHelper.isDefActive(60) && !blendHelper.isDefActive(61) && !blendHelper.isDefActive(38))
							{
								this.hulv.SetUniqueAnimation(Hulv.UniqueAnimations.JumpFenceBarkLowLoop, this.attackFenceWayPoint, false, 0f, 0.5f, 0.1f);
								this.hulv.SetExtraOffsetZ(z);
							}
						}
					}
				}
			}
			if (!flag)
			{
				controls.mood = Hulv.HulvControl.Mood.Furious;
			}
		}
		Debug.DrawLine(this.hulv.transform.position + Vector3.up, this.hulv.transform.position + Vector3.up + Vector3.up * this.threatenCounter);
	}

	// Token: 0x06000590 RID: 1424 RVA: 0x00042318 File Offset: 0x00040518
	private void GotoRunAway()
	{
		if (HulvAI.attackingHulv == this.hulv)
		{
			HulvAI.attackingHulv = null;
		}
		this.currentChaseMode = HulvAI.ChaseMode.RunAway;
		this.chaseModeBreakTimer = -1f;
		this.runAwayScareTimer = 0.5f;
		this.threatenCounter = 0f;
		if (base.transform.position.x > ScriptGlobals.boy.transform.position.x)
		{
			this.fleeSign = 1f;
		}
		else
		{
			this.fleeSign = -1f;
		}
		if (this.hulv.leftWallBlocker != null)
		{
			this.fleeSign = -1f;
		}
		if (this.hulv.rightWallBlocker != null)
		{
			this.fleeSign = 1f;
		}
	}

	// Token: 0x06000591 RID: 1425 RVA: 0x000423F4 File Offset: 0x000405F4
	private void UpdateRunAway(ref Hulv.HulvControl controls, float deltaTime)
	{
		Vector3 vector = ScriptGlobals.boy.pos3 - this.hulv.transform.position;
		vector.y = 0f;
		float magnitude = vector.magnitude;
		float num = Mathf.Abs(ScriptGlobals.boy.pos3.x - this.hulv.transform.position.x);
		vector /= magnitude;
		if (this.hulv.leftWallBlocker != null)
		{
			if (ScriptGlobals.boy.pos.x <= this.hulv.leftWallBlocker.transform.position.x + 3f)
			{
				this.GotoChargeIn();
			}
			else if (this.hulv.transform.position.x - this.hulv.leftWallBlocker.position.x < 1f)
			{
				if (magnitude > this.runAwayDistFromBoy)
				{
					controls.stick.x = vector.x;
					controls.stick.y = vector.z;
					this.GotoThreaten();
					return;
				}
				vector.x = 0f;
				vector.z = -Mathf.Sign(vector.z);
			}
		}
		if (this.hulv.rightWallBlocker != null && this.hulv.transform.position.x - this.hulv.rightWallBlocker.position.x > -3f)
		{
			if (magnitude > this.runAwayDistFromBoy)
			{
				controls.stick.x = vector.x;
				controls.stick.y = vector.z;
				this.GotoThreaten();
				return;
			}
			vector.x = 0f;
			vector.z = -Mathf.Sign(vector.z);
		}
		if (this.runAwayScareTimer > 0f)
		{
			this.runAwayScareTimer -= deltaTime;
			if (this.runAwayScareTimer <= 0f)
			{
				this.hulv.HulvScaredAwaySignal.Signal();
			}
		}
		if ((num < this.runAwayDistFromBoy && this.chaseModeBreakTimer < 0f) || Mathf.Abs(base.transform.position.z) > 4f)
		{
			vector.z *= 0.35f;
			vector = vector.normalized;
			controls.stick.x = this.fleeSign;
			controls.stick.y = vector.z;
		}
		else
		{
			if (this.chaseModeBreakTimer < 0f)
			{
				this.chaseModeBreakTimer = 0.5f;
			}
			this.chaseModeBreakTimer -= deltaTime;
			if (this.chaseModeBreakTimer > 0f)
			{
				controls.stick.x = vector.x;
				controls.stick.y = vector.z;
			}
			else
			{
				this.GotoSneakIn();
			}
		}
	}

	// Token: 0x06000592 RID: 1426 RVA: 0x0004273C File Offset: 0x0004093C
	public void SetFreeCirclePos(Vector3 circlePos)
	{
		this.circlePos = circlePos;
	}

	// Token: 0x06000593 RID: 1427 RVA: 0x00042748 File Offset: 0x00040948
	private void GotoCircleBoy()
	{
		this.currentChaseMode = HulvAI.ChaseMode.CircleBoy;
		this.targetCirclePos = this.circlePos;
	}

	// Token: 0x06000594 RID: 1428 RVA: 0x00042760 File Offset: 0x00040960
	private void UpdateCircleBoy(ref Hulv.HulvControl controls, float deltaTime)
	{
		Vector3 vector = this.targetCirclePos - this.hulv.transform.position;
		vector.y = 0f;
		float magnitude = vector.magnitude;
		float num = Mathf.Abs(ScriptGlobals.boy.transform.position.x - this.hulv.transform.position.x);
		vector = vector.normalized;
		this.hulv.lookAtPoint = ScriptGlobals.boy.gameObject;
		bool flag = ScriptGlobals.boy.facing == Mathf.Sign(-vector.x);
		if (num > 7f && magnitude < 1f)
		{
			controls.trotButton = true;
			controls.mood = Hulv.HulvControl.Mood.Furious;
			controls.stick.x = vector.x;
			controls.stick.y = vector.z;
		}
		else if (flag && num < 6f)
		{
			this.GotoRunAway();
		}
	}

	// Token: 0x06000595 RID: 1429 RVA: 0x00042874 File Offset: 0x00040A74
	private void GotoSneakIn()
	{
		if (HulvAI.attackingHulv == this.hulv)
		{
			HulvAI.attackingHulv = null;
		}
		this.lastBoyFacing = 0f;
		this.currentChaseMode = HulvAI.ChaseMode.SneakIn;
		this.timeInSneak = 0f;
	}

	// Token: 0x06000596 RID: 1430 RVA: 0x000428BC File Offset: 0x00040ABC
	public void SetSneakInZ(float sneakInZ)
	{
		this.sneakInZ = sneakInZ;
	}

	// Token: 0x06000597 RID: 1431 RVA: 0x000428C8 File Offset: 0x00040AC8
	private void UpdateSneakIn(ref Hulv.HulvControl controls, float deltaTime)
	{
		bool flag = this.IsBoyChargable();
		if (!flag)
		{
			this.noChargeTimer += Time.deltaTime;
			if (this.noChargeTimer > 0.4f)
			{
				controls.mood = Hulv.HulvControl.Mood.Furious;
			}
			else
			{
				controls.mood = Hulv.HulvControl.Mood.Normal;
			}
			return;
		}
		controls.mood = Hulv.HulvControl.Mood.Furious;
		this.noChargeTimer = 0f;
		ScriptGlobals.boy.pos3.z = this.sneakInZ;
		Vector3 vector = ScriptGlobals.boy.pos3 - this.hulv.transform.position;
		vector.y = 0f;
		float magnitude = vector.magnitude;
		vector = vector.normalized;
		this.hulv.lookAtPoint = ScriptGlobals.boy.gameObject;
		bool flag2 = ScriptGlobals.boy.facing == Mathf.Sign(-vector.x);
		if (vector.x > 0f)
		{
			if (HulvAI.sneakingInRight == null)
			{
				HulvAI.sneakingInRight = this;
			}
		}
		else if (vector.x < 0f && HulvAI.sneakingInLeft == null)
		{
			HulvAI.sneakingInLeft = this;
		}
		if (this.sneakPause == -1f)
		{
			this.sneakPause = 2f + Random.value * 5f;
			this.threatenCounter = 0.9f;
		}
		if (this.sneakPause > 0f && !flag2)
		{
			this.sneakPause -= Time.deltaTime * 1.5f;
		}
		this.timeInSneak += Time.deltaTime;
		if (magnitude > 8f)
		{
			this.timeInSneak = Mathf.Max(1f, this.timeInSneak);
		}
		controls.trotButton = true;
		if (magnitude < 7f)
		{
			controls.mood = Hulv.HulvControl.Mood.Furious;
		}
		if (!this.hulv.GetBoyHasTorch())
		{
			if (flag)
			{
				HulvAI.attackingHulv = this.hulv;
				this.GotoChargeIn();
			}
			else
			{
				this.GotoThreaten();
			}
		}
		else if ((this.sneakPause < 0f || magnitude < 4f) && !flag2 && this.timeInSneak > 1f)
		{
			this.sneakPause = -1f;
			if (HulvAI.sneakingInLeft == this)
			{
				HulvAI.sneakingInLeft = null;
			}
			else if (HulvAI.sneakingInRight == this)
			{
				HulvAI.sneakingInRight = null;
			}
			if (flag)
			{
				this.GotoChargeIn();
			}
			else
			{
				this.GotoThreaten();
			}
		}
		else if (magnitude < 6f && flag2)
		{
			this.sneakPause = -1f;
			if (HulvAI.sneakingInLeft == this)
			{
				HulvAI.sneakingInLeft = null;
			}
			else if (HulvAI.sneakingInRight == this)
			{
				HulvAI.sneakingInRight = null;
			}
			this.GotoThreaten();
		}
		if ((!flag2 || magnitude > 9f) && this.timeInSneak > 1f && (HulvAI.sneakingInLeft == this || HulvAI.sneakingInRight == this))
		{
			controls.stick.x = vector.x;
			controls.stick.y = vector.z;
		}
		else
		{
			controls.stick = Vector2.zero;
		}
	}

	// Token: 0x06000598 RID: 1432 RVA: 0x00042C44 File Offset: 0x00040E44
	private void GotoChargeToKill()
	{
		HulvAI.attackingHulv = this.hulv;
		this.SetChaseMode(HulvAI.ChaseMode.ChargeToKill);
	}

	// Token: 0x06000599 RID: 1433 RVA: 0x00042C58 File Offset: 0x00040E58
	private void UpdateChargeToKill(ref Hulv.HulvControl controls, float deltaTime)
	{
		bool flag = base.transform.InverseTransformPoint(ScriptGlobals.boy.pos3).z < 0f;
		Hulv.HulvAnimationStates topAnimationState = this.hulv.GetTopAnimationState();
		if (this.attackFenceWayPoint != null && HulvAI.GetAttackingHulv(null) != this.hulv && (topAnimationState == Hulv.HulvAnimationStates.JumpFenceUpStraightBack || topAnimationState == Hulv.HulvAnimationStates.JumpFenceUpStraightBackB || topAnimationState == Hulv.HulvAnimationStates.JumpFenceUpStraightBackC) && !flag)
		{
			this.GotoThreaten();
		}
		if (!this.IsBoyChargable())
		{
			this.GotoThreaten();
		}
		Hulv hulvKilledBoy = Hulv.GetHulvKilledBoy();
		if (hulvKilledBoy != null && hulvKilledBoy != this.hulv)
		{
			this.UpdateDeadBoy(ref controls, deltaTime);
			return;
		}
		float num = Mathf.Abs((ScriptGlobals.boy.pos3 - this.hulv.transform.position).z);
		float num2 = num * 0.06f;
		Vector3 vector = ScriptGlobals.boy.pos3 + ScriptGlobals.boy.velocity3 * num2;
		Vector3 vector2 = vector - this.hulv.transform.position;
		Debug.DrawLine(vector, vector + Vector3.up);
		float y = vector2.y;
		vector2.y = 0f;
		float magnitude = vector2.magnitude;
		vector2 /= magnitude;
		controls.mood = Hulv.HulvControl.Mood.Furious;
		this.hulv.lookAtPoint = ScriptGlobals.boy.gameObject;
		controls.stick.x = vector2.x;
		controls.stick.y = vector2.z;
		Vector3 vector3 = this.hulv.transform.InverseTransformDirection(vector2);
		float x = ScriptGlobals.boy.visualBoy.boy.velocity.x;
		Vector3 vector4;
		vector4..ctor(x, 0f, 0f);
		Vector3 vector5 = this.hulv.transform.InverseTransformDirection(vector4);
		float num3 = this.finalKillJumpDist;
		if (this.hulv.shortDistBoyKill)
		{
			num3 = this.finalKillJumpDist - 0.5f;
		}
		float num4 = num3 - vector5.z * 0.3f;
		Hulv.HulvAnimationStates topDefinitionID = (Hulv.HulvAnimationStates)this.hulv.blendHelper.GetTopDefinitionID();
		bool flag2 = false;
		if (this.hulv.leftWallBlocker != null && ScriptGlobals.boy.pos.x <= this.hulv.leftWallBlocker.transform.position.x + 3f)
		{
			flag2 = true;
		}
		if (!flag2 && this.hulv.GetBoyHasTorch() && ScriptGlobals.boy.facing * vector2.x < 0f && !ScriptGlobals.boy.isDead && topDefinitionID != Hulv.HulvAnimationStates.KillJump && topDefinitionID != Hulv.HulvAnimationStates.KillJumpLow && topDefinitionID != Hulv.HulvAnimationStates.JumpAttack && topDefinitionID != Hulv.HulvAnimationStates.JumpAttackLow)
		{
			controls.jumpButton = false;
			controls.stick = Vector2.zero;
			this.GotoThreaten();
		}
		bool flag3 = true;
		if (this.hulv.fence != null && Mathf.Abs(base.transform.position.x - this.hulv.fence.position.x) < 2f)
		{
			float num5 = ScriptGlobals.boy.pos.y - base.transform.position.y;
			float num6 = this.hulv.fence.position.x - base.transform.position.x;
			if ((num5 > 0.8f || flag) && num6 * (ScriptGlobals.boy.pos.x - base.transform.position.x) < 0f && num6 * base.transform.forward.x > 0f)
			{
				flag3 = false;
			}
		}
		if (flag3 && magnitude < num4 && !flag)
		{
			if ((this.attackFenceWayPoint != null && vector2.x > 0.35f) || y > 2.5f)
			{
				if (this.attackFenceWayPoint != null && !this.hulv.IsAnimStillActive(Hulv.HulvAnimationStates.JumpFenceUp) && !this.hulv.IsAnimStillActive(Hulv.HulvAnimationStates.JumpFenceUpStraightBack) && !this.hulv.IsAnimStillActive(Hulv.HulvAnimationStates.JumpFenceUpStraightBackB) && !this.hulv.IsAnimStillActive(Hulv.HulvAnimationStates.JumpFenceUpStraightBackC) && !this.hulv.IsAnimStillActive(Hulv.HulvAnimationStates.JumpFenceBarkLowLoop))
				{
					if (this.attackFenceWayPoint.transform.InverseTransformPoint(this.hulv.transform.position).z * this.attackFenceWayPoint.transform.lossyScale.z > 0.2f)
					{
						Vector3 position = this.attackFenceWayPoint.transform.position;
						float num7 = Mathf.Sign(this.attackFenceWayPoint.transform.TransformDirection(Vector3.back).x);
						float num8 = -0.2f;
						int i = 0;
						int count = this.hulv.avoidHulvList.Count;
						while (i < count)
						{
							Hulv hulv = this.hulv.avoidHulvList[i];
							Hulv.HulvAnimationStates topAnimationState2 = hulv.GetTopAnimationState();
							float z = hulv.GetStaticExtraOffset().z;
							if (z != 0f)
							{
								if (num8 == -0.2f)
								{
									num8 = 1.1f;
								}
								else
								{
									num8 = 0.3f;
								}
							}
							i++;
						}
						if (this.hulv.GetTopAnimationState() != Hulv.HulvAnimationStates.JumpFenceBarkLowLoop)
						{
							this.hulv.SetUniqueAnimation(Hulv.UniqueAnimations.JumpFenceUp, this.attackFenceWayPoint, false, 0f, -1f, -1f);
							this.hulv.SetExtraOffsetZ(num8);
						}
					}
				}
				else
				{
					controls.stick.x = 0f;
					controls.stick.y = 0f;
				}
				controls.jumpButton = true;
			}
			else if (this.attackFenceWayPoint != null && this.attackFenceWayPoint.transform.InverseTransformPoint(ScriptGlobals.boy.pos3).z > 1.6f && Mathf.Abs(this.attackFenceWayPoint.transform.InverseTransformPoint(this.hulv.transform.position).z) < 1.4f)
			{
				controls.stick.x = 0f;
				controls.stick.y = 0f;
			}
			else if (vector3.z > 0f && Mathf.Abs(vector3.x) < 0.8f)
			{
				controls.jumpButton = true;
			}
		}
	}

	// Token: 0x0600059A RID: 1434 RVA: 0x000433A4 File Offset: 0x000415A4
	private void UpdateSwimHunt(ref Hulv.HulvControl controls, float deltaTime)
	{
		Vector3 vector = ScriptGlobals.boy.pos3 - this.hulv.transform.position;
		vector.y = 0f;
		float magnitude = vector.magnitude;
		vector /= magnitude;
		float num = 4f;
		if (this.leaveWaterWayPoint != null)
		{
			if (this.leaveWaterWayPoint.CloseToWayPoint(this.hulv.transform))
			{
				this.FollowWaypoint(this.leaveWaterWayPoint.gameObject);
				return;
			}
			if (this.hulv.transform.InverseTransformPoint(this.leaveWaterWayPoint.transform.position).z > 0f)
			{
				num = Mathf.Min((this.hulv.transform.position - this.leaveWaterWayPoint.transform.position).magnitude * 0.08f, 4f);
			}
		}
		this.actualMinLengthToBoy += (num - this.actualMinLengthToBoy) * Time.deltaTime * 3f;
		if (magnitude > this.actualMinLengthToBoy)
		{
			this.swimSpeed = 0.11f + 0.3f * Mathf.Min((magnitude - this.actualMinLengthToBoy) * 0.25f, 0.8f);
		}
		else
		{
			this.swimSpeed = 0.2f;
		}
		vector *= this.swimSpeed * this.hulv.swimSpeedFactor;
		controls.stick.x = vector.x;
		controls.stick.y = vector.z;
		if (!this.hulv.IsInWater())
		{
			this.SetChaseMode(HulvAI.ChaseMode.ChargeIn);
		}
	}

	// Token: 0x0600059B RID: 1435 RVA: 0x00043560 File Offset: 0x00041760
	private void UpdateChaseBoy(Hulv.HulvControl controls, float deltaTime)
	{
		if (ScriptGlobals.boy == null || controls == null)
		{
			return;
		}
		controls.jumpButton = false;
		controls.trotButton = false;
		controls.turnFactor = 1f;
		controls.stick.x = 0f;
		controls.stick.y = 0f;
		if (this.hulv.IsInWater())
		{
			this.currentChaseMode = HulvAI.ChaseMode.SwimHunt;
		}
		else if (this.currentChaseMode == HulvAI.ChaseMode.SwimHunt && !this.hulv.IsInWater())
		{
			this.currentChaseMode = HulvAI.ChaseMode.ChargeIn;
		}
		if (this.hulv.debugPosition)
		{
		}
		switch (this.currentChaseMode)
		{
		case HulvAI.ChaseMode.ChargeIn:
			this.UpdateChargeIn(ref controls, deltaTime);
			break;
		case HulvAI.ChaseMode.Threaten:
			this.UpdateThreaten(ref controls, deltaTime);
			break;
		case HulvAI.ChaseMode.RunAway:
			this.UpdateRunAway(ref controls, deltaTime);
			break;
		case HulvAI.ChaseMode.SneakIn:
			this.UpdateSneakIn(ref controls, deltaTime);
			break;
		case HulvAI.ChaseMode.CircleBoy:
			this.UpdateCircleBoy(ref controls, deltaTime);
			break;
		case HulvAI.ChaseMode.ChargeToKill:
			this.UpdateChargeToKill(ref controls, deltaTime);
			break;
		case HulvAI.ChaseMode.SwimHunt:
			this.UpdateSwimHunt(ref controls, deltaTime);
			break;
		case HulvAI.ChaseMode.Idle:
			controls.stick = Vector2.zero;
			break;
		}
	}

	// Token: 0x0600059C RID: 1436 RVA: 0x000436B0 File Offset: 0x000418B0
	public HulvAI.AIMode GetCurrentMode()
	{
		return this.aiMode;
	}

	// Token: 0x0400099D RID: 2461
	private static Hulv attackingHulv;

	// Token: 0x0400099E RID: 2462
	private HulvAI.AIMode aiMode;

	// Token: 0x0400099F RID: 2463
	private Hulv hulv;

	// Token: 0x040009A0 RID: 2464
	private HulvWaypoint leaveWaterWayPoint;

	// Token: 0x040009A1 RID: 2465
	private GameObject attackFenceWayPoint;

	// Token: 0x040009A2 RID: 2466
	private Hulv.HulvControl.Mood lastMood;

	// Token: 0x040009A3 RID: 2467
	private HulvAI.ChaseMode currentChaseMode;

	// Token: 0x040009A4 RID: 2468
	private float speedUpCounter;

	// Token: 0x040009A5 RID: 2469
	private float breakDistFromBoy = 8f;

	// Token: 0x040009A6 RID: 2470
	private float scareDist = 4f;

	// Token: 0x040009A7 RID: 2471
	private float veryCloseToBoy = 4f;

	// Token: 0x040009A8 RID: 2472
	private float threatenCounter;

	// Token: 0x040009A9 RID: 2473
	private float chargeToKillDist = 2.75f;

	// Token: 0x040009AA RID: 2474
	private Hulv.HulvAnimationStates lastJumpAnimState;

	// Token: 0x040009AB RID: 2475
	private float runAwayScareTimer = 0.5f;

	// Token: 0x040009AC RID: 2476
	private float chaseModeBreakTimer = -1f;

	// Token: 0x040009AD RID: 2477
	private float runAwayDistFromBoy = 6f;

	// Token: 0x040009AE RID: 2478
	private float fleeSign = 1f;

	// Token: 0x040009AF RID: 2479
	private Vector3 circlePos;

	// Token: 0x040009B0 RID: 2480
	private Vector3 targetCirclePos;

	// Token: 0x040009B1 RID: 2481
	private float lastBoyFacing;

	// Token: 0x040009B2 RID: 2482
	private float directionSluggishness;

	// Token: 0x040009B3 RID: 2483
	private float sneakPause = -1f;

	// Token: 0x040009B4 RID: 2484
	private float timeInSneak;

	// Token: 0x040009B5 RID: 2485
	private float sneakInZ;

	// Token: 0x040009B6 RID: 2486
	private static HulvAI sneakingInLeft;

	// Token: 0x040009B7 RID: 2487
	private static HulvAI sneakingInRight;

	// Token: 0x040009B8 RID: 2488
	private float noChargeTimer;

	// Token: 0x040009B9 RID: 2489
	private float finalKillJumpDist = 2.8f;

	// Token: 0x040009BA RID: 2490
	private float swimSpeed = 0.2f;

	// Token: 0x040009BB RID: 2491
	private float actualMinLengthToBoy = 4f;

	// Token: 0x020000A8 RID: 168
	public enum AIMode
	{
		// Token: 0x040009BD RID: 2493
		FollowWaypoint,
		// Token: 0x040009BE RID: 2494
		ChaseBoy
	}

	// Token: 0x020000A9 RID: 169
	public enum ChaseMode
	{
		// Token: 0x040009C0 RID: 2496
		ChargeIn,
		// Token: 0x040009C1 RID: 2497
		Threaten,
		// Token: 0x040009C2 RID: 2498
		RunAway,
		// Token: 0x040009C3 RID: 2499
		SneakIn,
		// Token: 0x040009C4 RID: 2500
		CircleBoy,
		// Token: 0x040009C5 RID: 2501
		ChargeToKill,
		// Token: 0x040009C6 RID: 2502
		SwimHunt,
		// Token: 0x040009C7 RID: 2503
		Idle
	}
}