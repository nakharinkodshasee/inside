using System;
using SceneVerification;
using UnityEngine;

// Token: 0x02000181 RID: 385
public class CameraLightSwap : MonoBehaviour, IPreAwake
{
	// Token: 0x06000B52 RID: 2898 RVA: 0x0006FD44 File Offset: 0x0006DF44
	public bool PreAwake(int callcount)
	{
		this.enableSwap = SignalIn.Create("enableSwap", base.gameObject, delegate
		{
			this.isEnabled = true;
		});
		this.disableSwap = SignalIn.Create("disableSwap", base.gameObject, delegate
		{
			this.isEnabled = false;
		});
		return true;
	}

	// Token: 0x06000B53 RID: 2899 RVA: 0x0006FD98 File Offset: 0x0006DF98
	private void Start()
	{
		if (this.startEnabled)
		{
			this.isEnabled = true;
		}
	}

	// Token: 0x06000B54 RID: 2900 RVA: 0x0006FDAC File Offset: 0x0006DFAC
	private void EnableLight(Transform l, bool b)
	{
		l.gameObject.SetActive(b);
	}

	// Token: 0x06000B55 RID: 2901 RVA: 0x0006FDBC File Offset: 0x0006DFBC
	private void SimplePosCheck()
	{
		if (this.cameraSwapX != null)
		{
			if (ScriptGlobals.camera.transform.position.x <= this.cameraSwapX.transform.position.x)
			{
				if (this.lightLeft)
				{
					this.EnableLight(this.lightLeft, true);
				}
				if (this.lightRight)
				{
					this.EnableLight(this.lightRight, false);
				}
			}
			else
			{
				if (this.lightLeft)
				{
					this.EnableLight(this.lightLeft, false);
				}
				if (this.lightRight)
				{
					this.EnableLight(this.lightRight, true);
				}
			}
		}
		else if (this.cameraSwapY != null)
		{
			if (ScriptGlobals.camera.transform.position.y <= this.cameraSwapY.transform.position.y)
			{
				if (this.lightLeft)
				{
					this.EnableLight(this.lightLeft, true);
				}
				if (this.lightRight)
				{
					this.EnableLight(this.lightRight, false);
				}
			}
			else
			{
				if (this.lightLeft)
				{
					this.EnableLight(this.lightLeft, false);
				}
				if (this.lightRight)
				{
					this.EnableLight(this.lightRight, true);
				}
			}
		}
	}

	// Token: 0x06000B56 RID: 2902 RVA: 0x0006FF4C File Offset: 0x0006E14C
	private void AngleBasedXAxisCheck()
	{
		Vector3 position = ScriptGlobals.camera.transform.position;
		position.z = 0f;
		Vector3 position2 = this.cameraSwapX.transform.position;
		position2.z = 0f;
		Vector3 vector = position2 - position;
		vector.Normalize();
		if (Vector3.Dot(this.cameraSwapX.transform.right, vector) > 0f)
		{
			if (this.lightLeft)
			{
				this.EnableLight(this.lightLeft, true);
			}
			if (this.lightRight)
			{
				this.EnableLight(this.lightRight, false);
			}
		}
		else
		{
			if (this.lightLeft)
			{
				this.EnableLight(this.lightLeft, false);
			}
			if (this.lightRight)
			{
				this.EnableLight(this.lightRight, true);
			}
		}
	}

	// Token: 0x06000B57 RID: 2903 RVA: 0x0007003C File Offset: 0x0006E23C
	private void Update()
	{
		if (!this.isEnabled)
		{
			return;
		}
		if (!this.useXAxisAsAngle)
		{
			this.SimplePosCheck();
		}
		else
		{
			this.AngleBasedXAxisCheck();
		}
	}

	// Token: 0x06000B58 RID: 2904 RVA: 0x00070074 File Offset: 0x0006E274
	[Verify("Asset/CameraLightSwap need NoBatching", "CameraLightSwap is mis-used for non-lights which can break batching, so to avoid breaking batching add NoBatching", new string[]
	{
		"CleanUp"
	})]
	private void Verify(Form form)
	{
		bool flag = false;
		if (this.lightLeft && this.lightLeft.GetComponent<NoBatching>() == null)
		{
			flag = true;
		}
		if (this.lightRight && this.lightRight.GetComponent<NoBatching>() == null)
		{
			flag = true;
		}
		if (flag)
		{
			form.ReportWarning(this, "CameraLightSwap need NoBatching on lightLeft and lightRight", "Add NoBatching", delegate(Object o)
			{
				if (this.lightLeft)
				{
					this.lightLeft.gameObject.AddComponent<NoBatching>();
				}
				if (this.lightRight)
				{
					this.lightRight.gameObject.AddComponent<NoBatching>();
				}
			});
		}
	}

	// Token: 0x06000B59 RID: 2905 RVA: 0x000700F8 File Offset: 0x0006E2F8
	private void OnDrawGizmos()
	{
		if (EditorMode.DebugLayerActive(EditorMode.EDebugLayers.Gameplay))
		{
			Gizmos.color = this.gizmoColor;
			Gizmos.DrawWireCube(base.transform.position, new Vector3(0.5f, 0.5f));
		}
	}

	// Token: 0x0400139C RID: 5020
	public bool startEnabled = true;

	// Token: 0x0400139D RID: 5021
	public GameObject cameraSwapX;

	// Token: 0x0400139E RID: 5022
	public GameObject cameraSwapY;

	// Token: 0x0400139F RID: 5023
	public Transform lightLeft;

	// Token: 0x040013A0 RID: 5024
	public Transform lightRight;

	// Token: 0x040013A1 RID: 5025
	public bool useXAxisAsAngle;

	// Token: 0x040013A2 RID: 5026
	private bool isEnabled;

	// Token: 0x040013A3 RID: 5027
	private SignalIn enableSwap;

	// Token: 0x040013A4 RID: 5028
	private SignalIn disableSwap;

	// Token: 0x040013A5 RID: 5029
	private Color gizmoColor = new Color(0f, 1f, 0.1f, 0.5f);
}
