using System;
using UnityEngine;

// Token: 0x020003ED RID: 1005
public class SecretLineRenderer : MonoBehaviour
{
	// Token: 0x06001AB8 RID: 6840 RVA: 0x000EADFC File Offset: 0x000E8FFC
	private void Update()
	{
		this.startPos = base.transform.position;
		this.lineRenderer.SetVertexCount(this.pointCount);
		this.timer += Time.deltaTime * this.waveSpeed;
		float num = this.screenWidth / (float)this.pointCount;
		for (int i = 0; i < this.pointCount; i++)
		{
			float num2 = (float)i / ((float)this.pointCount - 1f);
			Vector3 vector = this.startPos;
			vector.x += (float)i * num;
			switch (this.currentCurveType)
			{
			case SecretLineRenderer.CurveType.Sine:
				vector.y += Mathf.Sin(num2 * 3.1415927f * this.waveWidth + this.timer) * this.waveHeight * this.curveFade;
				break;
			case SecretLineRenderer.CurveType.Square:
			{
				float num3 = Mathf.Sin(num2 * 3.1415927f * this.waveWidth + this.timer);
				vector.y += Mathf.Sign(num3) * this.waveHeight * this.curveFade;
				break;
			}
			case SecretLineRenderer.CurveType.SawTooth:
				vector.y += (num2 + this.timer) % this.waveWidth * this.waveHeight * this.curveFade;
				break;
			}
			this.lineRenderer.SetPosition(i, vector);
		}
		this.curveFade += (this.curveFadeTarget - this.curveFade) * Time.deltaTime * this.fadeSpeed;
		if (this.curveType == SecretLineRenderer.CurveType.None)
		{
			this.curveFadeTarget = 0f;
		}
		else
		{
			this.curveFadeTarget = 1f;
		}
		if (this.curveType != SecretLineRenderer.CurveType.None)
		{
			this.currentCurveType = this.curveType;
		}
	}

	// Token: 0x0400306A RID: 12394
	public LineRenderer lineRenderer;

	// Token: 0x0400306B RID: 12395
	[Range(1f, 100f)]
	public int pointCount = 10;

	// Token: 0x0400306C RID: 12396
	public SecretLineRenderer.CurveType curveType;

	// Token: 0x0400306D RID: 12397
	public float screenWidth = 10f;

	// Token: 0x0400306E RID: 12398
	public float waveHeight = 10f;

	// Token: 0x0400306F RID: 12399
	public float waveWidth = 1f;

	// Token: 0x04003070 RID: 12400
	public float waveSpeed = 2f;

	// Token: 0x04003071 RID: 12401
	public float fadeSpeed = 1f;

	// Token: 0x04003072 RID: 12402
	private float timer;

	// Token: 0x04003073 RID: 12403
	private Vector3 startPos;

	// Token: 0x04003074 RID: 12404
	private SecretLineRenderer.CurveType currentCurveType;

	// Token: 0x04003075 RID: 12405
	private float curveFadeTarget;

	// Token: 0x04003076 RID: 12406
	private float curveFade;

	// Token: 0x020003EE RID: 1006
	public enum CurveType
	{
		// Token: 0x04003078 RID: 12408
		None,
		// Token: 0x04003079 RID: 12409
		Triangle,
		// Token: 0x0400307A RID: 12410
		Sine,
		// Token: 0x0400307B RID: 12411
		Square,
		// Token: 0x0400307C RID: 12412
		SawTooth
	}
}
