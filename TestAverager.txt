using System;
using UnitTest;
using UnityEngine;

// Token: 0x02000627 RID: 1575
[Test]
internal class TestAverager
{
	// Token: 0x06002719 RID: 10009 RVA: 0x0013B954 File Offset: 0x00139B54
	public TestAverager()
	{
		this.va = default(CumulativeAverageVector3);
	}

	// Token: 0x0600271A RID: 10010 RVA: 0x0013B984 File Offset: 0x00139B84
	[Test("Reset")]
	private bool Reset()
	{
		this.va.Reset();
		return true;
	}

	// Token: 0x0600271B RID: 10011 RVA: 0x0013B994 File Offset: 0x00139B94
	[Test("Average of {(7,6,5)}*100")]
	private bool AverageManyVectors()
	{
		Vector3 vector;
		vector..ctor(7f, 6f, 5f);
		this.va.Reset();
		for (int i = 0; i < 100; i++)
		{
			this.va.AddValue(vector);
		}
		this.error = (this.va.average - vector).magnitude;
		return this.error < 0.0001f;
	}

	// Token: 0x0600271C RID: 10012 RVA: 0x0013BA10 File Offset: 0x00139C10
	[Test("Average of {1,2,3,4,1,2,3,4,...}")]
	private bool AverageManyNumbers()
	{
		this.fa.Reset();
		for (int i = 0; i < 400; i++)
		{
			this.fa.AddValue((float)(i % 4 + 1));
		}
		this.error = Mathf.Abs(this.fa.average - 2.5f);
		return this.error < 0.01f;
	}

	// Token: 0x0600271D RID: 10013 RVA: 0x0013BA78 File Offset: 0x00139C78
	[Test("Average of (n,n,n) for n=0..9")]
	private bool Average10Vectors()
	{
		this.va.Reset();
		for (int i = 0; i < 10; i++)
		{
			this.va.AddValue(new Vector3((float)i, (float)i, (float)i));
		}
		this.error = (this.va.average - Vector3.one * 4.5f).magnitude;
		return this.error < 0.0001f;
	}

	// Token: 0x170000B1 RID: 177
	// (get) Token: 0x0600271E RID: 10014 RVA: 0x0013BAF4 File Offset: 0x00139CF4
	[Test("Current value (Vector3)")]
	public Vector3 Vector3Average
	{
		get
		{
			return this.va.average;
		}
	}

	// Token: 0x170000B2 RID: 178
	// (get) Token: 0x0600271F RID: 10015 RVA: 0x0013BB04 File Offset: 0x00139D04
	[Test("Current value (float)")]
	public float FloatAverage
	{
		get
		{
			return this.fa.average;
		}
	}

	// Token: 0x0400469B RID: 18075
	private CumulativeAverageVector3 va;

	// Token: 0x0400469C RID: 18076
	private CumulativeAverageFloat fa;

	// Token: 0x0400469D RID: 18077
	[Test("Error")]
	private float error;

	// Token: 0x0400469E RID: 18078
	[Test("float epsilon")]
	private float floatEpsilon = float.Epsilon;
}