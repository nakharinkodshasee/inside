using System;
using ABHelper;
using UnityEngine;

// Token: 0x02000043 RID: 67
public class BaseWaypointFollower : MonoBehaviour
{
	// Token: 0x06000205 RID: 517 RVA: 0x00019F50 File Offset: 0x00018150
	public void InitBaseWaypointFollower(Transform follower)
	{
		this.follower = follower;
	}

	// Token: 0x06000206 RID: 518 RVA: 0x00019F5C File Offset: 0x0001815C
	public virtual void UpdateInput(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		this.UpdateFollowWaypoint(controls, deltaTime, ref wantedPos);
	}

	// Token: 0x06000207 RID: 519 RVA: 0x00019F68 File Offset: 0x00018168
	public virtual void FollowWaypoint(GameObject wayPointToFollow)
	{
		this.startUpCountdown = 0f;
		this.continueCountdown = 0f;
		this.SetWayPoint(wayPointToFollow);
	}

	// Token: 0x06000208 RID: 520 RVA: 0x00019F88 File Offset: 0x00018188
	private bool SetNextWaypoint(BaseWaypoint theWaypoint)
	{
		if (theWaypoint != null && theWaypoint.nextWaypoint != null)
		{
			this.SetWayPoint(theWaypoint.nextWaypoint.gameObject);
			return true;
		}
		this.SetWayPoint(null);
		return false;
	}

	// Token: 0x06000209 RID: 521 RVA: 0x00019FD0 File Offset: 0x000181D0
	private void SetWayPoint(GameObject theWaypoint)
	{
		if (theWaypoint == this.currentMoveToPoint && theWaypoint != null)
		{
			return;
		}
		this.currentMoveToPoint = null;
		this.currentMoveToWaypoint = null;
		this.currentTurnFraction = 1f;
		this.continueCountdown = 0f;
		this.startUpCountdown = 0f;
		this.endWithAnimation = false;
		this.pointReached = false;
		if (theWaypoint != null)
		{
			this.currentMoveToPoint = theWaypoint;
			this.currentMoveToWaypoint = theWaypoint.GetComponent<BaseWaypoint>();
			if (this.currentMoveToWaypoint != null)
			{
				if (this.currentMoveToWaypoint.uniqueAnimDefID < 0 && this.currentMoveToWaypoint.uniqueAnimationName.Length > 0)
				{
					this.currentMoveToWaypoint.uniqueAnimDefID = this.GetUniqueAnimDefID_Callback(this.currentMoveToWaypoint);
				}
				if (this.currentMoveToWaypoint.startupMode == BaseWaypoint.ActionMode.WaitTime)
				{
					this.startUpCountdown = this.currentMoveToWaypoint.waitTime;
				}
				if (this.currentMoveToWaypoint.continueMode == BaseWaypoint.ActionMode.WaitTime)
				{
					this.continueCountdown = this.currentMoveToWaypoint.waitTime;
				}
				this.currentTurnFraction = this.currentMoveToWaypoint.turnFactor;
				if (this.currentMoveToWaypoint.uniqueAnimDefID != -1)
				{
					this.endWithAnimation = true;
				}
				this.NewWaypointSet_Callback(this.currentMoveToWaypoint);
			}
		}
	}

	// Token: 0x0600020A RID: 522 RVA: 0x0001A120 File Offset: 0x00018320
	public virtual bool isFollowingAWaypoint()
	{
		return this.currentMoveToPoint != null;
	}

	// Token: 0x0600020B RID: 523 RVA: 0x0001A130 File Offset: 0x00018330
	public virtual GameObject GetCurrentWaypoint()
	{
		return this.currentMoveToPoint;
	}

	// Token: 0x0600020C RID: 524 RVA: 0x0001A138 File Offset: 0x00018338
	public virtual void NewWaypointSet_Callback(BaseWaypoint wayPoint)
	{
	}

	// Token: 0x0600020D RID: 525 RVA: 0x0001A13C File Offset: 0x0001833C
	public virtual void WaypointReached_Callback(BaseWaypoint wayPoint)
	{
	}

	// Token: 0x0600020E RID: 526 RVA: 0x0001A140 File Offset: 0x00018340
	public virtual void SetUniqueAnimationFromWaypoint_Callback(BaseWaypoint waypointToUse)
	{
		AnimcontrolledCharacter component = this.follower.gameObject.GetComponent<AnimcontrolledCharacter>();
		if (component != null)
		{
			component.SetUniqueAnimation(this.currentMoveToWaypoint.uniqueAnimDefID, this.currentMoveToWaypoint.gameObject, this.currentMoveToWaypoint.arrivalLineMode, this.currentMoveToWaypoint.uniqueAnimCustomParameter, this.currentMoveToWaypoint.uniqueOverrideTransitTime, this.currentMoveToWaypoint.uniqueOverrideStartPlayPos);
		}
	}

	// Token: 0x0600020F RID: 527 RVA: 0x0001A1B4 File Offset: 0x000183B4
	public virtual int GetTopAnimDefID_Callback()
	{
		AnimcontrolledCharacter component = this.follower.gameObject.GetComponent<AnimcontrolledCharacter>();
		if (!(component != null))
		{
			return -1;
		}
		AnimationBlendHelper blendHelper = component.GetBlendHelper();
		ABHelperData latestAnimData = blendHelper.GetLatestAnimData();
		if (latestAnimData != null && !latestAnimData.topIsLooped && latestAnimData.normalizedAnimPos >= 1f)
		{
			return -component.GetBlendHelper().GetTopDefinitionID();
		}
		return component.GetBlendHelper().GetTopDefinitionID();
	}

	// Token: 0x06000210 RID: 528 RVA: 0x0001A228 File Offset: 0x00018428
	public virtual Vector3 CalculatedWaypointOffset_Callback(int definitionID)
	{
		AnimcontrolledCharacter component = this.follower.gameObject.GetComponent<AnimcontrolledCharacter>();
		if (component != null && definitionID >= 0)
		{
			AnimationBlendHelper blendHelper = component.GetBlendHelper();
			ABDefinition abdefinition = blendHelper.blendDefinitions[definitionID];
			if (abdefinition != null)
			{
				AnimcontrolStateInfo animcontrolStateInfo = null;
				if (component.transitionManager != null)
				{
					animcontrolStateInfo = component.transitionManager.GetState(abdefinition);
				}
				if (animcontrolStateInfo != null && animcontrolStateInfo.staticAlignToEnd)
				{
					return -abdefinition.GetMovementData().totalMovement;
				}
			}
		}
		return Vector3.zero;
	}

	// Token: 0x06000211 RID: 529 RVA: 0x0001A2C0 File Offset: 0x000184C0
	public virtual int GetUniqueAnimDefID_Callback(BaseWaypoint wayPoint)
	{
		AnimcontrolledCharacter component = this.follower.gameObject.GetComponent<AnimcontrolledCharacter>();
		if (component != null)
		{
			ABDefinition abdefinition = component.GetBlendHelper().GetDefinition(wayPoint.uniqueAnimationName, false);
			if (abdefinition == null)
			{
				abdefinition = component.OnTheFlyCreateDef(wayPoint.uniqueAnimationName);
			}
			if (abdefinition != null)
			{
				return abdefinition.definitionID;
			}
		}
		return -1;
	}

	// Token: 0x06000212 RID: 530 RVA: 0x0001A320 File Offset: 0x00018520
	public virtual AnimationBlendHelper GetBlendHelper_Callback()
	{
		AnimcontrolledCharacter component = this.follower.gameObject.GetComponent<AnimcontrolledCharacter>();
		if (component != null)
		{
			return component.GetBlendHelper();
		}
		return null;
	}

	// Token: 0x06000213 RID: 531 RVA: 0x0001A354 File Offset: 0x00018554
	public virtual void PostUpdateFollowWaypoint_Callback(AnimcontrolledCharacter.AnimControl controls, BaseWaypoint wayPoint)
	{
	}

	// Token: 0x06000214 RID: 532 RVA: 0x0001A358 File Offset: 0x00018558
	private void UpdateFollowWaypoint(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		if (this.currentMoveToPoint == null)
		{
			controls.stick = Vector2.zero;
		}
		else
		{
			Vector3 vector = this.currentMoveToPoint.transform.position - this.follower.position;
			if (this.currentMoveToWaypoint != null && this.currentMoveToWaypoint.uniqueAnimDefID > -1)
			{
				Vector3 offset = this.currentMoveToWaypoint.GetOffset(this);
				if (offset != Vector3.zero)
				{
					vector = this.currentMoveToWaypoint.transform.position + this.currentMoveToWaypoint.transform.TransformDirection(offset) - this.follower.position;
				}
			}
			vector.y = 0f;
			float num = 0f;
			float num2 = vector.magnitude;
			if (this.currentMoveToWaypoint != null)
			{
				if (this.currentMoveToWaypoint.arrivalLineMode)
				{
					if (this.currentMoveToWaypoint.lineModeNoReverse)
					{
						num2 = Mathf.Max(this.currentMoveToWaypoint.transform.InverseTransformDirection(vector).z, 0f);
					}
					else
					{
						num2 = Mathf.Abs(this.currentMoveToWaypoint.transform.InverseTransformDirection(vector).z);
					}
				}
				this.startUpCountdown -= deltaTime;
				if (this.startUpCountdown > 0f)
				{
					vector = Vector3.zero;
				}
				else
				{
					float magnitude = vector.magnitude;
					if (magnitude > 0f)
					{
						float num3 = 1f;
						if (magnitude < this.currentMoveToWaypoint.autoSlowDownDist)
						{
							num3 = Mathf.Max((magnitude - this.currentMoveToWaypoint.arrivalDist) / this.currentMoveToWaypoint.autoSlowDownDist, 0f);
						}
						vector = (this.stickDeadzone + (this.currentMoveToWaypoint.speedPercentage * num3 + 0.0001f) * (1f - this.stickDeadzone)) * vector / magnitude;
					}
				}
				num = this.currentMoveToWaypoint.arrivalDist;
			}
			else if (num2 > 1f)
			{
				vector /= num2;
			}
			if (num2 <= num || this.pointReached)
			{
				this.pointReached = true;
				if (this.currentMoveToWaypoint != null)
				{
					if (this.currentMoveToWaypoint.nextWaypoint == null)
					{
						vector = Vector3.zero;
					}
					this.continueCountdown -= deltaTime;
					bool flag = true;
					if (this.continueCountdown > 0f)
					{
						flag = false;
						vector = Vector3.zero;
					}
					if (this.currentMoveToWaypoint.uniqueAnimDefID > -1)
					{
						int topAnimDefID_Callback = this.GetTopAnimDefID_Callback();
						if (this.currentMoveToWaypoint.DissalowAutoContinueDueToUniqueAnimation(this.follower, this.GetTopAnimDefID_Callback()))
						{
							if (this.currentMoveToWaypoint.nextWaypoint != null && flag)
							{
								BaseWaypoint nextWaypoint = this.currentMoveToWaypoint.nextWaypoint;
								vector = (nextWaypoint.transform.position + nextWaypoint.transform.TransformDirection(nextWaypoint.GetOffset(this)) - this.follower.position).normalized;
							}
							flag = false;
							if (this.currentMoveToWaypoint.uniqueAnimCustomEndPos >= 0f)
							{
								AnimationBlendHelper blendHelper_Callback = this.GetBlendHelper_Callback();
								if (blendHelper_Callback != null && blendHelper_Callback.GetLatestAnimData().normalizedAnimPos > this.currentMoveToWaypoint.uniqueAnimCustomEndPos)
								{
									flag = true;
								}
							}
						}
						else if (this.endWithAnimation)
						{
							this.currentMoveToWaypoint.SendWaypointReached();
							this.WaypointReached_Callback(this.currentMoveToWaypoint);
							this.SetUniqueAnimationFromWaypoint_Callback(this.currentMoveToWaypoint);
							this.endWithAnimation = false;
							flag = false;
						}
					}
					if (flag)
					{
						if (this.currentMoveToWaypoint.nextWaypoint != this.currentMoveToWaypoint)
						{
							this.currentMoveToWaypoint.SendWaypointReached();
							this.WaypointReached_Callback(this.currentMoveToWaypoint);
							if (this.SetNextWaypoint(this.currentMoveToWaypoint))
							{
								this.UpdateFollowWaypoint(controls, deltaTime, ref wantedPos);
								return;
							}
						}
						else if (num2 > num)
						{
							this.pointReached = false;
						}
						else
						{
							vector = Vector3.zero;
						}
					}
				}
			}
			controls.stick.x = vector.x;
			controls.stick.y = vector.z;
		}
		this.PostUpdateFollowWaypoint_Callback(controls, this.currentMoveToWaypoint);
		if (this.currentMoveToWaypoint != null)
		{
			this.currentMoveToWaypoint.customWaypointHandling_Callback(this.follower);
		}
	}

	// Token: 0x06000215 RID: 533 RVA: 0x0001A7E8 File Offset: 0x000189E8
	public virtual void Start()
	{
	}

	// Token: 0x040002F6 RID: 758
	private GameObject currentMoveToPoint;

	// Token: 0x040002F7 RID: 759
	private BaseWaypoint currentMoveToWaypoint;

	// Token: 0x040002F8 RID: 760
	private float continueCountdown;

	// Token: 0x040002F9 RID: 761
	private float startUpCountdown;

	// Token: 0x040002FA RID: 762
	public float currentTurnFraction = 1f;

	// Token: 0x040002FB RID: 763
	public float defaultStopDist = 2f;

	// Token: 0x040002FC RID: 764
	public bool endWithAnimation;

	// Token: 0x040002FD RID: 765
	public bool pointReached;

	// Token: 0x040002FE RID: 766
	public float stickDeadzone;

	// Token: 0x040002FF RID: 767
	private Transform follower;
}