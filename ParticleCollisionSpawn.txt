using System;
using UnityEngine;

// Token: 0x0200063B RID: 1595
public class ParticleCollisionSpawn : MonoBehaviour
{
	// Token: 0x06002782 RID: 10114 RVA: 0x0013DA98 File Offset: 0x0013BC98
	private void Start()
	{
		this.decalParent = new GameObject(base.gameObject.name + "_Decals");
		this.decalParent.transform.position = base.gameObject.transform.position;
		this.decalParent.transform.parent = base.gameObject.transform.parent;
		this.ps = base.GetComponent<ParticleSystem>();
	}

	// Token: 0x06002783 RID: 10115 RVA: 0x0013DB14 File Offset: 0x0013BD14
	private void OnParticleCollision(GameObject go)
	{
		int safeCollisionEventSize = ParticlePhysicsExtensions.GetSafeCollisionEventSize(this.ps);
		if (this.collisionEvents.Length < safeCollisionEventSize)
		{
			this.collisionEvents = new ParticleCollisionEvent[safeCollisionEventSize];
		}
		int num = ParticlePhysicsExtensions.GetCollisionEvents(this.ps, go, this.collisionEvents);
		for (int i = 0; i < num; i++)
		{
			Vector3 intersection = this.collisionEvents[i].intersection;
			Vector3 normal = this.collisionEvents[i].normal;
			Vector3 velocity = this.collisionEvents[i].velocity;
			float magnitude = velocity.magnitude;
			if (this.decal != null)
			{
				GameObject gameObject = Object.Instantiate(this.decal, intersection, Quaternion.identity) as GameObject;
				gameObject.transform.parent = this.decalParent.transform;
				gameObject.transform.LookAt(intersection + normal);
				if (this.rotateAlongVelocity)
				{
					Vector3 vector = intersection + velocity;
					vector = gameObject.transform.InverseTransformPoint(vector);
					vector.z = 0f;
					vector.Normalize();
					vector = gameObject.transform.TransformPoint(vector);
					gameObject.transform.LookAt(vector, normal);
				}
				if (this.randomStartRotation)
				{
					gameObject.transform.Rotate(new Vector3(0f, Mathf.Lerp(this.startRotation.x, this.startRotation.y, Random.Range(0f, 1f)), Mathf.Lerp(this.startRotation.z, this.startRotation.w, Random.Range(0f, 1f))));
				}
				else
				{
					gameObject.transform.Rotate(new Vector3(0f, this.startRotation.x, this.startRotation.z));
				}
				if (this.randomStartSize)
				{
					gameObject.transform.localScale = Vector3.Lerp(this.startSize1, this.startSize2, Random.Range(0f, 1f));
				}
				else
				{
					gameObject.transform.localScale = this.startSize1;
				}
				if (this.sizeByForce)
				{
					Vector3 vector2 = gameObject.transform.localScale;
					vector2 *= magnitude * this.sizeByForceMultiplier;
					gameObject.transform.localScale += vector2;
				}
				MaterialInstance component = gameObject.GetComponent<MaterialInstance>();
				if (component == null)
				{
					gameObject.AddComponent<MaterialInstance>();
					component = gameObject.GetComponent<MaterialInstance>();
				}
				MaterialInstance.ColorProperty colorProperty = component.GetColorProperty(this.materialColorName);
				if (this.randomMaterialStartColor)
				{
					component.SetColorProperty(colorProperty, Color.Lerp(this.materialStartColor1, this.materialStartColor2, Random.Range(0f, 1f)));
				}
				else if (colorProperty != null)
				{
					component.SetColorProperty(colorProperty, this.materialStartColor1);
				}
				MaterialInstance.FloatProperty floatProperty = component.GetFloatProperty(this.materialFloatName);
				if (this.randomMaterialStartFloat)
				{
					component.SetFloatProperty(floatProperty, Mathf.Lerp(this.materialStartFloat.x, this.materialStartFloat.y, Random.Range(0f, 1f)));
				}
				else if (floatProperty != null)
				{
					component.SetFloatProperty(floatProperty, this.materialStartFloat.x);
				}
			}
		}
	}

	// Token: 0x040046E9 RID: 18153
	public GameObject decal;

	// Token: 0x040046EA RID: 18154
	public bool rotateAlongVelocity = true;

	// Token: 0x040046EB RID: 18155
	public bool randomStartRotation = true;

	// Token: 0x040046EC RID: 18156
	public Vector4 startRotation = new Vector4(-30f, 0f, 30f, 0f);

	// Token: 0x040046ED RID: 18157
	public bool sizeByForce;

	// Token: 0x040046EE RID: 18158
	public bool randomStartSize = true;

	// Token: 0x040046EF RID: 18159
	public Vector3 startSize1 = new Vector3(1f, 1f, 1f);

	// Token: 0x040046F0 RID: 18160
	public Vector3 startSize2 = new Vector3(2f, 2f, 2f);

	// Token: 0x040046F1 RID: 18161
	public float sizeByForceMultiplier = 1f;

	// Token: 0x040046F2 RID: 18162
	public bool randomMaterialStartColor = true;

	// Token: 0x040046F3 RID: 18163
	public string materialColorName = "_Color";

	// Token: 0x040046F4 RID: 18164
	public Color materialStartColor1 = Color.white;

	// Token: 0x040046F5 RID: 18165
	public Color materialStartColor2 = Color.black;

	// Token: 0x040046F6 RID: 18166
	public bool randomMaterialStartFloat = true;

	// Token: 0x040046F7 RID: 18167
	public string materialFloatName = "_Tile";

	// Token: 0x040046F8 RID: 18168
	public Vector2 materialStartFloat = new Vector2(0f, 1f);

	// Token: 0x040046F9 RID: 18169
	public bool sizeOverLifetim;

	// Token: 0x040046FA RID: 18170
	public bool randomSizeOverLifetime = true;

	// Token: 0x040046FB RID: 18171
	public Vector3 sizeOverLifetime1;

	// Token: 0x040046FC RID: 18172
	public Vector3 sizeOverLifetime2;

	// Token: 0x040046FD RID: 18173
	private ParticleCollisionEvent[] collisionEvents = new ParticleCollisionEvent[256];

	// Token: 0x040046FE RID: 18174
	private GameObject decalParent;

	// Token: 0x040046FF RID: 18175
	private ParticleSystem ps;
}
