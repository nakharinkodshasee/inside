using System;
using UnityEngine;

// Token: 0x020004E0 RID: 1248
public class MinesTrackTilt : MonoBehaviour, IPreAwake
{
	// Token: 0x060020BF RID: 8383 RVA: 0x00114658 File Offset: 0x00112858
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(base.gameObject, this);
		this.audioChangeToRight = new AudioEventSimpleLocal("env_mines_albinosInMineWagon_tracks_changeToRight", akGameObj);
		this.audioStartRight = new AudioEventSimpleLocal("env_mines_albinosInMineWagon_tracks_startRight", akGameObj);
		this.audioFinishedRight = new AudioEventSimpleLocal("env_mines_albinosInMineWagon_tracks_finishedRight", akGameObj);
		this.audioChangeToLeft = new AudioEventSimpleLocal("env_mines_albinosInMineWagon_tracks_changeToLeft", akGameObj);
		this.audioStartLeft = new AudioEventSimpleLocal("env_mines_albinosInMineWagon_tracks_startLeft", akGameObj);
		this.audioFinishedLeft = new AudioEventSimpleLocal("env_mines_albinosInMineWagon_tracks_finishedLeft", akGameObj);
	}

	// Token: 0x060020C0 RID: 8384 RVA: 0x001146EC File Offset: 0x001128EC
	public bool PreAwake(int callcount)
	{
		this.rotateDown = SignalIn.Create("rotateDown", base.gameObject, new Action(this.OnRotateDown));
		this.rotateUp = SignalIn.Create("rotateUp", base.gameObject, new Action(this.OnRotateUp));
		return true;
	}

	// Token: 0x060020C1 RID: 8385 RVA: 0x00114740 File Offset: 0x00112940
	private void Start()
	{
		this.OnPreProcess();
		this.upRotation = this.trackRigidbody.rotation;
		this.downRotation = this.upRotation * Quaternion.Euler(0f, 0f, this.tiltAngle);
		this.SetIdleState();
	}

	// Token: 0x060020C2 RID: 8386 RVA: 0x00114790 File Offset: 0x00112990
	private void SetIdleState()
	{
		this.currentVelocity = 0f;
		this.state = MinesTrackTilt.State.Idle;
	}

	// Token: 0x060020C3 RID: 8387 RVA: 0x001147A4 File Offset: 0x001129A4
	private void IdleState()
	{
	}

	// Token: 0x060020C4 RID: 8388 RVA: 0x001147A8 File Offset: 0x001129A8
	private void SetRotateUpState()
	{
		if (this.state == MinesTrackTilt.State.RotateDown)
		{
			this.audioChangeToRight.PostFast();
		}
		else
		{
			this.audioStartRight.PostFast();
		}
		this.state = MinesTrackTilt.State.RotateUp;
	}

	// Token: 0x060020C5 RID: 8389 RVA: 0x001147E8 File Offset: 0x001129E8
	private void RotateUpState()
	{
		float num = this.Rotate(1f);
		if (num <= 0f)
		{
			this.audioFinishedRight.PostFast();
			this.SetIdleState();
		}
	}

	// Token: 0x060020C6 RID: 8390 RVA: 0x00114820 File Offset: 0x00112A20
	private void SetRotateDownState()
	{
		if (this.state == MinesTrackTilt.State.RotateUp)
		{
			this.audioChangeToLeft.PostFast();
		}
		else
		{
			this.audioStartLeft.PostFast();
		}
		this.state = MinesTrackTilt.State.RotateDown;
	}

	// Token: 0x060020C7 RID: 8391 RVA: 0x00114860 File Offset: 0x00112A60
	private void RotateDownState()
	{
		float num = this.Rotate(-1f);
		if (num <= 0f)
		{
			this.audioFinishedLeft.PostFast();
			this.SetIdleState();
		}
	}

	// Token: 0x060020C8 RID: 8392 RVA: 0x00114898 File Offset: 0x00112A98
	private void FixedUpdate()
	{
		switch (this.state)
		{
		case MinesTrackTilt.State.Idle:
			this.IdleState();
			break;
		case MinesTrackTilt.State.RotateUp:
			this.RotateUpState();
			break;
		case MinesTrackTilt.State.RotateDown:
			this.RotateDownState();
			break;
		}
	}

	// Token: 0x060020C9 RID: 8393 RVA: 0x001148E8 File Offset: 0x00112AE8
	private float Rotate(float dir)
	{
		this.currentVelocity += (this.maxVelocity * dir - this.currentVelocity) * Time.deltaTime * this.acceleration;
		if (Mathf.Abs(this.currentVelocity) > this.maxVelocity)
		{
			this.currentVelocity = this.maxVelocity * dir;
		}
		Quaternion quaternion = (Mathf.Sign(this.currentVelocity) != 1f) ? this.downRotation : this.upRotation;
		Quaternion quaternion2 = Quaternion.RotateTowards(this.trackRigidbody.rotation, quaternion, Mathf.Abs(this.currentVelocity) * Time.deltaTime);
		this.trackRigidbody.GetComponent<Rigidbody>().MoveRotation(quaternion2);
		return Quaternion.Angle(this.trackRigidbody.rotation, (Mathf.Sign(dir) != 1f) ? this.downRotation : this.upRotation);
	}

	// Token: 0x060020CA RID: 8394 RVA: 0x001149D0 File Offset: 0x00112BD0
	private void OnRotateUp()
	{
		this.SetRotateUpState();
	}

	// Token: 0x060020CB RID: 8395 RVA: 0x001149D8 File Offset: 0x00112BD8
	private void OnRotateDown()
	{
		this.SetRotateDownState();
	}

	// Token: 0x04003CDB RID: 15579
	public Rigidbody trackRigidbody;

	// Token: 0x04003CDC RID: 15580
	public float tiltAngle = 24f;

	// Token: 0x04003CDD RID: 15581
	public float maxVelocity = 14f;

	// Token: 0x04003CDE RID: 15582
	public float acceleration = 4f;

	// Token: 0x04003CDF RID: 15583
	private SignalIn rotateUp;

	// Token: 0x04003CE0 RID: 15584
	private SignalIn rotateDown;

	// Token: 0x04003CE1 RID: 15585
	private MinesTrackTilt.State state;

	// Token: 0x04003CE2 RID: 15586
	private Quaternion upRotation;

	// Token: 0x04003CE3 RID: 15587
	private Quaternion downRotation;

	// Token: 0x04003CE4 RID: 15588
	private float currentVelocity;

	// Token: 0x04003CE5 RID: 15589
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioChangeToRight;

	// Token: 0x04003CE6 RID: 15590
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioStartRight;

	// Token: 0x04003CE7 RID: 15591
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioFinishedRight;

	// Token: 0x04003CE8 RID: 15592
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioChangeToLeft;

	// Token: 0x04003CE9 RID: 15593
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioStartLeft;

	// Token: 0x04003CEA RID: 15594
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioFinishedLeft;

	// Token: 0x04003CEB RID: 15595
	[HideInInspector]
	[SerializeField]
	private bool preProcessed;

	// Token: 0x020004E1 RID: 1249
	private enum State
	{
		// Token: 0x04003CED RID: 15597
		None,
		// Token: 0x04003CEE RID: 15598
		Idle,
		// Token: 0x04003CEF RID: 15599
		RotateUp,
		// Token: 0x04003CF0 RID: 15600
		RotateDown
	}
}
