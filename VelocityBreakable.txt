using System;
using UnityEngine;

// Token: 0x02000263 RID: 611
public class VelocityBreakable : MonoBehaviour, IPreAwake
{
	// Token: 0x060012BF RID: 4799 RVA: 0x000B0304 File Offset: 0x000AE504
	public bool PreAwake(int callcount)
	{
		this.impact = SignalOut.Create("impact", base.gameObject);
		this.isBroken = SignalOut.Create("isBroken", base.gameObject);
		this.huddleBreak = SignalOut.Create("huddleBreak", base.gameObject);
		this.doBreak = SignalIn.Create("doBreak", base.gameObject, new Action(this.OnDoBreak));
		this.repair = SignalIn.Create("repair", base.gameObject, new Action(this.OnRepair));
		return true;
	}

	// Token: 0x060012C0 RID: 4800 RVA: 0x000B0398 File Offset: 0x000AE598
	private void Start()
	{
		if (this.useBoy)
		{
			this.boy = ScriptGlobals.boy;
		}
		if (this.specificBoy)
		{
			this.boy = this.specificBoy.GetComponentInChildren<Boy>();
		}
		if (this.useCompanion != CompanionType.none)
		{
			CompanionManager instance = SingletonBehaviour<CompanionManager>.instance;
			if (instance)
			{
				Companion companion = instance.GetCompanion(this.useCompanion);
				if (companion)
				{
					this.companionRigidbody = companion.GetComponent<Rigidbody>();
				}
			}
		}
	}

	// Token: 0x060012C1 RID: 4801 RVA: 0x000B041C File Offset: 0x000AE61C
	private void OnDoBreak()
	{
		if (this.broken)
		{
			return;
		}
		this.Break();
	}

	// Token: 0x060012C2 RID: 4802 RVA: 0x000B0430 File Offset: 0x000AE630
	private void Break()
	{
		this.breakCount++;
		this.validImpact.OnEvent(this);
		this.impact.Signal();
		if (this.halfSpeedOnBody)
		{
			if (this.companionRigidbody)
			{
				this.companionRigidbody.velocity = this.companionRigidbody.velocity * 0.75f;
			}
			else if (this.objectUsedToBreak.GetComponent<Collider>().attachedRigidbody)
			{
				this.objectUsedToBreak.GetComponent<Collider>().attachedRigidbody.velocity = this.objectUsedToBreak.GetComponent<Collider>().attachedRigidbody.velocity * 0.75f;
			}
		}
		if (this.breakableObject != null)
		{
			this.breakableObject.SetActive(false);
		}
		if (this.breakCount == this.numberOfBreaks)
		{
			if (this.rumbleOnBreak)
			{
				RumbleManager.instance.AddOneTimeEffect(this.rumbleEffect, this.rumbleForce, this.rumbleTime, 0, this.rumbleDelay);
			}
			this.brokenEvent.OnEvent(this);
			this.isBroken.Signal();
			if (this.useHuddle)
			{
				this.huddleBreak.Signal();
			}
			this.broken = true;
		}
	}

	// Token: 0x060012C3 RID: 4803 RVA: 0x000B0580 File Offset: 0x000AE780
	private void FixedUpdate()
	{
		if (this.useCompanion == CompanionType.sewerSubmarine && this.sub == null)
		{
			this.sub = SingletonBehaviour<CompanionManager>.instance.GetCompanion(CompanionType.sewerSubmarine).gameObject.GetComponent<Submarine>();
		}
	}

	// Token: 0x060012C4 RID: 4804 RVA: 0x000B05C8 File Offset: 0x000AE7C8
	private void OnRepair()
	{
		this.broken = false;
		this.breakCount = 0;
	}

	// Token: 0x060012C5 RID: 4805 RVA: 0x000B05D8 File Offset: 0x000AE7D8
	private void OnTriggerEnter(Collider collider)
	{
		if (this.broken)
		{
			return;
		}
		Vector3 vector = Vector3.zero;
		bool flag = false;
		if (this.objectUsedToBreak && this.objectUsedToBreak.activeSelf && collider == this.objectUsedToBreak.GetComponent<Collider>())
		{
			flag = true;
			vector = this.objectUsedToBreak.GetComponent<Collider>().attachedRigidbody.velocity;
		}
		else if (this.rigidbodyUsedToBreak && this.rigidbodyUsedToBreak.gameObject.activeSelf && collider.attachedRigidbody == this.rigidbodyUsedToBreak)
		{
			flag = true;
			vector = this.rigidbodyUsedToBreak.velocity;
		}
		else if (this.useHuddle && collider.GetComponent<HuddleProbe>())
		{
			flag = true;
			vector = ScriptGlobals.huddle.velocity3;
		}
		else
		{
			Rigidbody attachedRigidbody = collider.attachedRigidbody;
			if (attachedRigidbody)
			{
				if (this.useCompanion != CompanionType.none && attachedRigidbody == this.companionRigidbody && !collider.isTrigger)
				{
					flag = true;
					vector = this.companionRigidbody.velocity;
					if (this.useCompanion == CompanionType.sewerSubmarine)
					{
						SubmarineChargeBoost submarineChargeBoost = this.sub.booster as SubmarineChargeBoost;
						float boostTimer = submarineChargeBoost.GetBoostTimer();
						if (boostTimer > this.maximumSubmarineBoostTime)
						{
							flag = false;
						}
					}
				}
				else if (this.useBoy && attachedRigidbody.GetComponent<Boy>() == this.boy)
				{
					flag = true;
					vector = this.boy.velocity3;
				}
				else if (this.specificBoy != null && attachedRigidbody.GetComponent<Boy>() == this.specificBoy)
				{
					flag = true;
					vector = this.specificBoy.velocity3;
				}
			}
		}
		if (flag)
		{
			if (this.useXSpeed && Mathf.Abs(vector.x) > this.xSpeedRequired)
			{
				this.Break();
			}
			if (this.useYSpeed && Mathf.Abs(vector.y) > this.ySpeedRequired)
			{
				this.Break();
			}
		}
	}

	// Token: 0x0400228F RID: 8847
	public GameObject objectUsedToBreak;

	// Token: 0x04002290 RID: 8848
	public Rigidbody rigidbodyUsedToBreak;

	// Token: 0x04002291 RID: 8849
	public CompanionType useCompanion;

	// Token: 0x04002292 RID: 8850
	public bool useHuddle;

	// Token: 0x04002293 RID: 8851
	public bool useBoy;

	// Token: 0x04002294 RID: 8852
	public Boy specificBoy;

	// Token: 0x04002295 RID: 8853
	public GameObject breakableObject;

	// Token: 0x04002296 RID: 8854
	public bool useXSpeed = true;

	// Token: 0x04002297 RID: 8855
	public float xSpeedRequired;

	// Token: 0x04002298 RID: 8856
	public bool useYSpeed = true;

	// Token: 0x04002299 RID: 8857
	public float ySpeedRequired;

	// Token: 0x0400229A RID: 8858
	public int numberOfBreaks = 1;

	// Token: 0x0400229B RID: 8859
	public bool halfSpeedOnBody;

	// Token: 0x0400229C RID: 8860
	public bool rumbleOnBreak = true;

	// Token: 0x0400229D RID: 8861
	public float rumbleForce = 0.6f;

	// Token: 0x0400229E RID: 8862
	public float rumbleTime = 0.3f;

	// Token: 0x0400229F RID: 8863
	public float rumbleDelay = 0.15f;

	// Token: 0x040022A0 RID: 8864
	public RumbleEffect.RumbleEffects rumbleEffect;

	// Token: 0x040022A1 RID: 8865
	public float maximumSubmarineBoostTime = 1.4f;

	// Token: 0x040022A2 RID: 8866
	private SimpleEvent<VelocityBreakable> validImpact = new SimpleEvent<VelocityBreakable>("validImpact");

	// Token: 0x040022A3 RID: 8867
	private SimpleEvent<VelocityBreakable> brokenEvent = new SimpleEvent<VelocityBreakable>("broken");

	// Token: 0x040022A4 RID: 8868
	private SignalOut impact;

	// Token: 0x040022A5 RID: 8869
	private SignalOut isBroken;

	// Token: 0x040022A6 RID: 8870
	private SignalOut huddleBreak;

	// Token: 0x040022A7 RID: 8871
	private SignalIn doBreak;

	// Token: 0x040022A8 RID: 8872
	private SignalIn repair;

	// Token: 0x040022A9 RID: 8873
	private Boy boy;

	// Token: 0x040022AA RID: 8874
	private int breakCount;

	// Token: 0x040022AB RID: 8875
	private bool broken;

	// Token: 0x040022AC RID: 8876
	private Rigidbody companionRigidbody;

	// Token: 0x040022AD RID: 8877
	private float timeSinceLastSubmarineBoost;

	// Token: 0x040022AE RID: 8878
	private Submarine sub;
}
