using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000653 RID: 1619
public class tkHuddlePullOffTest : MonoBehaviour, IPreAwake
{
	// Token: 0x060027E8 RID: 10216 RVA: 0x00141208 File Offset: 0x0013F408
	public bool PreAwake(int callcount)
	{
		this.pulledOff = SignalOut.Create("pulledOff", base.gameObject);
		return true;
	}

	// Token: 0x060027E9 RID: 10217 RVA: 0x00141224 File Offset: 0x0013F424
	private void Start()
	{
		if (this.waterSuck)
		{
			this.prePulls = 0;
		}
		if (this.animationToPlay != null)
		{
			this.animState = this.animationToPlay.GetComponent<Animation>()[this.animationToPlay.clip.name];
			float speed = this.animState.speed;
			this.animState.speed = 0f;
		}
	}

	// Token: 0x060027EA RID: 10218 RVA: 0x00141298 File Offset: 0x0013F498
	private float GetWantedSpeed(bool pulling)
	{
		float speed = this.animState.speed;
		float num = 1f;
		if (!pulling)
		{
			float normalizedTime = this.animState.normalizedTime;
			float num2 = 0f;
			bool flag = false;
			if (normalizedTime < 0.05f)
			{
				flag = true;
			}
			int i = 0;
			int count = this.animRestPoints.Count;
			while (i < count)
			{
				float num3 = this.animRestPoints[i];
				if (Mathf.Abs(num3 - normalizedTime) < 0.05f)
				{
					num2 = num3;
					flag = true;
				}
				i++;
			}
			if (flag)
			{
				num = Mathf.Clamp((num2 - normalizedTime) * 20f, -1f, 1f);
			}
			return speed + (num - speed) * Time.deltaTime * 8f;
		}
		return speed + (num - speed) * Time.deltaTime * 8f;
	}

	// Token: 0x060027EB RID: 10219 RVA: 0x00141370 File Offset: 0x0013F570
	private void TestPullOff(float sgn, float speed, HuddleGrabState grabState)
	{
		if (this.pulls > this.prePulls)
		{
			if (this.animationToPlay != null)
			{
				this.animationToPlay.Stop();
			}
			HuddleGrab component = base.GetComponent<HuddleGrab>();
			if (component != null)
			{
				this.pulledOff.Signal();
				component.mode = this.afterPullMode;
				component.GetComponent<Rigidbody>().isKinematic = false;
				Vector3 velocity = component.GetComponent<Rigidbody>().velocity;
				bool enabled = false;
				if (this.waterSuck)
				{
					component.enabled = false;
					ScriptGlobals.huddle.grabState.DropGrabBody(0.3f);
					HuddleNoGrab component2 = base.GetComponent<HuddleNoGrab>();
					if (component2 != null)
					{
						component2.isEnabled = true;
					}
					HuddleGrabBody component3 = base.GetComponent<HuddleGrabBody>();
					if (component3 != null)
					{
						component3.enabled = false;
					}
					Vector3 vector;
					vector..ctor(-sgn, 0f, -2f);
					velocity = vector.normalized * 4f;
					component.GetComponent<Rigidbody>().angularVelocity = new Vector3(1.6f, -2.7f, 0.9f);
					if (this.suckPoint != null)
					{
						this.orgStrength = ScriptGlobals.huddle.cloth.skinning.strength;
						this.pullMode = tkHuddlePullOffTest.PullMode.Sucking;
						enabled = true;
						HuddleUtils.SpawnFallState(ScriptGlobals.huddle, 0f, this.suckStunTime);
						HuddleRagdollState huddleRagdollState = ScriptGlobals.huddle.state as HuddleRagdollState;
						if (huddleRagdollState != null)
						{
							huddleRagdollState.SetAllowForceToSwim(false);
						}
						this.suckStartTime = -0.5f;
					}
				}
				else
				{
					velocity.x = -this.mSpeed * sgn;
				}
				component.GetComponent<Rigidbody>().velocity = velocity;
				grabState.RefreshGrab();
				base.enabled = enabled;
			}
		}
	}

	// Token: 0x060027EC RID: 10220 RVA: 0x00141534 File Offset: 0x0013F734
	private void UpdateSucking()
	{
		Huddle huddle = ScriptGlobals.huddle;
		HuddleCloth.ClothBone[] bones = huddle.cloth.bones;
		if (this.loosenUp && this.fullTime < this.suckStunTime - 1f)
		{
			float num = huddle.cloth.skinning.strength;
			num += (20f - num) * Time.deltaTime * 3f;
			huddle.cloth.skinning.strength = num;
			this.loosenFactor = Mathf.Min(this.loosenFactor + Time.deltaTime * 0.5f, 1f);
		}
		else
		{
			huddle.cloth.skinning.strength = this.orgStrength * (1f - this.loosenFactor) + 20f * this.loosenFactor;
			this.loosenFactor = Mathf.Max(this.loosenFactor - Time.deltaTime * 0.5f, 0f);
		}
		bool flag = false;
		this.suckStartTime = Mathf.Min(this.suckStartTime + huddle.dt, 1f);
		this.fullTime += huddle.dt;
		if (this.suckStartTime > 0f)
		{
			int i = 0;
			int num2 = bones.Length;
			while (i < num2)
			{
				Rigidbody body = bones[i].body;
				Vector3 velocity = body.velocity;
				Vector3 vector = this.suckPoint.transform.InverseTransformPoint(body.position);
				Vector3 vector2 = this.suckPoint.transform.forward;
				float num3 = this.poolSuckSpeed;
				if (vector.z < 0f)
				{
					this.loosenUp = true;
					vector2 = (this.suckPoint.transform.position - body.position).normalized;
				}
				else
				{
					num3 = Mathf.Max(this.hatchSuckSpeed - vector.z * this.hatchSuckSpeed / this.outsideHatchDistance, 0f);
					if (vector.z > this.outsideHatchDistance - 0.4f)
					{
						flag = true;
					}
				}
				vector2 *= num3;
				if (this.fullTime > this.suckStunTime)
				{
					vector2 = Vector3.zero;
				}
				Vector3 vector3 = body.position - huddle.pos3;
				vector3.y = 0f;
				vector3.z = 0f;
				vector3.x = Mathf.Clamp(vector3.x, -2f, 2f);
				vector2 += vector3 * 5f * this.loosenFactor;
				Vector3 vector4 = vector2 - velocity;
				body.AddForce(vector4 * huddle.dt * this.suckStrictness * this.suckStartTime, 2);
				i++;
			}
		}
		if (flag && this.fullTime > this.suckStunTime && this.loosenFactor == 0f)
		{
			base.enabled = false;
		}
	}

	// Token: 0x060027ED RID: 10221 RVA: 0x00141844 File Offset: 0x0013FA44
	private void FixedUpdate()
	{
		if (!ScriptGlobals.huddleActive)
		{
			return;
		}
		if (this.pullMode == tkHuddlePullOffTest.PullMode.Sucking)
		{
			this.UpdateSucking();
			return;
		}
		Huddle huddle = ScriptGlobals.huddle;
		HuddleGrabState grabState = huddle.grabState;
		HuddleGrabPullOff huddleGrabPullOff = grabState.state as HuddleGrabPullOff;
		if ((huddleGrabPullOff == null || grabState.body != base.GetComponent<Rigidbody>()) && this.mSpeed <= 0f)
		{
			if (this.animState != null)
			{
				this.animState.speed = this.GetWantedSpeed(false);
				if (this.animState.normalizedTime >= 1f)
				{
					this.pulls = 100;
					this.TestPullOff(-Mathf.Sign(base.transform.right.x), 2f, grabState);
				}
			}
			return;
		}
		Rigidbody component = base.GetComponent<Rigidbody>();
		float fixedDeltaTime = Time.fixedDeltaTime;
		float num = (huddle.pos.x >= component.position.x) ? -1f : 1f;
		float num2 = 0.15f;
		float num3 = 2f;
		bool flag = num3 < this.mGrabTimeElapsed || this.mSpeed > 0f;
		bool pulling = false;
		if (huddleGrabPullOff != null && !flag)
		{
			float num4 = -huddle.velocity.x * num;
			if (num4 > this.maxPullVel)
			{
				this.maxPullVel = num4;
			}
			float num5 = 0.8f;
			if (huddle.isSwimming)
			{
				num5 = 1.5f;
			}
			bool flag2 = (huddleGrabPullOff.GetIsArmStretched() || huddle.isSwimming) && Mathf.Abs(huddle.velocity.x) < num5;
			if (huddle.grabState.body == component)
			{
				if (flag2 && huddle.input.looseDir.x * num < -0.5f)
				{
					pulling = true;
					if (this.animState != null)
					{
						this.animState.speed = 1f;
					}
					else
					{
						this.mGrabTimeElapsed += fixedDeltaTime;
						if (!flag)
						{
							this.mGrabTimeElapsed += Mathf.Max(0f, this.maxPullVel - 1f) * 0.1f;
							if (this.mGrabTimeElapsed > num3)
							{
								this.pulls++;
							}
						}
					}
					this.maxPullVel = 0f;
				}
				else if (!huddle.isSwimming)
				{
					this.mGrabTimeElapsed = Mathf.Min(this.mGrabTimeElapsed, num3 - 0.4f);
				}
			}
			else
			{
				this.mGrabTimeElapsed = 0f;
				this.mSpeed = 0f;
			}
		}
		if (this.animState != null)
		{
			this.animState.speed = this.GetWantedSpeed(pulling);
			this.pulls = 100;
			if (this.animState.normalizedTime >= 1f)
			{
				this.TestPullOff(num, 2f, grabState);
			}
		}
		if (flag)
		{
			this.mGrabTimeElapsed += fixedDeltaTime;
			if (this.mGrabTimeElapsed < num3 + num2)
			{
				this.mSpeed += 40f * fixedDeltaTime;
			}
			else
			{
				this.mSpeed -= 40f * fixedDeltaTime;
				this.TestPullOff(num, this.mSpeed, grabState);
			}
			if (0f < this.mSpeed)
			{
				Vector3 position = component.position;
				position.x -= num * this.mSpeed * fixedDeltaTime;
				component.MovePosition(position);
			}
			else
			{
				this.mGrabTimeElapsed = 0f;
			}
		}
	}

	// Token: 0x04004780 RID: 18304
	public bool waterSuck;

	// Token: 0x04004781 RID: 18305
	public GameObject suckPoint;

	// Token: 0x04004782 RID: 18306
	public float suckStunTime = 7f;

	// Token: 0x04004783 RID: 18307
	public float poolSuckSpeed = 10f;

	// Token: 0x04004784 RID: 18308
	public float hatchSuckSpeed = 18f;

	// Token: 0x04004785 RID: 18309
	public float outsideHatchDistance = 3.3f;

	// Token: 0x04004786 RID: 18310
	public float suckStrictness = 5f;

	// Token: 0x04004787 RID: 18311
	public HuddleGrab.Mode afterPullMode = HuddleGrab.Mode.Item;

	// Token: 0x04004788 RID: 18312
	public Animation animationToPlay;

	// Token: 0x04004789 RID: 18313
	public List<float> animRestPoints;

	// Token: 0x0400478A RID: 18314
	private AnimationState animState;

	// Token: 0x0400478B RID: 18315
	private float mGrabTimeElapsed;

	// Token: 0x0400478C RID: 18316
	private float mSpeed;

	// Token: 0x0400478D RID: 18317
	private float orgStrength;

	// Token: 0x0400478E RID: 18318
	private float maxPullVel;

	// Token: 0x0400478F RID: 18319
	private int prePulls = 1;

	// Token: 0x04004790 RID: 18320
	private int pulls;

	// Token: 0x04004791 RID: 18321
	private SignalOut pulledOff;

	// Token: 0x04004792 RID: 18322
	private tkHuddlePullOffTest.PullMode pullMode;

	// Token: 0x04004793 RID: 18323
	private float suckStartTime;

	// Token: 0x04004794 RID: 18324
	private float fullTime;

	// Token: 0x04004795 RID: 18325
	private bool loosenUp;

	// Token: 0x04004796 RID: 18326
	private float loosenFactor;

	// Token: 0x02000654 RID: 1620
	private enum PullMode
	{
		// Token: 0x04004798 RID: 18328
		Pulling,
		// Token: 0x04004799 RID: 18329
		Sucking
	}
}
