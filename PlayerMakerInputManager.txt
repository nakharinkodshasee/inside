using System;
using System.Collections.Generic;
using HutongGames.PlayMaker.Actions;
using UnityEngine;

// Token: 0x020000CD RID: 205
public class PlayerMakerInputManager : BoyInput, IPreAwake
{
	// Token: 0x17000023 RID: 35
	// (get) Token: 0x06000661 RID: 1633 RVA: 0x00048BE4 File Offset: 0x00046DE4
	public override bool jump
	{
		get
		{
			bool result = false;
			int num = int.MinValue;
			foreach (BoyInputCommand boyInputCommand in this.activeCommands)
			{
				if (boyInputCommand.priority.Value > num && (boyInputCommand.GetJump() || boyInputCommand.insistOverride.Value))
				{
					result = boyInputCommand.GetJump();
					num = boyInputCommand.priority.Value;
				}
			}
			return result;
		}
	}

	// Token: 0x17000024 RID: 36
	// (get) Token: 0x06000662 RID: 1634 RVA: 0x00048C8C File Offset: 0x00046E8C
	public override bool rawAction
	{
		get
		{
			return this.action;
		}
	}

	// Token: 0x17000025 RID: 37
	// (get) Token: 0x06000663 RID: 1635 RVA: 0x00048C94 File Offset: 0x00046E94
	public override bool action
	{
		get
		{
			bool result = false;
			int num = int.MinValue;
			foreach (BoyInputCommand boyInputCommand in this.activeCommands)
			{
				if (boyInputCommand.priority.Value > num && (boyInputCommand.GetAction() || boyInputCommand.insistOverride.Value))
				{
					result = boyInputCommand.GetAction();
					num = boyInputCommand.priority.Value;
				}
			}
			return result;
		}
	}

	// Token: 0x17000026 RID: 38
	// (get) Token: 0x06000664 RID: 1636 RVA: 0x00048D3C File Offset: 0x00046F3C
	public override bool grab
	{
		get
		{
			bool result = false;
			int num = int.MinValue;
			foreach (BoyInputCommand boyInputCommand in this.activeCommands)
			{
				if (boyInputCommand.priority.Value > num && (boyInputCommand.GetGrab() || boyInputCommand.insistOverride.Value))
				{
					result = boyInputCommand.GetGrab();
					num = boyInputCommand.priority.Value;
				}
			}
			return result;
		}
	}

	// Token: 0x17000027 RID: 39
	// (get) Token: 0x06000665 RID: 1637 RVA: 0x00048DE4 File Offset: 0x00046FE4
	public override vector2f stick
	{
		get
		{
			Vector2 vector = Vector2.zero;
			int num = int.MinValue;
			for (int i = 0; i < this.activeCommands.Count; i++)
			{
				BoyInputCommand boyInputCommand = this.activeCommands[i];
				if (boyInputCommand.priority.Value > num && (boyInputCommand.GetStick() != Vector2.zero || boyInputCommand.insistOverride.Value))
				{
					vector = boyInputCommand.GetStick();
					num = boyInputCommand.priority.Value;
				}
			}
			return new vector2f(vector.x, vector.y);
		}
	}

	// Token: 0x06000666 RID: 1638 RVA: 0x00048E84 File Offset: 0x00047084
	public void AddInputCommand(BoyInputCommand cmd)
	{
		this.activeCommands.Add(cmd);
	}

	// Token: 0x06000667 RID: 1639 RVA: 0x00048E94 File Offset: 0x00047094
	public void RemoveInputCommand(BoyInputCommand cmd)
	{
		this.activeCommands.Remove(cmd);
	}

	// Token: 0x06000668 RID: 1640 RVA: 0x00048EA4 File Offset: 0x000470A4
	private void StartControl()
	{
		this.previousBoyInput = base.GetComponent<Boy>().input;
		base.GetComponent<Boy>().input = this;
	}

	// Token: 0x06000669 RID: 1641 RVA: 0x00048ED0 File Offset: 0x000470D0
	private void ReleaseControl()
	{
		if (base.GetComponent<Boy>().input == this)
		{
			base.GetComponent<Boy>().input = this.previousBoyInput;
		}
	}

	// Token: 0x0600066A RID: 1642 RVA: 0x00048F04 File Offset: 0x00047104
	public bool PreAwake(int callcount)
	{
		this.startInputManagerControl = SignalIn.Create("startInputManagerControl", base.gameObject, new Action(this.StartControl));
		this.releaseInputManagerControl = SignalIn.Create("releaseInputManagerControl", base.gameObject, new Action(this.ReleaseControl));
		return true;
	}

	// Token: 0x0600066B RID: 1643 RVA: 0x00048F58 File Offset: 0x00047158
	private void Start()
	{
		base.GetComponent<Boy>().input = this;
	}

	// Token: 0x0600066C RID: 1644 RVA: 0x00048F68 File Offset: 0x00047168
	private void Update()
	{
	}

	// Token: 0x04000AE6 RID: 2790
	private SignalIn startInputManagerControl;

	// Token: 0x04000AE7 RID: 2791
	private SignalIn releaseInputManagerControl;

	// Token: 0x04000AE8 RID: 2792
	private List<BoyInputCommand> activeCommands = new List<BoyInputCommand>();

	// Token: 0x04000AE9 RID: 2793
	private BoyInput previousBoyInput;
}