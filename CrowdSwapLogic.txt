using System;
using UnityEngine;

// Token: 0x02000077 RID: 119
public class CrowdSwapLogic : MonoBehaviour, IFastEventExListener<Collider>, IPreAwake
{
	// Token: 0x060003E1 RID: 993 RVA: 0x0002A2D8 File Offset: 0x000284D8
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		int i = 0;
		int num = this.defaultActivate.Length;
		while (i < num)
		{
			this.defaultActivate[i].SetActive(true);
			i++;
		}
		int j = 0;
		int num2 = this.defaultDeactivate.Length;
		while (j < num2)
		{
			this.defaultDeactivate[j].SetActive(false);
			j++;
		}
	}

	// Token: 0x060003E2 RID: 994 RVA: 0x0002A34C File Offset: 0x0002854C
	public bool PreAwake(int callcount)
	{
		this.huddleActivated = SignalIn.Create("huddleActivated", base.gameObject, new Action(this.SetHuddleState));
		this.OnPreProcess();
		return true;
	}

	// Token: 0x060003E3 RID: 995 RVA: 0x0002A378 File Offset: 0x00028578
	private void Awake()
	{
		this.insideTrigger.enterTrigger.Register(this, ref this.triggerEnterHandle);
	}

	// Token: 0x060003E4 RID: 996 RVA: 0x0002A394 File Offset: 0x00028594
	private void SetInsideState()
	{
		this.count = 0;
		this.state = CrowdSwapLogic.State.Inside;
	}

	// Token: 0x060003E5 RID: 997 RVA: 0x0002A3A4 File Offset: 0x000285A4
	private void InsideState()
	{
		if (this.count < this.insideActivate.Length)
		{
			this.insideActivate[this.count].SetActive(true);
			this.count++;
			return;
		}
		int num = this.count - this.insideActivate.Length;
		if (num < this.insideDeactivate.Length)
		{
			this.insideDeactivate[num].SetActive(false);
			this.count++;
		}
		else
		{
			this.state = CrowdSwapLogic.State.None;
		}
	}

	// Token: 0x060003E6 RID: 998 RVA: 0x0002A42C File Offset: 0x0002862C
	private void SetHuddleState()
	{
		this.count = 0;
		this.state = CrowdSwapLogic.State.Huddle;
	}

	// Token: 0x060003E7 RID: 999 RVA: 0x0002A43C File Offset: 0x0002863C
	private void HuddleState()
	{
		if (this.count < this.huddleActivate.Length)
		{
			this.huddleActivate[this.count].SetActive(true);
			this.count++;
			return;
		}
		int num = this.count - this.huddleActivate.Length;
		if (num < this.huddleDeactivate.Length)
		{
			this.huddleDeactivate[num].SetActive(false);
			this.count++;
		}
		else
		{
			this.state = CrowdSwapLogic.State.None;
		}
	}

	// Token: 0x060003E8 RID: 1000 RVA: 0x0002A4C4 File Offset: 0x000286C4
	private void Update()
	{
		if (this.state == CrowdSwapLogic.State.Inside)
		{
			this.InsideState();
		}
		else if (this.state == CrowdSwapLogic.State.Huddle)
		{
			this.HuddleState();
		}
	}

	// Token: 0x060003E9 RID: 1001 RVA: 0x0002A4F0 File Offset: 0x000286F0
	public void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component)
		{
			this.SetInsideState();
		}
	}

	// Token: 0x04000646 RID: 1606
	public GameObject[] defaultDeactivate;

	// Token: 0x04000647 RID: 1607
	public GameObject[] defaultActivate;

	// Token: 0x04000648 RID: 1608
	public GameObject[] insideDeactivate;

	// Token: 0x04000649 RID: 1609
	public GameObject[] insideActivate;

	// Token: 0x0400064A RID: 1610
	public GameObject[] huddleDeactivate;

	// Token: 0x0400064B RID: 1611
	public GameObject[] huddleActivate;

	// Token: 0x0400064C RID: 1612
	public CollisionEvents insideTrigger;

	// Token: 0x0400064D RID: 1613
	private SignalIn huddleActivated;

	// Token: 0x0400064E RID: 1614
	private int triggerEnterHandle = -1;

	// Token: 0x0400064F RID: 1615
	private CrowdSwapLogic.State state;

	// Token: 0x04000650 RID: 1616
	private int count;

	// Token: 0x04000651 RID: 1617
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x02000078 RID: 120
	private enum State
	{
		// Token: 0x04000653 RID: 1619
		None,
		// Token: 0x04000654 RID: 1620
		Inside,
		// Token: 0x04000655 RID: 1621
		Huddle
	}
}
