using System;
using UnityEngine;

// Token: 0x02000151 RID: 337
public class BoyFSMEvents : MonoBehaviour, IPreAwake
{
	// Token: 0x1700002C RID: 44
	// (get) Token: 0x06000A0D RID: 2573 RVA: 0x000643EC File Offset: 0x000625EC
	private Boy boy
	{
		get
		{
			return (!this.targetBoy) ? ScriptGlobals.boy : this.cachedTarget;
		}
	}

	// Token: 0x06000A0E RID: 2574 RVA: 0x0006441C File Offset: 0x0006261C
	public void OnActivate()
	{
		this.isActive = true;
	}

	// Token: 0x06000A0F RID: 2575 RVA: 0x00064428 File Offset: 0x00062628
	public void OnDectivate()
	{
		this.isActive = false;
	}

	// Token: 0x06000A10 RID: 2576 RVA: 0x00064434 File Offset: 0x00062634
	public bool PreAwake(int callcount)
	{
		this.doActivate = SignalIn.Create("doActivate", base.gameObject, delegate
		{
			this.isActive = true;
		});
		this.doDeactivate = SignalIn.Create("doDeactivate", base.gameObject, delegate
		{
			this.isActive = false;
		});
		return true;
	}

	// Token: 0x06000A11 RID: 2577 RVA: 0x00064488 File Offset: 0x00062688
	private void Start()
	{
		if (this.startDeactivated)
		{
			this.isActive = false;
		}
		else
		{
			this.isActive = true;
		}
		if (this.targetBoy)
		{
			this.cachedTarget = this.targetBoy.GetComponent<Boy>();
		}
	}

	// Token: 0x06000A12 RID: 2578 RVA: 0x000644D4 File Offset: 0x000626D4
	private void UpdateFacingEvents()
	{
		if (this.facing != this.boy.facing)
		{
			this.facing = this.boy.facing;
			if (this.facing > 0f)
			{
				this.boyFacingRight.OnEvent(this);
			}
			else
			{
				this.boyFacingLeft.OnEvent(this);
			}
		}
	}

	// Token: 0x06000A13 RID: 2579 RVA: 0x00064538 File Offset: 0x00062738
	private void UpdateGrabEvents()
	{
		bool flag = BoyUtils.GetCurrentGrabBody(this.boy) != null;
		if (this.specificGrabObject != null && flag)
		{
			flag = false;
			if (BoyUtils.GetCurrentGrabBody(this.boy) != null && BoyUtils.GetCurrentGrabBody(this.boy).gameObject == this.specificGrabObject)
			{
				flag = true;
			}
		}
		if (this.isGrabbing != flag)
		{
			this.isGrabbing = flag;
			if (this.isGrabbing)
			{
				this.boyIsGrabbing.OnEvent(this);
			}
			else
			{
				this.boyIsNotGrabbing.OnEvent(this);
			}
		}
	}

	// Token: 0x06000A14 RID: 2580 RVA: 0x000645E4 File Offset: 0x000627E4
	private void UpdateWaterEvents()
	{
		BoySwimState boySwimState = this.boy.state as BoySwimState;
		bool flag = false;
		if (boySwimState)
		{
			flag = boySwimState.atSurface;
		}
		if (BoyUtils.InWater(this.boy))
		{
			if (!this.atSurface && flag)
			{
				this.atSurface = true;
				this.boyAtSurface.OnEvent(this);
			}
			else if (this.atSurface && !flag)
			{
				this.atSurface = false;
				this.boyUnderSurface.OnEvent(this);
			}
		}
		if (!this.inWater && this.boy.status.water != null)
		{
			if (this.specificWater == null || this.specificWater == this.boy.status.water.gameObject)
			{
				this.inWater = true;
				this.enterSwimState.OnEvent(this);
			}
		}
		else if (this.inWater && !BoyUtils.InWater(this.boy))
		{
			this.inWater = false;
			this.exitSwimState.OnEvent(this);
		}
	}

	// Token: 0x06000A15 RID: 2581 RVA: 0x00064718 File Offset: 0x00062918
	private void UpdateLadderEvents()
	{
		BoyLadderState boyLadderState = this.boy.state as BoyLadderState;
		BoyJumpState boyJumpState = this.boy.state as BoyJumpState;
		BoyState boyState = this.lastFrameState as BoyLadderState;
		BoyState boyState2 = this.lastFrameState as BoyJumpState;
		if (this.onLadder && boyLadderState == null)
		{
			this.onLadder = false;
			this.exitLadderState.OnEvent(this);
			if (boyJumpState != null)
			{
				this.jumpFromLadder.OnEvent(this);
			}
		}
		else if (!this.onLadder && boyLadderState != null && (this.specificLadder == null || this.specificLadder == boyLadderState.ladder.gameObject))
		{
			this.onLadder = true;
			this.enterLadderState.OnEvent(this);
			if (boyState2 != null)
			{
				this.jumpToLadder.OnEvent(this);
			}
		}
	}

	// Token: 0x06000A16 RID: 2582 RVA: 0x000647FC File Offset: 0x000629FC
	private void UpdateBoyDiedEvents()
	{
		if (this.boy.isDead && !this.diedSignalSend)
		{
			this.diedSignalSend = true;
			this.boyDied.OnEvent(this);
		}
	}

	// Token: 0x06000A17 RID: 2583 RVA: 0x00064838 File Offset: 0x00062A38
	private void UpdateRunSpeedEvents()
	{
		float num = this.specificSpeed * this.specificSpeed;
		float sqrLength = (this.boy.velocity - this.boy.status.groundVelocity).GetSqrLength();
		if (sqrLength >= num && !this.aboveSpeed)
		{
			this.aboveSpeed = true;
			this.aboveSpecifiedSpeed.OnEvent(this);
		}
		else if (sqrLength < num && this.aboveSpeed)
		{
			this.aboveSpeed = false;
			this.belowSpecifiedSpeed.OnEvent(this);
		}
	}

	// Token: 0x06000A18 RID: 2584 RVA: 0x000648CC File Offset: 0x00062ACC
	private void UpdateAbsoluteSpeedEvents()
	{
		float num = this.specificSpeed * this.specificSpeed;
		float sqrLength = this.boy.velocity.GetSqrLength();
		if (sqrLength >= num && !this.aboveAbsoluteSpeed)
		{
			this.aboveAbsoluteSpeed = true;
			this.aboveAbsoluteSpecifiedSpeed.OnEvent(this);
		}
		else if (sqrLength < num && this.aboveAbsoluteSpeed)
		{
			this.aboveAbsoluteSpeed = false;
			this.belowAbsoluteSpecifiedSpeed.OnEvent(this);
		}
	}

	// Token: 0x06000A19 RID: 2585 RVA: 0x0006494C File Offset: 0x00062B4C
	private void UpdateGroundEvents()
	{
		BoySlideState boySlideState = this.boy.state as BoySlideState;
		BoySlideState boySlideState2 = this.lastFrameState as BoySlideState;
		if (!this.boyOnGroundValue && this.boy.status.groundCollider != null && (this.specificGroundCollider == null || this.specificGroundCollider.GetComponent<Collider>() == this.boy.status.groundCollider))
		{
			this.boyOnGroundValue = true;
			this.boyOnGround.OnEvent(this);
		}
		else if (this.boyOnGroundValue && this.boy.status.groundCollider == null)
		{
			this.boyOnGroundValue = false;
			this.boyInAir.OnEvent(this);
		}
		if (boySlideState == null && boySlideState2 != null)
		{
			this.boySlideStop.OnEvent(this);
		}
		else if (boySlideState != null && boySlideState2 == null)
		{
			this.boySlideStart.OnEvent(this);
		}
	}

	// Token: 0x06000A1A RID: 2586 RVA: 0x00064A58 File Offset: 0x00062C58
	private void UpdateRopeEvents()
	{
		BoyRopeState boyRopeState = this.boy.state as BoyRopeState;
		BoyJumpState boyJumpState = this.boy.state as BoyJumpState;
		BoyState boyState = this.lastFrameState as BoyLadderState;
		BoyState boyState2 = this.lastFrameState as BoyJumpState;
		if (this.onRope && boyRopeState == null)
		{
			this.onRope = false;
			this.boyExitRope.OnEvent(this);
			if (boyJumpState != null)
			{
				this.jumpFromRope.OnEvent(this);
			}
		}
		else if (!this.onRope && boyRopeState != null && (this.specificRope == null || this.specificRope == boyRopeState.rope.gameObject))
		{
			this.onRope = true;
			this.boyEnterRope.OnEvent(this);
			if (boyState2 != null)
			{
				this.jumpToRope.OnEvent(this);
			}
		}
	}

	// Token: 0x06000A1B RID: 2587 RVA: 0x00064B3C File Offset: 0x00062D3C
	private void UpdateCustomAnimationEvents()
	{
		BoyState boyState = this.boy.state as BoyCustomAnimState;
		if (boyState != null && !this.customAnimLastFrame)
		{
			this.enterCustomAnim.OnEvent(this);
			this.customAnimLastFrame = true;
		}
		else if (this.customAnimLastFrame && boyState == null)
		{
			this.exitCustomAnim.OnEvent(this);
			this.customAnimLastFrame = false;
		}
	}

	// Token: 0x06000A1C RID: 2588 RVA: 0x00064BA8 File Offset: 0x00062DA8
	private void FixedUpdate()
	{
		if (this.isActive && this.boy.isCharacterActive)
		{
			this.UpdateFacingEvents();
			this.UpdateGrabEvents();
			this.UpdateWaterEvents();
			this.UpdateLadderEvents();
			this.UpdateBoyDiedEvents();
			this.UpdateRunSpeedEvents();
			this.UpdateAbsoluteSpeedEvents();
			this.UpdateGroundEvents();
			this.UpdateRopeEvents();
			if (this.customAnimCheck)
			{
				this.UpdateCustomAnimationEvents();
			}
			this.lastFrameState = this.boy.state;
		}
	}

	// Token: 0x0400114C RID: 4428
	public GameObject targetBoy;

	// Token: 0x0400114D RID: 4429
	public GameObject specificGrabObject;

	// Token: 0x0400114E RID: 4430
	public GameObject specificWater;

	// Token: 0x0400114F RID: 4431
	public GameObject specificLadder;

	// Token: 0x04001150 RID: 4432
	public GameObject specificRope;

	// Token: 0x04001151 RID: 4433
	public GameObject specificGroundCollider;

	// Token: 0x04001152 RID: 4434
	public bool customAnimCheck;

	// Token: 0x04001153 RID: 4435
	public float specificSpeed;

	// Token: 0x04001154 RID: 4436
	public bool startDeactivated;

	// Token: 0x04001155 RID: 4437
	public SimpleEvent<BoyFSMEvents> boyFacingLeft = new SimpleEvent<BoyFSMEvents>("boyFacingLeft");

	// Token: 0x04001156 RID: 4438
	public SimpleEvent<BoyFSMEvents> boyFacingRight = new SimpleEvent<BoyFSMEvents>("boyFacingRight");

	// Token: 0x04001157 RID: 4439
	public SimpleEvent<BoyFSMEvents> boyIsGrabbing = new SimpleEvent<BoyFSMEvents>("boyIsGrabbing");

	// Token: 0x04001158 RID: 4440
	public SimpleEvent<BoyFSMEvents> boyIsNotGrabbing = new SimpleEvent<BoyFSMEvents>("boyIsNotGrabbing");

	// Token: 0x04001159 RID: 4441
	public SimpleEvent<BoyFSMEvents> enterSwimState = new SimpleEvent<BoyFSMEvents>("enterSwimState");

	// Token: 0x0400115A RID: 4442
	public SimpleEvent<BoyFSMEvents> exitSwimState = new SimpleEvent<BoyFSMEvents>("exitSwimState");

	// Token: 0x0400115B RID: 4443
	public SimpleEvent<BoyFSMEvents> boyAtSurface = new SimpleEvent<BoyFSMEvents>("boyAtSurface");

	// Token: 0x0400115C RID: 4444
	public SimpleEvent<BoyFSMEvents> boyUnderSurface = new SimpleEvent<BoyFSMEvents>("boyUnderSurface");

	// Token: 0x0400115D RID: 4445
	public SimpleEvent<BoyFSMEvents> enterLadderState = new SimpleEvent<BoyFSMEvents>("enterLadderState");

	// Token: 0x0400115E RID: 4446
	public SimpleEvent<BoyFSMEvents> exitLadderState = new SimpleEvent<BoyFSMEvents>("exitLadderState");

	// Token: 0x0400115F RID: 4447
	public SimpleEvent<BoyFSMEvents> aboveSpecifiedSpeed = new SimpleEvent<BoyFSMEvents>("aboveSpecifiedSpeed");

	// Token: 0x04001160 RID: 4448
	public SimpleEvent<BoyFSMEvents> belowSpecifiedSpeed = new SimpleEvent<BoyFSMEvents>("belowSpecifiedSpeed");

	// Token: 0x04001161 RID: 4449
	public SimpleEvent<BoyFSMEvents> jumpFromLadder = new SimpleEvent<BoyFSMEvents>("jumpFromLadder");

	// Token: 0x04001162 RID: 4450
	public SimpleEvent<BoyFSMEvents> jumpToLadder = new SimpleEvent<BoyFSMEvents>("jumpToLadder");

	// Token: 0x04001163 RID: 4451
	public SimpleEvent<BoyFSMEvents> aboveAbsoluteSpecifiedSpeed = new SimpleEvent<BoyFSMEvents>("aboveAbsoluteSpecifiedSpeed");

	// Token: 0x04001164 RID: 4452
	public SimpleEvent<BoyFSMEvents> belowAbsoluteSpecifiedSpeed = new SimpleEvent<BoyFSMEvents>("belowAbsoluteSpecifiedSpeed");

	// Token: 0x04001165 RID: 4453
	public SimpleEvent<BoyFSMEvents> boyOnGround = new SimpleEvent<BoyFSMEvents>("boyOnGround");

	// Token: 0x04001166 RID: 4454
	public SimpleEvent<BoyFSMEvents> boyInAir = new SimpleEvent<BoyFSMEvents>("boyInAir");

	// Token: 0x04001167 RID: 4455
	public SimpleEvent<BoyFSMEvents> boySlideStart = new SimpleEvent<BoyFSMEvents>("boySlideStart");

	// Token: 0x04001168 RID: 4456
	public SimpleEvent<BoyFSMEvents> boySlideStop = new SimpleEvent<BoyFSMEvents>("boySlideStop");

	// Token: 0x04001169 RID: 4457
	public SimpleEvent<BoyFSMEvents> boyDied = new SimpleEvent<BoyFSMEvents>("boyDied");

	// Token: 0x0400116A RID: 4458
	public SimpleEvent<BoyFSMEvents> boyEnterRope = new SimpleEvent<BoyFSMEvents>("boyEnterRope");

	// Token: 0x0400116B RID: 4459
	public SimpleEvent<BoyFSMEvents> boyExitRope = new SimpleEvent<BoyFSMEvents>("boyExitRope");

	// Token: 0x0400116C RID: 4460
	public SimpleEvent<BoyFSMEvents> jumpFromRope = new SimpleEvent<BoyFSMEvents>("jumpFromRope");

	// Token: 0x0400116D RID: 4461
	public SimpleEvent<BoyFSMEvents> jumpToRope = new SimpleEvent<BoyFSMEvents>("jumpToRope");

	// Token: 0x0400116E RID: 4462
	public SimpleEvent<BoyFSMEvents> enterCustomAnim = new SimpleEvent<BoyFSMEvents>("enterCustomAnim");

	// Token: 0x0400116F RID: 4463
	public SimpleEvent<BoyFSMEvents> exitCustomAnim = new SimpleEvent<BoyFSMEvents>("exitCustomAnim");

	// Token: 0x04001170 RID: 4464
	private SignalIn doActivate;

	// Token: 0x04001171 RID: 4465
	private SignalIn doDeactivate;

	// Token: 0x04001172 RID: 4466
	private Boy cachedTarget;

	// Token: 0x04001173 RID: 4467
	private float facing;

	// Token: 0x04001174 RID: 4468
	private bool isGrabbing;

	// Token: 0x04001175 RID: 4469
	private bool inWater;

	// Token: 0x04001176 RID: 4470
	private bool atSurface;

	// Token: 0x04001177 RID: 4471
	private bool onLadder;

	// Token: 0x04001178 RID: 4472
	private bool onRope;

	// Token: 0x04001179 RID: 4473
	private bool boyOnGroundValue;

	// Token: 0x0400117A RID: 4474
	private bool isActive;

	// Token: 0x0400117B RID: 4475
	private BoyState lastFrameState;

	// Token: 0x0400117C RID: 4476
	private bool diedSignalSend;

	// Token: 0x0400117D RID: 4477
	private bool aboveSpeed;

	// Token: 0x0400117E RID: 4478
	private bool aboveAbsoluteSpeed;

	// Token: 0x0400117F RID: 4479
	private bool boyOnRope;

	// Token: 0x04001180 RID: 4480
	private bool customAnimLastFrame;
}