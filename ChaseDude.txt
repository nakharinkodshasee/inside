using System;
using UnityEngine;

// Token: 0x0200004F RID: 79
public class ChaseDude : MonoBehaviour, IPreAwake
{
	// Token: 0x06000297 RID: 663 RVA: 0x0001DA38 File Offset: 0x0001BC38
	[EarlyProcessBuild(0)]
	private void OnPreProcess()
	{
		if (!this.preProcessed)
		{
			if (this.pathHolder != null)
			{
				this.path = new Vector3[this.pathHolder.childCount];
				this.endDirection = this.pathHolder.GetChild(this.pathHolder.childCount - 1).forward * 10f;
				this.walkPosX = this.walkPos.position.x;
				int i = 0;
				int childCount = this.pathHolder.childCount;
				while (i < childCount)
				{
					Transform child = this.pathHolder.GetChild(i);
					this.path[i] = child.transform.position - base.transform.position;
					i++;
				}
				PDUtilities.Destroy(this.pathHolder.gameObject);
			}
			this.preProcessed = true;
		}
	}

	// Token: 0x06000298 RID: 664 RVA: 0x0001DB2C File Offset: 0x0001BD2C
	public bool PreAwake(int callcount)
	{
		this.startChasing = SignalIn.Create("startChasing", base.gameObject, new Action(this.SetIntroState));
		this.shootAtTarget = SignalIn.Create("shootAtTarget", base.gameObject, new Action(this.SetShootAtTargetState));
		return true;
	}

	// Token: 0x06000299 RID: 665 RVA: 0x0001DB80 File Offset: 0x0001BD80
	private void Start()
	{
		if (!this.preProcessed)
		{
			this.OnPreProcess();
		}
		this.animator = this.dudeHolder.GetComponent<Animator>();
		this.currentIndex = 1;
		this.currentPoint = this.GetPathPoint(this.currentIndex);
		this.currentLookAt = this.dudeHolder.transform.transform.forward;
		if (this.headBone != null)
		{
			this.lookTarget = (ScriptGlobals.boy.pos3 - this.headBone.position).normalized;
		}
		if (this.slinkyGun != null)
		{
			this.rightHandNode = base.transform.Find("bones/Logic/Root/SpineA/SpineB/SpineC/RightClavicle/RightArm/RightElbow/RightWrist/holdR");
			Transform transform = base.transform.Find("bones/Logic/Root/RightHip");
			if (transform != null)
			{
				this.slinkyGun.transform.parent = transform.transform;
				this.slinkyGun.transform.localPosition = new Vector3(-0.1f, 0.08f, -0.01f);
				this.slinkyGun.transform.localEulerAngles = new Vector3(-75f, 60f, 90f);
			}
		}
		this.takeAimHash1 = Animator.StringToHash("Base Layer.IdleTakeAimShootA");
		this.takeAimHash2 = Animator.StringToHash("Base Layer.IdleTakeAimShootB");
	}

	// Token: 0x0600029A RID: 666 RVA: 0x0001DCE0 File Offset: 0x0001BEE0
	public void SetShootAtTargetState()
	{
		if (this.state != ChaseDude.State.Shooting)
		{
			this.animator.SetBool("isShooting", true);
			int num = Random.Range(1, 3);
			if (this.slinkyGun.targetObject == null || this.slinkyGun.targetObject == ScriptGlobals.boy)
			{
				num = 2;
			}
			this.animator.SetInteger("Random", num);
			this.resetBool = true;
			this.gunInHand = false;
			this.hasShot = false;
			this.state = ChaseDude.State.Shooting;
		}
	}

	// Token: 0x0600029B RID: 667 RVA: 0x0001DD74 File Offset: 0x0001BF74
	private int GetNextAnimatorHash()
	{
		return this.animator.GetNextAnimatorStateInfo(0).fullPathHash;
	}

	// Token: 0x0600029C RID: 668 RVA: 0x0001DD98 File Offset: 0x0001BF98
	private void ShootingState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.Shooting"))
		{
			this.animator.SetBool("isShooting", false);
			this.resetBool = false;
		}
		AnimatorStateInfo currentAnimatorStateInfo = this.animator.GetCurrentAnimatorStateInfo(0);
		if (Time.deltaTime > 0f)
		{
			float @float = this.animator.GetFloat("Attach");
			if (@float > 0f)
			{
				if (!this.gunInHand)
				{
					this.gunInHand = true;
					this.gunRepositioned = false;
					this.slinkyGun.transform.parent = this.rightHandNode;
					this.initialPosOffset = this.slinkyGun.transform.localPosition;
					this.initialLocalEuler = this.slinkyGun.transform.localEulerAngles;
				}
				if (!this.gunRepositioned)
				{
					Vector3 localPosition = (1f - @float) * this.initialPosOffset + @float * new Vector3(0f, 0.06f, 0.01f);
					this.slinkyGun.transform.localPosition = localPosition;
					Vector3 localEulerAngles = (1f - @float) * this.initialLocalEuler + @float * new Vector3(274f, 31f, 160f);
					this.slinkyGun.transform.localEulerAngles = localEulerAngles;
					if (@float >= 1f)
					{
						this.gunRepositioned = true;
					}
				}
			}
			if (!this.hasShot)
			{
				float float2 = this.animator.GetFloat("Shoot");
				if (float2 > 0f)
				{
					this.hasShot = true;
					this.slinkyGun.Fire();
				}
			}
		}
	}

	// Token: 0x0600029D RID: 669 RVA: 0x0001DF60 File Offset: 0x0001C160
	public void SetIntroState()
	{
		this.animator.SetBool("isIntro", true);
		this.resetBool = true;
		this.state = ChaseDude.State.Intro;
	}

	// Token: 0x0600029E RID: 670 RVA: 0x0001DF84 File Offset: 0x0001C184
	private void IntroState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.Intro"))
		{
			this.animator.SetBool("isIntro", false);
			this.resetBool = false;
		}
		Vector3 targetDir = this.currentPoint - this.dudeHolder.transform.position;
		this.RotateCharacter(targetDir);
		this.ReachedCheck(targetDir.sqrMagnitude);
		if (this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.Running"))
		{
			this.state = ChaseDude.State.Chase;
		}
	}

	// Token: 0x0600029F RID: 671 RVA: 0x0001E038 File Offset: 0x0001C238
	public void SetChaseState()
	{
		this.animator.SetBool("isRunning", true);
		this.resetBool = true;
		this.state = ChaseDude.State.Chase;
	}

	// Token: 0x060002A0 RID: 672 RVA: 0x0001E05C File Offset: 0x0001C25C
	private void ChaseState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.Running"))
		{
			this.animator.SetBool("isRunning", false);
			this.resetBool = false;
		}
		Vector3 targetDir = this.currentPoint - this.dudeHolder.transform.position;
		this.RotateCharacter(targetDir);
		this.ReachedCheck(targetDir.sqrMagnitude);
		this.RandomRunAnim();
		float num = Mathf.Abs(ScriptGlobals.boy.pos3.x - this.dudeHolder.transform.position.x);
		this.AdjustSpeed(num);
		if (num < this.walkDist)
		{
			this.SetCloseState();
		}
		else if (this.dudeHolder && this.walkPosX != 0f && this.dudeHolder.transform.position.x > this.walkPosX)
		{
			this.SetWalkState();
		}
	}

	// Token: 0x060002A1 RID: 673 RVA: 0x0001E184 File Offset: 0x0001C384
	public void AdjustSpeed(float dist)
	{
		float num = this.boyTargetDist - dist;
		float num2 = 1f - num * this.boyDistCorrection;
		if (dist < 10f)
		{
			num2 = Mathf.Clamp(num2, 0.7f, 1f);
		}
		else
		{
			num2 = Mathf.Clamp(num2, 0.7f, 3f);
		}
		this.animator.speed = num2;
	}

	// Token: 0x060002A2 RID: 674 RVA: 0x0001E1E8 File Offset: 0x0001C3E8
	public void SetCloseState()
	{
		this.animator.SetBool("isClose", true);
		this.resetBool = true;
		this.state = ChaseDude.State.Close;
	}

	// Token: 0x060002A3 RID: 675 RVA: 0x0001E20C File Offset: 0x0001C40C
	private void CloseState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.CloseToBoy"))
		{
			this.animator.SetBool("isClose", false);
			this.resetBool = false;
		}
		Vector3 targetDir = this.currentPoint - this.dudeHolder.transform.position;
		this.RotateCharacter(targetDir);
		this.ReachedCheck(targetDir.sqrMagnitude);
		float num = Mathf.Abs(ScriptGlobals.boy.pos3.x - this.dudeHolder.transform.position.x);
		this.AdjustSpeed(num);
		if (num > this.runDist)
		{
			this.SetChaseState();
		}
		else if (num < this.catchDist)
		{
			this.SetCatchState();
		}
		else if (this.dudeHolder && this.walkPosX != 0f && this.dudeHolder.transform.position.x > this.walkPosX)
		{
			this.SetWalkState();
		}
	}

	// Token: 0x060002A4 RID: 676 RVA: 0x0001E344 File Offset: 0x0001C544
	public void SetWalkState()
	{
		this.animator.SetBool("isWalking", true);
		this.resetBool = true;
		this.state = ChaseDude.State.Walk;
	}

	// Token: 0x060002A5 RID: 677 RVA: 0x0001E368 File Offset: 0x0001C568
	private void WalkState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.GoToWalk"))
		{
			this.animator.SetBool("isWalking", false);
			this.resetBool = false;
		}
		Vector3 targetDir = this.currentPoint - this.dudeHolder.transform.position;
		this.RotateCharacter(targetDir);
		this.ReachedCheck(targetDir.sqrMagnitude);
		float num = Mathf.Abs(ScriptGlobals.boy.pos3.x - this.dudeHolder.transform.position.x);
		if (num < this.catchDist)
		{
			this.SetCatchState();
		}
	}

	// Token: 0x060002A6 RID: 678 RVA: 0x0001E434 File Offset: 0x0001C634
	private void SetCatchState()
	{
		this.animator.speed = 1f;
		this.animator.SetBool("isAttacking", true);
		this.resetBool = true;
		this.animBoyHolder.position = this.animBoyPos.position;
		ScriptGlobals.boy.Kill();
		this.animBoyHolder.rotation = this.animBoyPos.rotation;
		if (this.animBoyCaugth != null)
		{
			BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.animBoyCaugth, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
		}
		this.state = ChaseDude.State.Catch;
	}

	// Token: 0x060002A7 RID: 679 RVA: 0x0001E4D0 File Offset: 0x0001C6D0
	private void CatchState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.Attack"))
		{
			this.animator.SetBool("isAttacking", false);
			this.animator.speed = 1f;
			this.resetBool = false;
			this.state = ChaseDude.State.None;
		}
	}

	// Token: 0x060002A8 RID: 680 RVA: 0x0001E540 File Offset: 0x0001C740
	private void SetEndState()
	{
		this.animator.SetBool("isEnd", true);
		this.resetBool = true;
		this.state = ChaseDude.State.End;
	}

	// Token: 0x060002A9 RID: 681 RVA: 0x0001E564 File Offset: 0x0001C764
	private void EndState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.GoToEnd"))
		{
			this.animator.SetBool("isEnd", false);
			this.resetBool = false;
		}
		Vector3 vector = this.currentPoint + this.endDirection - this.dudeHolder.transform.position;
		this.currentLookAt = Vector3.Lerp(this.currentLookAt, vector, Mathf.Min(Time.deltaTime * this.rotateSpeed, 1f));
		this.dudeHolder.transform.LookAt(this.dudeHolder.transform.position + this.currentLookAt);
		float num = Mathf.Abs(ScriptGlobals.boy.pos3.x - this.dudeHolder.transform.position.x);
		if (num < this.catchDist)
		{
			this.SetCatchState();
		}
	}

	// Token: 0x060002AA RID: 682 RVA: 0x0001E678 File Offset: 0x0001C878
	private void SetDeathState()
	{
		this.animator.SetBool("isDead", true);
		this.resetBool = true;
		this.state = ChaseDude.State.Death;
	}

	// Token: 0x060002AB RID: 683 RVA: 0x0001E69C File Offset: 0x0001C89C
	private void DeathState()
	{
		if (this.resetBool && this.animator.IsInTransition(0) && this.GetNextAnimatorHash() == Animator.StringToHash("Base Layer.Boy Killed"))
		{
			this.animator.SetBool("isDead", false);
			this.resetBool = false;
		}
		Vector3 targetDir = ScriptGlobals.boy.pos3 - this.dudeHolder.transform.position;
		targetDir.y = 0f;
		this.RotateCharacter(targetDir);
	}

	// Token: 0x060002AC RID: 684 RVA: 0x0001E728 File Offset: 0x0001C928
	public void Update()
	{
		if (this.state != ChaseDude.State.None)
		{
			if (ScriptGlobals.boy.isDead && this.state != ChaseDude.State.Catch && this.state != ChaseDude.State.Death)
			{
				this.SetDeathState();
			}
			switch (this.state)
			{
			case ChaseDude.State.Intro:
				this.IntroState();
				break;
			case ChaseDude.State.Chase:
				this.ChaseState();
				break;
			case ChaseDude.State.Close:
				this.CloseState();
				break;
			case ChaseDude.State.Walk:
				this.WalkState();
				break;
			case ChaseDude.State.Catch:
				this.CatchState();
				break;
			case ChaseDude.State.Shooting:
				this.ShootingState();
				break;
			case ChaseDude.State.End:
				this.EndState();
				break;
			case ChaseDude.State.Death:
				this.DeathState();
				break;
			}
		}
	}

	// Token: 0x060002AD RID: 685 RVA: 0x0001E7FC File Offset: 0x0001C9FC
	private void LateUpdate()
	{
		if (this.state != ChaseDude.State.Catch && this.headBone != null && this.animator.GetFloat("DontLook") != 1f)
		{
			Vector3 normalized = (ScriptGlobals.boy.pos3 - this.headBone.position).normalized;
			this.lookTarget += (normalized - this.lookTarget) * 1.5f * Time.deltaTime;
			this.headBone.LookAt(this.headBone.position + this.lookTarget);
		}
	}

	// Token: 0x060002AE RID: 686 RVA: 0x0001E8B8 File Offset: 0x0001CAB8
	private void RotateCharacter(Vector3 targetDir)
	{
		if (this.rotateTimer > 0f)
		{
			this.rotateTimer -= Time.deltaTime;
			this.currentLookAt = Vector3.Lerp(this.currentLookAt, targetDir, Mathf.Min(Time.deltaTime * this.rotateSpeed, 1f));
			this.dudeHolder.transform.LookAt(this.dudeHolder.transform.position + this.currentLookAt);
		}
		else
		{
			this.angle = Vector3.Angle(this.currentLookAt, targetDir);
			if (this.angle > this.minAngle)
			{
				this.rotateTimer = 0.1f;
			}
		}
	}

	// Token: 0x060002AF RID: 687 RVA: 0x0001E970 File Offset: 0x0001CB70
	private void ReachedCheck(float dist)
	{
		if (this.currentIndex == this.path.Length - 1)
		{
			if (dist < 0.15f * this.speed)
			{
				if (this.endEvent)
				{
					this.SetEndState();
				}
				else
				{
					base.gameObject.SetActive(false);
					this.state = ChaseDude.State.None;
				}
			}
		}
		else if (dist < this.finishDist)
		{
			this.currentIndex++;
			this.currentPoint = this.GetPathPoint(this.currentIndex);
		}
	}

	// Token: 0x060002B0 RID: 688 RVA: 0x0001EA00 File Offset: 0x0001CC00
	private void RandomRunAnim()
	{
		if (this.runAnimTimer > 0f)
		{
			this.runAnimTimer -= Time.deltaTime;
		}
		else
		{
			this.runAnimTimer = 1f;
			int num = Random.Range(1, this.runAnimCount + 1);
			this.animator.SetInteger("Random", num);
		}
	}

	// Token: 0x060002B1 RID: 689 RVA: 0x0001EA60 File Offset: 0x0001CC60
	public Vector3 GetPathPoint(int index)
	{
		if (index < this.path.Length)
		{
			return base.transform.position + this.path[index];
		}
		return base.transform.position;
	}

	// Token: 0x060002B2 RID: 690 RVA: 0x0001EAA8 File Offset: 0x0001CCA8
	private void OnEnable()
	{
	}

	// Token: 0x060002B3 RID: 691 RVA: 0x0001EAAC File Offset: 0x0001CCAC
	private void OnDrawGizmos()
	{
		if (!EditorMode.DebugLayerActive(EditorMode.EDebugLayers.Gameplay))
		{
			return;
		}
		Color red;
		if (this.selected)
		{
			red = Color.red;
		}
		else if (this.pathSelected)
		{
			red..ctor(1f, 0.5f, 0f, 0.8f);
		}
		else
		{
			red..ctor(0f, 0.5f, 0.5f, 0.8f);
		}
		Vector3[] array = null;
		if (!Application.isPlaying)
		{
			if (this.pathHolder == null || this.pathHolder.childCount <= 1)
			{
				return;
			}
			array = new Vector3[this.pathHolder.childCount];
			int i = 0;
			int childCount = this.pathHolder.childCount;
			while (i < childCount)
			{
				array[i] = this.pathHolder.GetChild(i).position;
				i++;
			}
		}
		else if (this.path != null && this.path.Length > 1)
		{
			array = new Vector3[this.path.Length];
			int j = 0;
			int num = this.path.Length;
			while (j < num)
			{
				array[j] = this.GetPathPoint(j);
				j++;
			}
		}
		if (array != null && array.Length > 1)
		{
			int k = 0;
			int num2 = array.Length - 1;
			while (k < num2)
			{
				Vector3 vector = array[k];
				Vector3 vector2 = array[k + 1];
				Debug.DrawLine(vector, vector2, red);
				k++;
			}
		}
	}

	// Token: 0x04000399 RID: 921
	public Transform dudeHolder;

	// Token: 0x0400039A RID: 922
	public Renderer visuals;

	// Token: 0x0400039B RID: 923
	private Animator animator;

	// Token: 0x0400039C RID: 924
	[HideInInspector]
	public bool selected;

	// Token: 0x0400039D RID: 925
	[HideInInspector]
	public bool pathSelected;

	// Token: 0x0400039E RID: 926
	private Vector3 currentPoint;

	// Token: 0x0400039F RID: 927
	private int currentIndex;

	// Token: 0x040003A0 RID: 928
	public float rotateSpeed = 8f;

	// Token: 0x040003A1 RID: 929
	public float speed = 1f;

	// Token: 0x040003A2 RID: 930
	public float finishDist = 1f;

	// Token: 0x040003A3 RID: 931
	public AnimClipNode animBoyCaugth;

	// Token: 0x040003A4 RID: 932
	public Transform animBoyHolder;

	// Token: 0x040003A5 RID: 933
	public Transform animBoyPos;

	// Token: 0x040003A6 RID: 934
	public Transform walkPos;

	// Token: 0x040003A7 RID: 935
	[SerializeField]
	[HideInInspector]
	private float walkPosX;

	// Token: 0x040003A8 RID: 936
	private Vector3 currentLookAt;

	// Token: 0x040003A9 RID: 937
	private float runAnimTimer;

	// Token: 0x040003AA RID: 938
	private float endTimer;

	// Token: 0x040003AB RID: 939
	private bool resetBool;

	// Token: 0x040003AC RID: 940
	public ChaseDude.State state;

	// Token: 0x040003AD RID: 941
	public Transform pathHolder;

	// Token: 0x040003AE RID: 942
	[SerializeField]
	[HideInInspector]
	public Vector3[] path;

	// Token: 0x040003AF RID: 943
	[SerializeField]
	[HideInInspector]
	private Vector3 endDirection;

	// Token: 0x040003B0 RID: 944
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x040003B1 RID: 945
	[HideInInspector]
	public bool validPath;

	// Token: 0x040003B2 RID: 946
	public int startAnimCount;

	// Token: 0x040003B3 RID: 947
	public int runAnimCount;

	// Token: 0x040003B4 RID: 948
	public bool endEvent;

	// Token: 0x040003B5 RID: 949
	private float angle;

	// Token: 0x040003B6 RID: 950
	private float minAngle = 10f;

	// Token: 0x040003B7 RID: 951
	private float rotateTimer;

	// Token: 0x040003B8 RID: 952
	public float walkDist = 10f;

	// Token: 0x040003B9 RID: 953
	public float runDist = 12f;

	// Token: 0x040003BA RID: 954
	public float catchDist = 2f;

	// Token: 0x040003BB RID: 955
	public float boyTargetDist = 5f;

	// Token: 0x040003BC RID: 956
	public float boyDistCorrection = 0.25f;

	// Token: 0x040003BD RID: 957
	public SlinkyGun slinkyGun;

	// Token: 0x040003BE RID: 958
	public Transform headBone;

	// Token: 0x040003BF RID: 959
	private Vector3 lookTarget;

	// Token: 0x040003C0 RID: 960
	public SignalIn startChasing;

	// Token: 0x040003C1 RID: 961
	public SignalIn shootAtTarget;

	// Token: 0x040003C2 RID: 962
	private int takeAimHash1;

	// Token: 0x040003C3 RID: 963
	private int takeAimHash2;

	// Token: 0x040003C4 RID: 964
	private Transform rightHandNode;

	// Token: 0x040003C5 RID: 965
	private bool gunInHand;

	// Token: 0x040003C6 RID: 966
	private bool gunRepositioned;

	// Token: 0x040003C7 RID: 967
	private bool hasShot;

	// Token: 0x040003C8 RID: 968
	private Vector3 initialPosOffset = Vector3.zero;

	// Token: 0x040003C9 RID: 969
	private Vector3 initialLocalEuler = Vector3.zero;

	// Token: 0x02000050 RID: 80
	public enum State
	{
		// Token: 0x040003CB RID: 971
		None,
		// Token: 0x040003CC RID: 972
		Intro,
		// Token: 0x040003CD RID: 973
		Chase,
		// Token: 0x040003CE RID: 974
		Close,
		// Token: 0x040003CF RID: 975
		Walk,
		// Token: 0x040003D0 RID: 976
		Catch,
		// Token: 0x040003D1 RID: 977
		Shooting,
		// Token: 0x040003D2 RID: 978
		End,
		// Token: 0x040003D3 RID: 979
		Death
	}
}
