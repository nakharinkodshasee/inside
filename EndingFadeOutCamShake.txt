using System;
using UnityEngine;

// Token: 0x02000169 RID: 361
public class EndingFadeOutCamShake : MonoBehaviour, IPreAwake
{
	// Token: 0x06000A9C RID: 2716 RVA: 0x00067A9C File Offset: 0x00065C9C
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.rtpcCameraZoom = new RTPC("rtpc_cameraZoomCredits", false);
		this.audioCameraZoomStart = new AudioEventSimple("amb_sws_huddle_huddleNorway_cameraZoomCreditsStart");
		this.audioCameraZoomComplete = new AudioEventSimple("amb_sws_huddle_huddleNorway_cameraZoomCreditsComplete");
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(this.lakeSphereRTPC, null);
		this.rtpcCameraZoomLake = new RTPCLocal("rtpc_cameraZoomCredits", akGameObj, false, float.Epsilon);
		this.audioCameraZoomLakeStart = new AudioEventSimpleLocal("amb_sws_huddle_huddleNorway_cameraZoomCreditsStart", akGameObj);
		this.audioCameraZoomLakeComplete = new AudioEventSimpleLocal("amb_sws_huddle_huddleNorway_cameraZoomCreditsComplete", akGameObj);
	}

	// Token: 0x06000A9D RID: 2717 RVA: 0x00067B34 File Offset: 0x00065D34
	public bool PreAwake(int callcount)
	{
		this.OnPreProcess();
		this.fadeOutHandShake = SignalIn.Create("fadeOutHandShake", base.gameObject, new Action(this.OnFadeOutHandShake));
		return true;
	}

	// Token: 0x06000A9E RID: 2718 RVA: 0x00067B6C File Offset: 0x00065D6C
	private void OnFadeOutHandShake()
	{
		this.camHandshake = ScriptGlobals.camera.cameraHandshake;
		this.audioCameraZoomStart.PostFast(AudioKeyObject.AkGameObjs.global);
		this.audioCameraZoomLakeStart.PostFast();
		this.cameraZoomTimer = 0f;
		this.fadeOutActive = true;
	}

	// Token: 0x06000A9F RID: 2719 RVA: 0x00067BB8 File Offset: 0x00065DB8
	private void Update()
	{
		if (this.fadeOutActive && this.cameraZoomTimer < this.cameraZoomDuration)
		{
			this.fadeOutTimer += Time.deltaTime;
			this.camHandshake.scaleShake = this.fadeOutCurve.Evaluate(this.fadeOutTimer);
			this.cameraZoomTimer += Time.deltaTime;
			if (this.cameraZoomTimer >= this.cameraZoomDuration)
			{
				this.audioCameraZoomComplete.PostFast(AudioKeyObject.AkGameObjs.global);
				this.audioCameraZoomLakeComplete.PostFast();
			}
			float value = Mathf.Clamp01(this.cameraZoomTimer / this.cameraZoomDuration) * 100f;
			this.rtpcCameraZoom.SetFast(value, AudioKeyObject.AkGameObjs.global, 0f);
			this.rtpcCameraZoomLake.SetFast(value, 0f);
		}
	}

	// Token: 0x04001245 RID: 4677
	public AnimationCurve fadeOutCurve;

	// Token: 0x04001246 RID: 4678
	public float cameraZoomDuration = 80f;

	// Token: 0x04001247 RID: 4679
	public GameObject lakeSphereRTPC;

	// Token: 0x04001248 RID: 4680
	private SignalIn fadeOutHandShake;

	// Token: 0x04001249 RID: 4681
	private float cameraZoomTimer;

	// Token: 0x0400124A RID: 4682
	private float fadeOutTimer;

	// Token: 0x0400124B RID: 4683
	private bool fadeOutActive;

	// Token: 0x0400124C RID: 4684
	private CameraHandshake camHandshake;

	// Token: 0x0400124D RID: 4685
	[HideInInspector]
	[SerializeField]
	private AudioEventSimple audioCameraZoomStart;

	// Token: 0x0400124E RID: 4686
	[HideInInspector]
	[SerializeField]
	private AudioEventSimple audioCameraZoomComplete;

	// Token: 0x0400124F RID: 4687
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioCameraZoomLakeStart;

	// Token: 0x04001250 RID: 4688
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioCameraZoomLakeComplete;

	// Token: 0x04001251 RID: 4689
	[HideInInspector]
	[SerializeField]
	private RTPC rtpcCameraZoom;

	// Token: 0x04001252 RID: 4690
	[HideInInspector]
	[SerializeField]
	private RTPCLocal rtpcCameraZoomLake;

	// Token: 0x04001253 RID: 4691
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;
}
