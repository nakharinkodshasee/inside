using System;
using UnityEngine;

// Token: 0x0200039C RID: 924
public class TriggerEnabler : MonoBehaviour
{
	// Token: 0x060018DE RID: 6366 RVA: 0x000D7164 File Offset: 0x000D5364
	private void performEnableOperation(TriggerEnabler.behaviour m)
	{
		if (this.objectToEnable == null)
		{
			return;
		}
		switch (m)
		{
		case TriggerEnabler.behaviour.enable:
			this.objectToEnable.SetActive(true);
			break;
		case TriggerEnabler.behaviour.disable:
			this.objectToEnable.SetActive(false);
			break;
		case TriggerEnabler.behaviour.invert:
			this.objectToEnable.SetActive(!this.objectToEnable.activeSelf);
			break;
		}
	}

	// Token: 0x060018DF RID: 6367 RVA: 0x000D71E4 File Offset: 0x000D53E4
	private bool TriggerReqMet(Collider otherCollider)
	{
		bool result = false;
		TriggerEnabler.TriggerRequirements triggerRequirements = this.triggerRequirements;
		if (triggerRequirements == TriggerEnabler.TriggerRequirements.none)
		{
			result = true;
		}
		return result;
	}

	// Token: 0x060018E0 RID: 6368 RVA: 0x000D7214 File Offset: 0x000D5414
	private void OnTriggerEnter(Collider collider)
	{
		Probe component = collider.GetComponent<Probe>();
		if (component && this.TriggerReqMet(collider))
		{
			this.performEnableOperation(this.mode);
			if (this.useTimeMode)
			{
				this.timerStarted = true;
				this.timer = this.time;
			}
		}
	}

	// Token: 0x060018E1 RID: 6369 RVA: 0x000D726C File Offset: 0x000D546C
	private void OnTriggerExit(Collider collider)
	{
		Probe component = collider.GetComponent<Probe>();
		if (component && this.TriggerReqMet(collider))
		{
			this.performEnableOperation(this.exitMode);
		}
	}

	// Token: 0x060018E2 RID: 6370 RVA: 0x000D72A4 File Offset: 0x000D54A4
	private void Start()
	{
	}

	// Token: 0x060018E3 RID: 6371 RVA: 0x000D72A8 File Offset: 0x000D54A8
	private void Update()
	{
	}

	// Token: 0x060018E4 RID: 6372 RVA: 0x000D72AC File Offset: 0x000D54AC
	private void FixedUpdate()
	{
		if (this.timerStarted)
		{
			this.timer -= Time.deltaTime;
			if (this.timer <= 0f)
			{
				this.timerStarted = false;
				this.performEnableOperation(this.timeMode);
			}
		}
	}

	// Token: 0x04002CB2 RID: 11442
	public GameObject objectToEnable;

	// Token: 0x04002CB3 RID: 11443
	public TriggerEnabler.behaviour mode;

	// Token: 0x04002CB4 RID: 11444
	public TriggerEnabler.behaviour exitMode;

	// Token: 0x04002CB5 RID: 11445
	public bool useTimeMode;

	// Token: 0x04002CB6 RID: 11446
	public TriggerEnabler.behaviour timeMode;

	// Token: 0x04002CB7 RID: 11447
	public float time;

	// Token: 0x04002CB8 RID: 11448
	public TriggerEnabler.TriggerRequirements triggerRequirements;

	// Token: 0x04002CB9 RID: 11449
	private bool timerStarted;

	// Token: 0x04002CBA RID: 11450
	private float timer;

	// Token: 0x0200039D RID: 925
	public enum behaviour
	{
		// Token: 0x04002CBC RID: 11452
		enable,
		// Token: 0x04002CBD RID: 11453
		disable,
		// Token: 0x04002CBE RID: 11454
		invert
	}

	// Token: 0x0200039E RID: 926
	public enum TriggerRequirements
	{
		// Token: 0x04002CC0 RID: 11456
		none
	}
}
