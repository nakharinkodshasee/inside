using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000059 RID: 89
public class ChaserGuardCargoHall : MonoBehaviour, IPreAwake
{
	// Token: 0x060002E7 RID: 743 RVA: 0x000218F0 File Offset: 0x0001FAF0
	public bool PreAwake(int callcount)
	{
		this.chargeToKill = SignalIn.Create("chargeToKill", base.gameObject, new Action(this.OnChargeToKill));
		this.strangleBoy = SignalOut.Create("strangleBoy", base.gameObject);
		return true;
	}

	// Token: 0x060002E8 RID: 744 RVA: 0x00021938 File Offset: 0x0001FB38
	private void Awake()
	{
		this.chargeAnimState = base.GetComponent<Animation>()[this.chargeAnim];
	}

	// Token: 0x060002E9 RID: 745 RVA: 0x00021954 File Offset: 0x0001FB54
	private void OnChargeToKill()
	{
		this.guardMode = ChaserGuardCargoHall.GuardMode.ChasingBoy;
		base.GetComponent<Animation>().CrossFade(this.chargeAnim, 0.4f);
	}

	// Token: 0x060002EA RID: 746 RVA: 0x00021974 File Offset: 0x0001FB74
	private void GotoStrangling()
	{
		ScriptGlobals.boy.Kill(false);
		RumbleManager.instance.RemoveAllRumbleEffects();
		RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightSpike, 0.4f, 0.07f, 0, 0f);
		RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.4f, 0.3f, 0, 0.15f);
		RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightSpike, 0.3f, 0.07f, 0, 0.15f);
		if (this.wallAlignPoint != null)
		{
			float num = base.transform.position.x - this.wallAlignPoint.transform.position.x;
			if (num < 2.8f)
			{
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftSpike, 0.8f, 0.1f, 0, 0.22f);
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightFadeOut, 0.7f, 0.13f, 0, 0.27f);
				if (num < 1.4f)
				{
					base.GetComponent<Animation>().CrossFade(this.attackBoyAtWallCloseAnim, 0.3f);
					this.currentWallAnim = this.boyKilledWallClose;
					BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.currentWallAnim, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
				}
				else
				{
					base.GetComponent<Animation>().CrossFade(this.attackBoyAtWallAnim, 0.3f);
					this.currentWallAnim = this.boyKilledWall;
					BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.currentWallAnim, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
				}
				this.wallKill = true;
				this.guardMode = ChaserGuardCargoHall.GuardMode.StranglingBoy;
				this.strangleBoy.Signal();
				return;
			}
		}
		this.blendOutFactor = 1f;
		this.strangleMovementFactor = 0.9f;
		this.strangleBlendFactor = 3f;
		float num2 = ScriptGlobals.boy.pos.y - base.transform.position.y;
		if (num2 < 1.3f)
		{
			if (ScriptGlobals.boy.facing * base.transform.forward.x < 0f)
			{
				base.GetComponent<Animation>().CrossFade(this.attackHugAnim, 0.3f);
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightSpike, 0.8f, 0.1f, 0, 0.72f);
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.7f, 0.25f, 0, 0.82f);
				BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.boyKilledByHug, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
			}
			else
			{
				if (Mathf.Abs(ScriptGlobals.boy.velocity.x) > 1f)
				{
					this.strangleBlendFactor = 9f;
					this.strangleMovementFactor = 0.6f;
				}
				else
				{
					this.strangleMovementFactor = 0.6f;
				}
				base.GetComponent<Animation>().CrossFade(this.attackNormalAnim, 0.3f);
				BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.boyKilledNormal, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
			}
		}
		else if (num2 < 2.1f)
		{
			base.GetComponent<Animation>().CrossFade(this.attackHighAnim, 0.3f);
			BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.boyKilledHigh, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightSpike, 0.8f, 0.1f, 0, 0.62f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.7f, 0.25f, 0, 0.72f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.4f, 0.14f, 0, 1.32f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.4f, 0.36f, 0, 1.52f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.5f, 0.14f, 0, 1.8f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.5f, 0.25f, 0, 2.6f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.5f, 0.25f, 0, 3.2f);
		}
		else
		{
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightSpike, 0.4f, 0.1f, 0, 0.62f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftFadeOut, 0.7f, 0.25f, 0, 1.12f);
			if (ScriptGlobals.boy.facing * base.transform.forward.x < 0f)
			{
				this.boyJumpKill.transform.localRotation = Quaternion.Euler(0f, 180f, 0f);
				this.boyJumpKill.transform.localPosition = new Vector3(0f, 0f, 0.6f);
				base.GetComponent<Animation>().CrossFade(this.attackBoxJumpMirrorAnim, 0.3f);
			}
			else
			{
				this.boyJumpKill.transform.localRotation = Quaternion.Euler(0f, 0f, 0f);
				this.boyJumpKill.transform.localPosition = Vector3.zero;
				base.GetComponent<Animation>().CrossFade(this.attackBoxJumpAnim, 0.3f);
			}
			BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.boyJumpKill, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
		}
		this.guardMode = ChaserGuardCargoHall.GuardMode.StranglingBoy;
		this.strangleBoy.Signal();
		this.wantedStranglingRot = base.transform.rotation;
	}

	// Token: 0x060002EB RID: 747 RVA: 0x00021EB8 File Offset: 0x000200B8
	private void Update()
	{
		if (this.guardMode == ChaserGuardCargoHall.GuardMode.None)
		{
			return;
		}
		if (this.guardMode == ChaserGuardCargoHall.GuardMode.ChasingBoy)
		{
			Vector3 pos = ScriptGlobals.boy.pos3;
			Quaternion quaternion = Quaternion.LookRotation((pos - base.transform.position).normalized);
			float num = 3f;
			int i = 0;
			int count = this.objectsToAvoid.Count;
			while (i < count)
			{
				float z = this.defautObjectSize;
				Rigidbody component = this.objectsToAvoid[i].GetComponent<Rigidbody>();
				if (component != null)
				{
					z = component.GetComponent<Collider>().bounds.extents.z;
				}
				Vector3 position = this.objectsToAvoid[i].transform.position;
				Vector3 vector = position - base.transform.position;
				Vector3 vector2 = Quaternion.Inverse(quaternion) * vector;
				if ((vector2.x > -(z + 1.5f) || (vector2.x > -(z + 0.5f) && vector2.z < 5f)) && vector.x < z)
				{
					float num2 = position.z - z - 0.5f;
					if (num2 < pos.z)
					{
						pos.z = position.z - z - 0.5f;
					}
					if (vector.z < z)
					{
						float num3 = position.x + z + 0.5f;
						if (num3 > pos.x)
						{
							pos.x = num3;
						}
					}
					num = 7f;
				}
				Vector3 vector3 = this.objectsToAvoid[i].transform.position + Vector3.left + Vector3.back * z;
				i++;
			}
			Vector3 vector4 = pos - base.transform.position;
			vector4.y = 0f;
			vector4.x -= Mathf.Max(vector4.z * 0.15f, 0f);
			vector4.Normalize();
			Quaternion quaternion2 = Quaternion.LookRotation(vector4);
			base.transform.rotation = Quaternion.Slerp(base.transform.rotation, quaternion2, Time.deltaTime * num);
			Vector3 vector5 = base.transform.forward * this.chargeAnimState.weight * this.chargeAnimSpeed;
			vector5.y = 0f;
			base.transform.position = base.transform.position + vector5 * Time.deltaTime;
			Vector3 vector6 = ScriptGlobals.boy.pos3 - base.transform.position;
			vector6.y = 0f;
			if (vector6.magnitude < 1f || (Mathf.Abs(vector6.x) < 1f && vector6.z >= -0.5f))
			{
				this.GotoStrangling();
			}
		}
		else if (this.guardMode == ChaserGuardCargoHall.GuardMode.StranglingBoy)
		{
			if (this.wallKill)
			{
				this.wallKillTime += Time.deltaTime;
				if (this.chargeAnimSpeed > 0f)
				{
					Vector3 position2 = base.transform.position;
					position2.x -= this.chargeAnimSpeed * Time.deltaTime;
					position2.z += (this.wallAlignPoint.transform.position.z - position2.z) * Time.deltaTime * 4f;
					base.transform.position = position2;
				}
				Vector3 position3 = base.transform.position;
				if (position3.x < this.wallAlignPoint.transform.position.x)
				{
					position3.x = this.wallAlignPoint.transform.position.x;
					base.transform.position = position3;
					base.transform.rotation = Quaternion.Slerp(base.transform.rotation, this.wallAlignPoint.transform.rotation, Time.deltaTime * 2f);
				}
			}
			else
			{
				int j = 0;
				int count2 = this.objectsToAvoid.Count;
				while (j < count2)
				{
					float num4 = 1.6f;
					Vector3 position4 = this.objectsToAvoid[j].transform.position;
					Vector3 vector7 = base.transform.position;
					Vector3 vector8 = vector7 - position4;
					vector8.y = 0f;
					float magnitude = vector8.magnitude;
					if (magnitude < num4)
					{
						vector7 += vector8 * (0.5f * Time.deltaTime / magnitude);
						base.transform.position = vector7;
					}
					j++;
				}
				base.transform.rotation = Quaternion.Slerp(base.transform.rotation, this.wantedStranglingRot, Time.deltaTime * 5f);
				this.blendOutFactor = Mathf.Max(this.blendOutFactor - Time.deltaTime * this.strangleBlendFactor, 0f);
				float num5 = MathUtils.SmoothFraction(this.blendOutFactor);
				float num6 = this.chargeAnimSpeed * num5 * this.strangleMovementFactor;
				Vector3 vector9 = base.transform.forward * num6;
				vector9.y = 0f;
				base.transform.position = base.transform.position + vector9 * Time.deltaTime;
			}
		}
	}

	// Token: 0x04000477 RID: 1143
	public string chargeAnim = "Gen_RunB";

	// Token: 0x04000478 RID: 1144
	public float chargeAnimSpeed = 7f;

	// Token: 0x04000479 RID: 1145
	private AnimationState chargeAnimState;

	// Token: 0x0400047A RID: 1146
	public string attackNormalAnim = "BoyChase_AttackA";

	// Token: 0x0400047B RID: 1147
	public AnimClipNode boyKilledNormal;

	// Token: 0x0400047C RID: 1148
	public string attackHighAnim = "BoyChase_AttackBoyInAir";

	// Token: 0x0400047D RID: 1149
	public AnimClipNode boyKilledHigh;

	// Token: 0x0400047E RID: 1150
	public string attackHugAnim = "BoyChase_AttackHugBoy";

	// Token: 0x0400047F RID: 1151
	public AnimClipNode boyKilledByHug;

	// Token: 0x04000480 RID: 1152
	public string attackBoxJumpAnim = "BoyChase_AttackBoyBoxJump";

	// Token: 0x04000481 RID: 1153
	public string attackBoxJumpMirrorAnim = "BoyChase_AttackBoyBoxJumpMirrored";

	// Token: 0x04000482 RID: 1154
	public AnimClipNode boyJumpKill;

	// Token: 0x04000483 RID: 1155
	public string attackBoyAtWallAnim = "BoyChase_AttackBoyAtWall";

	// Token: 0x04000484 RID: 1156
	public AnimClipNode boyKilledWall;

	// Token: 0x04000485 RID: 1157
	public string attackBoyAtWallCloseAnim = "BoyChase_AttackBoyAtWallClose";

	// Token: 0x04000486 RID: 1158
	public AnimClipNode boyKilledWallClose;

	// Token: 0x04000487 RID: 1159
	public GameObject wallAlignPoint;

	// Token: 0x04000488 RID: 1160
	private SignalIn chargeToKill;

	// Token: 0x04000489 RID: 1161
	private SignalOut strangleBoy;

	// Token: 0x0400048A RID: 1162
	public List<GameObject> objectsToAvoid = new List<GameObject>();

	// Token: 0x0400048B RID: 1163
	private float defautObjectSize = 2f;

	// Token: 0x0400048C RID: 1164
	private ChaserGuardCargoHall.GuardMode guardMode;

	// Token: 0x0400048D RID: 1165
	private float blendOutFactor = 1f;

	// Token: 0x0400048E RID: 1166
	private float strangleMovementFactor = 1f;

	// Token: 0x0400048F RID: 1167
	private float strangleBlendFactor = 3f;

	// Token: 0x04000490 RID: 1168
	private bool wallKill;

	// Token: 0x04000491 RID: 1169
	private AnimClipNode currentWallAnim;

	// Token: 0x04000492 RID: 1170
	private Quaternion wantedStranglingRot;

	// Token: 0x04000493 RID: 1171
	private float wallKillTime;

	// Token: 0x0200005A RID: 90
	private enum GuardMode
	{
		// Token: 0x04000495 RID: 1173
		None,
		// Token: 0x04000496 RID: 1174
		ChasingBoy,
		// Token: 0x04000497 RID: 1175
		StranglingBoy
	}
}
