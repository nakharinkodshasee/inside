using System;
using UnityEngine;

// Token: 0x02000046 RID: 70
public class AutoLimb : MonoBehaviour, IPreAwake
{
	// Token: 0x06000237 RID: 567 RVA: 0x0001ADA0 File Offset: 0x00018FA0
	public bool PreAwake(int callcount)
	{
		this.activate = SignalIn.Create("activate", base.gameObject, new Action(this.OnActivate));
		this.huddleDrop = SignalIn.Create("huddleDrop", base.gameObject, new Action(this.OnHuddleDrop));
		return true;
	}

	// Token: 0x06000238 RID: 568 RVA: 0x0001ADF4 File Offset: 0x00018FF4
	private void Start()
	{
		this.animIdle = Animator.StringToHash("Base Layer.Idle");
		this.animMove = Animator.StringToHash("Base Layer.Move");
		this.animIdleAtBoy = Animator.StringToHash("Base Layer.IdleAtBoy");
		this.animFall = Animator.StringToHash("Base Layer.Fall");
		if (this.state == AutoLimb.State.None)
		{
			if (this.startActive)
			{
				this.anim.Play(this.animIdle);
				this.SetIdleState();
			}
			else
			{
				this.render.enabled = false;
			}
		}
	}

	// Token: 0x06000239 RID: 569 RVA: 0x0001AE80 File Offset: 0x00019080
	private void OnEnable()
	{
		if (this.state != AutoLimb.State.None)
		{
			this.anim.Play(this.animIdle);
			this.SetIdleState();
		}
	}

	// Token: 0x0600023A RID: 570 RVA: 0x0001AEB0 File Offset: 0x000190B0
	private void SetDelayState()
	{
		this.delayTimer = Random.Range(this.minStartTime, this.maxStartTime);
		this.state = AutoLimb.State.Delay;
	}

	// Token: 0x0600023B RID: 571 RVA: 0x0001AED0 File Offset: 0x000190D0
	private void DelayState()
	{
		this.delayTimer -= Time.deltaTime;
		if (this.delayTimer <= 0f)
		{
			this.SetFallState();
		}
	}

	// Token: 0x0600023C RID: 572 RVA: 0x0001AF08 File Offset: 0x00019108
	private void SetFallState()
	{
		this.anim.Play(this.animFall);
		this.state = AutoLimb.State.Fall;
	}

	// Token: 0x0600023D RID: 573 RVA: 0x0001AF24 File Offset: 0x00019124
	private void FallState()
	{
		if (!this.render.enabled)
		{
			this.render.enabled = true;
		}
		if (this.anim.GetCurrentAnimatorStateInfo(0).fullPathHash == this.animIdle)
		{
			this.SetIdleState();
		}
	}

	// Token: 0x0600023E RID: 574 RVA: 0x0001AF74 File Offset: 0x00019174
	private void SetIdleState()
	{
		this.idleTimer = Random.Range(this.minIdleTime, this.maxIdleTime);
		this.state = AutoLimb.State.Idle;
	}

	// Token: 0x0600023F RID: 575 RVA: 0x0001AF94 File Offset: 0x00019194
	private void IdleState()
	{
		this.idleTimer -= Time.deltaTime;
		if (this.idleTimer <= 0f)
		{
			this.SetMoveState();
		}
	}

	// Token: 0x06000240 RID: 576 RVA: 0x0001AFCC File Offset: 0x000191CC
	private void SetMoveState()
	{
		this.character = ScriptGlobals.mainCharacter;
		float sqrMagnitude = (this.character.pos3 - this.limb.position).sqrMagnitude;
		this.localRotation = this.limb.localRotation;
		if (sqrMagnitude < this.arriveAtBoyDist)
		{
			this.anim.CrossFade(this.animIdleAtBoy, 0.3f);
		}
		else
		{
			this.anim.CrossFade(this.animMove, 0.3f);
		}
		this.state = AutoLimb.State.Move;
	}

	// Token: 0x06000241 RID: 577 RVA: 0x0001B060 File Offset: 0x00019260
	private void MoveState()
	{
		Vector3 pos = this.character.pos3;
		Vector3 position = this.limb.position;
		float num = pos.x - position.x;
		if (Mathf.Abs(num) > 5f)
		{
			pos.x = position.x + Mathf.Sign(num) * 5f;
		}
		Vector3 vector = pos - position;
		vector.y = 0f;
		float num2 = this.rotationSpeed * this.anim.deltaPosition.sqrMagnitude * 10000f;
		if (num2 > this.maxRotationSpeed)
		{
			num2 = this.maxRotationSpeed;
		}
		this.localRotation = Quaternion.RotateTowards(this.localRotation, Quaternion.LookRotation(vector, Vector3Fast.up), num2);
		this.limb.localRotation = this.localRotation;
		if (this.anim.GetCurrentAnimatorStateInfo(0).fullPathHash == this.animIdle)
		{
			this.SetIdleState();
		}
	}

	// Token: 0x06000242 RID: 578 RVA: 0x0001B164 File Offset: 0x00019364
	private void Update()
	{
		if (this.state != AutoLimb.State.None)
		{
			switch (this.state)
			{
			case AutoLimb.State.Idle:
				this.IdleState();
				break;
			case AutoLimb.State.Move:
				this.MoveState();
				break;
			case AutoLimb.State.Fall:
				this.FallState();
				break;
			case AutoLimb.State.Delay:
				this.DelayState();
				break;
			}
		}
	}

	// Token: 0x06000243 RID: 579 RVA: 0x0001B1CC File Offset: 0x000193CC
	public void OnActivate()
	{
		if (this.state == AutoLimb.State.None)
		{
			this.SetDelayState();
		}
	}

	// Token: 0x06000244 RID: 580 RVA: 0x0001B1E0 File Offset: 0x000193E0
	private void OnHuddleDrop()
	{
		if (this.state == AutoLimb.State.None)
		{
			Vector3 position = this.limb.position;
			position.x = ScriptGlobals.huddle.pos.x + Mathf.Clamp(ScriptGlobals.huddle.velocity.x * this.velocityOffsetFactor, -this.velocityOffsetMax, this.velocityOffsetMax);
			this.limb.position = position;
			this.SetFallState();
		}
	}

	// Token: 0x04000305 RID: 773
	public Transform limb;

	// Token: 0x04000306 RID: 774
	public Animator anim;

	// Token: 0x04000307 RID: 775
	public Renderer render;

	// Token: 0x04000308 RID: 776
	public float minIdleTime = 1f;

	// Token: 0x04000309 RID: 777
	public float maxIdleTime = 2f;

	// Token: 0x0400030A RID: 778
	public float arriveAtBoyDist = 1.5f;

	// Token: 0x0400030B RID: 779
	public float rotationSpeed = 3f;

	// Token: 0x0400030C RID: 780
	public float maxRotationSpeed = 4f;

	// Token: 0x0400030D RID: 781
	public float minStartTime = 5f;

	// Token: 0x0400030E RID: 782
	public float maxStartTime = 9f;

	// Token: 0x0400030F RID: 783
	public float velocityOffsetFactor;

	// Token: 0x04000310 RID: 784
	public float velocityOffsetMax = 5f;

	// Token: 0x04000311 RID: 785
	public bool startActive;

	// Token: 0x04000312 RID: 786
	private SignalIn activate;

	// Token: 0x04000313 RID: 787
	private SignalIn huddleDrop;

	// Token: 0x04000314 RID: 788
	private AutoLimb.State state;

	// Token: 0x04000315 RID: 789
	private float delayTimer;

	// Token: 0x04000316 RID: 790
	private float idleTimer;

	// Token: 0x04000317 RID: 791
	private int animIdle;

	// Token: 0x04000318 RID: 792
	private int animMove;

	// Token: 0x04000319 RID: 793
	private int animIdleAtBoy;

	// Token: 0x0400031A RID: 794
	private int animFall;

	// Token: 0x0400031B RID: 795
	private Quaternion localRotation;

	// Token: 0x0400031C RID: 796
	private Character character;

	// Token: 0x02000047 RID: 71
	private enum State
	{
		// Token: 0x0400031E RID: 798
		None,
		// Token: 0x0400031F RID: 799
		Idle,
		// Token: 0x04000320 RID: 800
		Move,
		// Token: 0x04000321 RID: 801
		Fall,
		// Token: 0x04000322 RID: 802
		Delay
	}
}