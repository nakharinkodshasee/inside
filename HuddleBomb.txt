using System;
using UnityEngine;

// Token: 0x020001BC RID: 444
public class HuddleBomb : MonoBehaviour, IPreAwake
{
	// Token: 0x06000D0F RID: 3343 RVA: 0x0007CB38 File Offset: 0x0007AD38
	public bool PreAwake(int callcount)
	{
		this.bombExploded = SignalOut.Create("bombExploded", base.gameObject);
		this.spawnBomb = SignalIn.Create("spawnBomb", base.gameObject, new Action(this.SpawnBomb));
		return true;
	}

	// Token: 0x06000D10 RID: 3344 RVA: 0x0007CB80 File Offset: 0x0007AD80
	private void Start()
	{
		base.gameObject.SetActive(false);
		this.startPos = base.transform.position;
	}

	// Token: 0x06000D11 RID: 3345 RVA: 0x0007CBAC File Offset: 0x0007ADAC
	private void SpawnBomb()
	{
		if (base.gameObject.activeInHierarchy)
		{
			return;
		}
		this.bombTimer = 0f;
		base.transform.position = this.startPos;
		base.GetComponent<Rigidbody>().velocity = Vector3.zero;
		base.GetComponent<Rigidbody>().angularVelocity = Vector3.zero;
		if (this.spawnPos)
		{
			base.transform.position = this.spawnPos.position;
			if (this.spawnPos.GetComponent<Collider>().attachedRigidbody)
			{
				base.GetComponent<Rigidbody>().velocity = this.spawnPos.GetComponent<Collider>().attachedRigidbody.velocity;
			}
		}
		base.gameObject.SetActive(true);
	}

	// Token: 0x06000D12 RID: 3346 RVA: 0x0007CC74 File Offset: 0x0007AE74
	private void Explode()
	{
		this.explosion.EnableExplode();
		this.HandleHuddleExplosion();
		base.gameObject.SetActive(false);
		GameObject gameObject = Object.Instantiate<GameObject>(this.boomFxPrefab);
		gameObject.transform.parent = base.transform.parent;
		gameObject.transform.position = base.transform.position;
		foreach (ParticleSystem particleSystem in gameObject.GetComponentsInChildren<ParticleSystem>())
		{
			particleSystem.startSize *= 3f;
		}
		this.bombExploded.Signal();
	}

	// Token: 0x06000D13 RID: 3347 RVA: 0x0007CD14 File Offset: 0x0007AF14
	private void HandleHuddleExplosion()
	{
		float x = this.explosion.transform.localScale.x;
		Vector3 vector = ScriptGlobals.huddle.transform.position - base.transform.position;
		float magnitude = vector.magnitude;
		if (magnitude < x * 0.5f + 3f)
		{
			Vector3 impulse = vector.normalized * 25f;
			ScriptGlobals.huddle.AddImpulse(impulse);
			Debug.Log("ForceAdded To Huddle");
		}
	}

	// Token: 0x06000D14 RID: 3348 RVA: 0x0007CDA0 File Offset: 0x0007AFA0
	private void UpdateBombColor()
	{
		base.GetComponent<Renderer>().material.color = Color.Lerp(Color.black, Color.red, Mathf.InverseLerp(0f, this.fuseTimer, this.bombTimer));
	}

	// Token: 0x06000D15 RID: 3349 RVA: 0x0007CDE4 File Offset: 0x0007AFE4
	private void Update()
	{
		this.bombTimer += Time.deltaTime;
		this.UpdateBombColor();
		if (this.bombTimer >= this.fuseTimer)
		{
			this.Explode();
		}
	}

	// Token: 0x040016E9 RID: 5865
	public PDExplosion explosion;

	// Token: 0x040016EA RID: 5866
	public GameObject boomFxPrefab;

	// Token: 0x040016EB RID: 5867
	public float fuseTimer = 7.5f;

	// Token: 0x040016EC RID: 5868
	public Transform spawnPos;

	// Token: 0x040016ED RID: 5869
	private float bombTimer;

	// Token: 0x040016EE RID: 5870
	private Vector3 startPos;

	// Token: 0x040016EF RID: 5871
	private SignalIn spawnBomb;

	// Token: 0x040016F0 RID: 5872
	private SignalOut bombExploded;
}
