using System;
using UnityEngine;

// Token: 0x02000260 RID: 608
public class RopeConstrain : MonoBehaviour
{
	// Token: 0x060012B3 RID: 4787 RVA: 0x000AFAF8 File Offset: 0x000ADCF8
	private void AddJointComponent()
	{
		this.objToConstrain.gameObject.AddComponent<ConfigurableJoint>();
		ConfigurableJoint component = this.objToConstrain.GetComponent<ConfigurableJoint>();
		if (this.objectToAttachTo)
		{
			component.connectedBody = this.objectToAttachTo;
		}
		component.xMotion = 1;
		component.yMotion = 1;
		component.zMotion = 1;
		Vector3 zero = Vector3.zero;
		zero.x = 0.5f;
		zero.y = 0.5f;
		component.anchor = zero;
		SoftJointLimit linearLimit = default(SoftJointLimit);
		linearLimit.limit = this.ConstrainLength;
		linearLimit.bounciness = this.ConstrainBounciness;
		component.linearLimit = linearLimit;
		SoftJointLimitSpring linearLimitSpring = default(SoftJointLimitSpring);
		linearLimitSpring.spring = this.ConstrainSpring;
		linearLimitSpring.damper = this.ConstrainDamper;
		component.linearLimitSpring = linearLimitSpring;
		this.objToConstrain.transform.position = this.objectToConstrainStartPos;
		if (this.fakeCollider)
		{
			this.fakeCollider.transform.position = this.objToConstrain.transform.position;
		}
	}

	// Token: 0x060012B4 RID: 4788 RVA: 0x000AFC10 File Offset: 0x000ADE10
	private void ConfigureLineRenderer()
	{
		this.RopeLine = this.objToConstrain.gameObject.AddComponent<LineRenderer>();
		this.RopeLine.material = new Material(Shader.Find("Playdead/Diffuse/Lambert Notex"));
		this.RopeLine.material.color = Color.black;
		this.RopeLine.SetWidth(0.1f, 0.1f);
	}

	// Token: 0x060012B5 RID: 4789 RVA: 0x000AFC78 File Offset: 0x000ADE78
	private void AddFakeCollider()
	{
		this.fakeCollider = Object.Instantiate<GameObject>(this.objToConstrain.gameObject);
		RopeConstrain component = this.fakeCollider.GetComponent<RopeConstrain>();
		component.masterScript = false;
		this.fakeCollider.transform.position = this.objToConstrain.transform.position;
		this.fakeCollider.GetComponent<Renderer>().enabled = false;
		this.fakeCollider.gameObject.AddComponent<FixedJoint>();
		this.fakeCollider.GetComponent<FixedJoint>().connectedBody = this.objToConstrain.GetComponent<Rigidbody>();
		this.fakeCollider.GetComponent<Rigidbody>().useGravity = false;
	}

	// Token: 0x060012B6 RID: 4790 RVA: 0x000AFD1C File Offset: 0x000ADF1C
	private void Start()
	{
		if (this.objectToConstrain)
		{
			this.objToConstrain = this.objectToConstrain;
		}
		else
		{
			this.objToConstrain = base.gameObject.GetComponent<Rigidbody>();
		}
		this.objectToConstrainStartPos = this.objToConstrain.position;
		if (this.objectToAttachTo)
		{
			this.objToConstrain.transform.position = this.objectToAttachTo.transform.position;
			if (this.attachToHuddle)
			{
				this.objectToAttachTo.GetComponent<Collider>().enabled = false;
				this.objectToAttachTo.GetComponent<Renderer>().enabled = false;
				this.objectToAttachTo.GetComponent<Rigidbody>().isKinematic = true;
			}
		}
		if (!this.attachToHuddle && this.masterScript)
		{
			this.AddFakeCollider();
		}
		this.AddJointComponent();
		this.ConfigureLineRenderer();
	}

	// Token: 0x060012B7 RID: 4791 RVA: 0x000AFE04 File Offset: 0x000AE004
	private void Update()
	{
		if (this.objectToAttachTo)
		{
			this.ropeEndPos = this.objectToAttachTo.position;
		}
		else
		{
			this.ropeEndPos = this.objectToConstrainStartPos;
		}
		this.ropeStartPos = this.objToConstrain.transform.localToWorldMatrix.MultiplyPoint(this.objToConstrain.GetComponent<ConfigurableJoint>().anchor);
		float magnitude = (this.ropeStartPos - this.ropeEndPos).magnitude;
		float num = Mathf.InverseLerp(this.ConstrainLength * 0.5f, this.ConstrainLength, magnitude);
		if (magnitude > this.ConstrainLength / 2f)
		{
			Color color = Color.Lerp(Color.black, Color.red, num);
			this.RopeLine.material.color = color;
		}
		else
		{
			this.RopeLine.material.color = Color.black;
		}
		this.ropeWidth = Mathf.Lerp(0.1f, 0.15f, 1f - num);
		this.RopeLine.SetWidth(this.ropeWidth, this.ropeWidth);
		this.RopeLine.SetPosition(0, this.ropeStartPos);
		this.RopeLine.SetPosition(1, this.ropeEndPos);
	}

	// Token: 0x060012B8 RID: 4792 RVA: 0x000AFF4C File Offset: 0x000AE14C
	private void FixedUpdate()
	{
		if (this.attachToHuddle)
		{
			this.objectToAttachTo.transform.position = ScriptGlobals.huddle.cloth.absoluteTopBone.pos;
			float magnitude = (this.ropeStartPos - this.ropeEndPos).magnitude;
			float num = Mathf.InverseLerp(this.ConstrainLength * 0.5f, this.ConstrainLength, magnitude);
			Vector3 normalized = (this.objectToAttachTo.transform.position - this.objToConstrain.transform.position).normalized;
			if (magnitude > this.ConstrainLength * this.distDiffFactor)
			{
				float num2 = Mathf.InverseLerp(this.ConstrainLength * this.distDiffFactor, this.ConstrainLength * (1f + magnitude / this.ConstrainLength), magnitude);
				ScriptGlobals.huddle.AddImpulse(-normalized * num2 * this.force);
			}
		}
	}

	// Token: 0x04002273 RID: 8819
	public Rigidbody objectToConstrain;

	// Token: 0x04002274 RID: 8820
	public Rigidbody objectToAttachTo;

	// Token: 0x04002275 RID: 8821
	public bool masterScript;

	// Token: 0x04002276 RID: 8822
	public float ConstrainLength;

	// Token: 0x04002277 RID: 8823
	public float ConstrainBounciness;

	// Token: 0x04002278 RID: 8824
	public float ConstrainSpring;

	// Token: 0x04002279 RID: 8825
	public float ConstrainDamper;

	// Token: 0x0400227A RID: 8826
	public bool attachToHuddle;

	// Token: 0x0400227B RID: 8827
	public float distDiffFactor;

	// Token: 0x0400227C RID: 8828
	public float force;

	// Token: 0x0400227D RID: 8829
	private Vector3 ropeEndPos = default(Vector3);

	// Token: 0x0400227E RID: 8830
	private Vector3 ropeStartPos = default(Vector3);

	// Token: 0x0400227F RID: 8831
	private Rigidbody objToConstrain;

	// Token: 0x04002280 RID: 8832
	private float ropeWidth;

	// Token: 0x04002281 RID: 8833
	private LineRenderer RopeLine;

	// Token: 0x04002282 RID: 8834
	private Vector3 objectToConstrainStartPos;

	// Token: 0x04002283 RID: 8835
	private GameObject fakeCollider;

	// Token: 0x04002284 RID: 8836
	private bool doLift = true;
}
