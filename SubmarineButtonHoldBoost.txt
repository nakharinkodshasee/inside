using System;
using UnityEngine;

// Token: 0x020003B4 RID: 948
public class SubmarineButtonHoldBoost : SubmarineBoost
{
	// Token: 0x17000078 RID: 120
	// (get) Token: 0x06001982 RID: 6530 RVA: 0x000DD9AC File Offset: 0x000DBBAC
	public override bool IsCharging
	{
		get
		{
			return false;
		}
	}

	// Token: 0x17000079 RID: 121
	// (get) Token: 0x06001983 RID: 6531 RVA: 0x000DD9B0 File Offset: 0x000DBBB0
	public override bool IsBoosting
	{
		get
		{
			return this.mBoostTimer < this.boostTime;
		}
	}

	// Token: 0x1700007A RID: 122
	// (get) Token: 0x06001984 RID: 6532 RVA: 0x000DD9C0 File Offset: 0x000DBBC0
	public override float boostPercentage
	{
		get
		{
			return 1f;
		}
	}

	// Token: 0x1700007B RID: 123
	// (get) Token: 0x06001985 RID: 6533 RVA: 0x000DD9C8 File Offset: 0x000DBBC8
	public override Vector3 boostDirection
	{
		get
		{
			return Vector3.zero;
		}
	}

	// Token: 0x06001986 RID: 6534 RVA: 0x000DD9D0 File Offset: 0x000DBBD0
	private void Start()
	{
		this.Init();
	}

	// Token: 0x06001987 RID: 6535 RVA: 0x000DD9D8 File Offset: 0x000DBBD8
	public override void Init()
	{
		base.Init();
		this.mBoostTimer = this.boostTime;
		this.mBoostCooldownTimer = this.boostCooldown;
	}

	// Token: 0x06001988 RID: 6536 RVA: 0x000DD9F8 File Offset: 0x000DBBF8
	public override float GetLightIntensity(float aCurrentIntensity)
	{
		return Mathf.Lerp(aCurrentIntensity, (this.mBoostCooldownTimer >= this.boostCooldown) ? 1f : 0f, Time.deltaTime);
	}

	// Token: 0x06001989 RID: 6537 RVA: 0x000DDA28 File Offset: 0x000DBC28
	public override float GetChargePercentage()
	{
		return 0f;
	}

	// Token: 0x0600198A RID: 6538 RVA: 0x000DDA30 File Offset: 0x000DBC30
	public override float GetNonBoostThrustMultiplier()
	{
		return 1f;
	}

	// Token: 0x0600198B RID: 6539 RVA: 0x000DDA38 File Offset: 0x000DBC38
	private void FixedUpdate()
	{
		if (this.mBoostTimer < this.boostTime)
		{
			float num = this.boostForce * this.mSubmarine.GetComponent<Rigidbody>().mass * Time.deltaTime;
			this.mSubmarine.GetComponent<Rigidbody>().AddForce(this.mBoostDirection * num);
			if (!this.mSubmarine.Input.rawJump)
			{
				this.mBoostTimer = this.boostTime;
			}
			else
			{
				this.mBoostTimer += Time.deltaTime;
			}
		}
		else if (this.mBoostCooldownTimer < this.boostCooldown)
		{
			this.mBoostCooldownTimer += Time.deltaTime;
		}
		else
		{
			Vector3 vector;
			vector..ctor(this.mSubmarine.Input.stick.x, this.mSubmarine.Input.stick.y);
			if (this.mSubmarine.Input.rawJump && vector.magnitude > 0.1f)
			{
				this.mBoostTimer = 0f;
				this.mBoostCooldownTimer = 0f;
				this.mBoostDirection = vector.normalized;
			}
		}
	}

	// Token: 0x04002DED RID: 11757
	public float boostForce = 350f;

	// Token: 0x04002DEE RID: 11758
	public float boostTime = 2f;

	// Token: 0x04002DEF RID: 11759
	public float boostCooldown = 2f;

	// Token: 0x04002DF0 RID: 11760
	private float mBoostTimer;

	// Token: 0x04002DF1 RID: 11761
	private float mBoostCooldownTimer;

	// Token: 0x04002DF2 RID: 11762
	private Vector3 mBoostDirection;
}