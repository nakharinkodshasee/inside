using System;
using UnityEngine;

// Token: 0x020001AC RID: 428
public class GateAvoid : MonoBehaviour, IPreAwake
{
	// Token: 0x06000C8E RID: 3214 RVA: 0x000792F0 File Offset: 0x000774F0
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(this.gate.gameObject, this);
		this.audioStartOpenEvent = new AudioEventSimpleLocal(this.audioPrefix + "_gateOpen", akGameObj);
		this.audioStartCloseEvent = new AudioEventSimpleLocal(this.audioPrefix + "_gateClose", akGameObj);
		this.audioClosedEvent = new AudioEventSimpleLocal(this.audioPrefix + "_gateClosed", akGameObj);
		this.audioOpenedEvent = new AudioEventSimpleLocal(this.audioPrefix + "_gateOpened", akGameObj);
		this.audioChangeToCloseEvent = new AudioEventSimpleLocal(this.audioPrefix + "_gateChangeToClose", akGameObj);
		this.audioChangeToOpenEvent = new AudioEventSimpleLocal(this.audioPrefix + "_gateChangeToOpen", akGameObj);
		this.audioBoyCrushEvent = new AudioEventSimpleLocal(this.audioPrefix + "_gateBoyCrush", akGameObj);
	}

	// Token: 0x06000C8F RID: 3215 RVA: 0x000793E8 File Offset: 0x000775E8
	public bool PreAwake(int callcount)
	{
		this.close = SignalIn.Create("close", base.gameObject, new Action(this.SetCloseState));
		this.open = SignalIn.Create("open", base.gameObject, new Action(this.SetOpenState));
		this.loadClosed = SignalIn.Create("loadClosed", base.gameObject, new Action(this.OnLoadClosed));
		this.loadOpen = SignalIn.Create("loadOpen", base.gameObject, new Action(this.OnLoadOpen));
		this.crushed = SignalOut.Create("crushed", base.gameObject);
		this.doneClosing = SignalOut.Create("doneClosing", base.gameObject);
		return true;
	}

	// Token: 0x06000C90 RID: 3216 RVA: 0x000794AC File Offset: 0x000776AC
	private void Start()
	{
		this.OnPreProcess();
		this.boy = ScriptGlobals.boy;
		if (this.setTheme)
		{
			Transform childComponent = this.boy.visualBoy.transform.GetChildComponent("Themes");
			this.sneakyTheme = childComponent.GetChildComponent("Sneaky");
		}
		this.state = GateAvoid.State.Closed;
	}

	// Token: 0x06000C91 RID: 3217 RVA: 0x00079508 File Offset: 0x00077708
	private void SetOpenState()
	{
		this.boy.visualBoy.SetTheme(null, VisualBoy.ThemePriority.Low);
		this.sneaky = false;
		this.avoiding = false;
		this.bottomCollider.isTrigger = true;
		if (this.state == GateAvoid.State.Close)
		{
			this.audioChangeToOpenEvent.PostFast();
		}
		else
		{
			if (this.state != GateAvoid.State.Closed)
			{
				return;
			}
			this.audioStartOpenEvent.PostFast();
		}
		this.state = GateAvoid.State.Open;
	}

	// Token: 0x06000C92 RID: 3218 RVA: 0x00079584 File Offset: 0x00077784
	private void OpenState()
	{
		Vector3 vector = Vector3.MoveTowards(this.gate.position, this.posOpen.position, Time.deltaTime * this.openSpeed);
		this.gate.MovePosition(vector);
		float num = Vector3.Distance(this.gate.position, this.posOpen.position);
		if (num <= 0f)
		{
			this.audioOpenedEvent.PostFast();
			this.state = GateAvoid.State.Opened;
		}
	}

	// Token: 0x06000C93 RID: 3219 RVA: 0x00079600 File Offset: 0x00077800
	private void OpenedState()
	{
	}

	// Token: 0x06000C94 RID: 3220 RVA: 0x00079604 File Offset: 0x00077804
	private void SetCloseState()
	{
		if (this.state == GateAvoid.State.Open)
		{
			this.audioChangeToCloseEvent.PostFast();
		}
		else
		{
			if (this.state != GateAvoid.State.Opened)
			{
				return;
			}
			this.audioStartCloseEvent.PostFast();
		}
		this.state = GateAvoid.State.Close;
	}

	// Token: 0x06000C95 RID: 3221 RVA: 0x00079654 File Offset: 0x00077854
	private void CloseState()
	{
		Vector3 pos = this.boy.pos3;
		Vector3 vector = this.crushPos.position - pos;
		vector.z = 0f;
		float magnitude = vector.magnitude;
		Vector3 vector2 = Vector3.MoveTowards(this.gate.position, this.posClose.position, Time.deltaTime * this.closeSpeed);
		this.gate.MovePosition(vector2);
		float num = Vector3.Distance(this.gate.position, this.posClose.position);
		if (this.setTheme)
		{
			if (this.sneaky && magnitude > 3.75f)
			{
				this.boy.visualBoy.SetTheme(null, VisualBoy.ThemePriority.Low);
				this.sneaky = false;
			}
			else if (!this.sneaky && num < 2f && magnitude < 3f)
			{
				this.boy.visualBoy.SetTheme(this.sneakyTheme, VisualBoy.ThemePriority.Low);
				this.sneaky = true;
			}
		}
		if (!this.avoiding && magnitude < this.boyAvoidDist && !(this.boy.state is BoyJumpState) && !(this.boy.state is BoyGrabPlateauState))
		{
			if (num < this.doorCrushDist)
			{
				this.SetCrushState();
			}
			else if (num < this.doorAvoidDist)
			{
				this.Avoid();
			}
		}
		if ((num < this.doorAvoidDist && pos.x > this.crushPos.position.x && magnitude > this.boyAvoidDist) || num < this.doorMinCrushDist)
		{
			this.bottomCollider.isTrigger = false;
		}
		if (num <= 0f)
		{
			this.audioClosedEvent.PostFast();
			this.doneClosing.Signal();
			this.state = GateAvoid.State.Closed;
		}
	}

	// Token: 0x06000C96 RID: 3222 RVA: 0x00079854 File Offset: 0x00077A54
	private void ClosedState()
	{
	}

	// Token: 0x06000C97 RID: 3223 RVA: 0x00079858 File Offset: 0x00077A58
	private void Avoid()
	{
		if (this.avoiding)
		{
			return;
		}
		this.bottomCollider.isTrigger = false;
		this.avoiding = true;
		BoyUtils.StartCustomAnim(this.boy, this.animAvoid, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
	}

	// Token: 0x06000C98 RID: 3224 RVA: 0x000798A0 File Offset: 0x00077AA0
	private void SetCrushState()
	{
		RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.Spike, 0.6f, 0.5f, 0, 0.55f);
		this.crushed.Signal();
		BoyUtils.StartCustomAnim(this.boy, this.animCrushed, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
		this.deathTimer = this.deathDelay;
		this.state = GateAvoid.State.Crush;
	}

	// Token: 0x06000C99 RID: 3225 RVA: 0x00079900 File Offset: 0x00077B00
	private void CrushState()
	{
		Vector3 position = this.posClose.position;
		position.y += this.doorCrushStopOffset;
		Vector3 vector = Vector3.MoveTowards(this.gate.position, position, Time.deltaTime * this.closeSpeed);
		this.gate.MovePosition(vector);
		if (this.deathTimer > 0f)
		{
			this.deathTimer -= Time.deltaTime;
			if (this.deathTimer < 0f)
			{
				this.audioBoyCrushEvent.PostFast();
				this.boy.Kill(false);
			}
		}
	}

	// Token: 0x06000C9A RID: 3226 RVA: 0x000799A4 File Offset: 0x00077BA4
	private void FixedUpdate()
	{
		switch (this.state)
		{
		case GateAvoid.State.Open:
			this.OpenState();
			break;
		case GateAvoid.State.Close:
			this.CloseState();
			break;
		case GateAvoid.State.Opened:
			this.OpenedState();
			break;
		case GateAvoid.State.Closed:
			this.ClosedState();
			break;
		case GateAvoid.State.Crush:
			this.CrushState();
			break;
		}
	}

	// Token: 0x06000C9B RID: 3227 RVA: 0x00079A10 File Offset: 0x00077C10
	private void OnLoadOpen()
	{
		this.gate.position = this.posOpen.position;
	}

	// Token: 0x06000C9C RID: 3228 RVA: 0x00079A28 File Offset: 0x00077C28
	private void OnLoadClosed()
	{
		this.gate.position = this.posClose.position;
	}

	// Token: 0x040015D1 RID: 5585
	public Rigidbody gate;

	// Token: 0x040015D2 RID: 5586
	public Transform posOpen;

	// Token: 0x040015D3 RID: 5587
	public Transform posClose;

	// Token: 0x040015D4 RID: 5588
	public float openSpeed = 1f;

	// Token: 0x040015D5 RID: 5589
	public float closeSpeed = 1f;

	// Token: 0x040015D6 RID: 5590
	public AnimClipNode animAvoid;

	// Token: 0x040015D7 RID: 5591
	public AnimClipNode animCrushed;

	// Token: 0x040015D8 RID: 5592
	public bool setTheme;

	// Token: 0x040015D9 RID: 5593
	public Transform crushPos;

	// Token: 0x040015DA RID: 5594
	public Collider bottomCollider;

	// Token: 0x040015DB RID: 5595
	public float doorAvoidDist = 1.4f;

	// Token: 0x040015DC RID: 5596
	public float doorCrushDist = 1.2f;

	// Token: 0x040015DD RID: 5597
	public float doorMinCrushDist = 0.7f;

	// Token: 0x040015DE RID: 5598
	public float boyAvoidDist = 0.35f;

	// Token: 0x040015DF RID: 5599
	public float doorCrushStopOffset = 0.12f;

	// Token: 0x040015E0 RID: 5600
	public float deathDelay = 3f;

	// Token: 0x040015E1 RID: 5601
	public string audioPrefix = string.Empty;

	// Token: 0x040015E2 RID: 5602
	private SignalIn close;

	// Token: 0x040015E3 RID: 5603
	private SignalIn open;

	// Token: 0x040015E4 RID: 5604
	private SignalIn loadClosed;

	// Token: 0x040015E5 RID: 5605
	private SignalIn loadOpen;

	// Token: 0x040015E6 RID: 5606
	private SignalOut crushed;

	// Token: 0x040015E7 RID: 5607
	private SignalOut doneClosing;

	// Token: 0x040015E8 RID: 5608
	private GateAvoid.State state;

	// Token: 0x040015E9 RID: 5609
	private Vector3 currentTarget;

	// Token: 0x040015EA RID: 5610
	private Boy boy;

	// Token: 0x040015EB RID: 5611
	private Transform sneakyTheme;

	// Token: 0x040015EC RID: 5612
	private bool sneaky;

	// Token: 0x040015ED RID: 5613
	private bool avoiding;

	// Token: 0x040015EE RID: 5614
	private float deathTimer;

	// Token: 0x040015EF RID: 5615
	[HideInInspector]
	[SerializeField]
	private bool preProcessed;

	// Token: 0x040015F0 RID: 5616
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioStartOpenEvent;

	// Token: 0x040015F1 RID: 5617
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioStartCloseEvent;

	// Token: 0x040015F2 RID: 5618
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioClosedEvent;

	// Token: 0x040015F3 RID: 5619
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioOpenedEvent;

	// Token: 0x040015F4 RID: 5620
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioChangeToCloseEvent;

	// Token: 0x040015F5 RID: 5621
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioChangeToOpenEvent;

	// Token: 0x040015F6 RID: 5622
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioBoyCrushEvent;

	// Token: 0x020001AD RID: 429
	private enum State
	{
		// Token: 0x040015F8 RID: 5624
		None,
		// Token: 0x040015F9 RID: 5625
		Open,
		// Token: 0x040015FA RID: 5626
		Close,
		// Token: 0x040015FB RID: 5627
		Opened,
		// Token: 0x040015FC RID: 5628
		Closed,
		// Token: 0x040015FD RID: 5629
		Crush
	}
}