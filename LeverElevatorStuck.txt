using System;
using UnityEngine;

// Token: 0x020004CB RID: 1227
public class LeverElevatorStuck : Device, IPreAwake
{
	// Token: 0x0600201D RID: 8221 RVA: 0x001103B4 File Offset: 0x0010E5B4
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(base.gameObject, this);
		this.audioGrab = new AudioEventSimpleLocal(this.audioPrefix + "_lever_grab", akGameObj);
		this.audioRelease = new AudioEventSimpleLocal(this.audioPrefix + "_lever_release", akGameObj);
		this.audioAttemptUp = new AudioEventSimpleLocal(this.audioPrefix + "_lever_attemptUp", akGameObj);
		this.audioAttemptDown = new AudioEventSimpleLocal(this.audioPrefix + "_lever_attemptDown", akGameObj);
	}

	// Token: 0x0600201E RID: 8222 RVA: 0x00110454 File Offset: 0x0010E654
	public bool PreAwake(int callcount)
	{
		if (this.activateLever)
		{
			this.activateLever.SetDisable(true);
		}
		this.unstuck = SignalIn.Create("unstuck", base.gameObject, new Action(this.OnUnstuck));
		this.getStuck = SignalIn.Create("getStuck", base.gameObject, new Action(this.OnGetStuck));
		return true;
	}

	// Token: 0x0600201F RID: 8223 RVA: 0x001104C4 File Offset: 0x0010E6C4
	protected override void Start()
	{
		this.OnPreProcess();
		base.Start();
		this.SetIdleState();
	}

	// Token: 0x06002020 RID: 8224 RVA: 0x001104D8 File Offset: 0x0010E6D8
	private void SetIdleState()
	{
		this.grabTimer = this.grabDelay;
		this.state = LeverElevatorStuck.State.Idle;
	}

	// Token: 0x06002021 RID: 8225 RVA: 0x001104F0 File Offset: 0x0010E6F0
	private void IdleState()
	{
		if (this.verticalReleaseTimer > 0f)
		{
			this.verticalReleaseTimer -= Time.deltaTime;
		}
		if (this.releaseTimer > 0f)
		{
			this.releaseTimer -= Time.deltaTime;
			return;
		}
		for (int i = 0; i < this.boysInside.Count; i++)
		{
			Boy boy = this.boysInside[i];
			if (this.verticalReleaseTimer <= 0f || Mathf.Abs(boy.input.stick.x) <= 0.4f)
			{
				if (Device.GrabCheck(boy, true))
				{
					this.grabStunTimer = this.grabStunDelay;
					this.SetGrabState(boy);
				}
			}
		}
	}

	// Token: 0x06002022 RID: 8226 RVA: 0x001105C4 File Offset: 0x0010E7C4
	private void SetGrabState(Boy boy)
	{
		this.boyGrabbing = boy;
		this.grabTransition = null;
		Device.SetVoicePassive();
		if (this.boyGrabbing.pos3.x + this.boyGrabbing.facing * this.grabOffset < base.transform.position.x)
		{
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.animGrabCenter, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		}
		else
		{
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.animToGrabCenterMirror, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			this.grabTransition = this.animGrabCenter;
		}
		this.state = LeverElevatorStuck.State.Grab;
	}

	// Token: 0x06002023 RID: 8227 RVA: 0x0011066C File Offset: 0x0010E86C
	private void GrabState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
			if (this.boyGrabbing.input.jump)
			{
				this.grabStunTimer = 0f;
			}
		}
		if ((!this.boyGrabbing.input.rawAction && this.grabStunTimer <= 0f) || this.boyGrabbing.isDead)
		{
			this.Release();
			return;
		}
		if (this.grabTransition)
		{
			BoyCustomAnimState boyCustomAnimState = this.boyGrabbing.state as BoyCustomAnimState;
			if (boyCustomAnimState)
			{
				AnimClipNode animClipNode = boyCustomAnimState.anim as AnimClipNode;
				if (animClipNode.frame / animClipNode.numFrames > 0.9f)
				{
					BoyUtils.StartCustomAnim(this.boyGrabbing, this.grabTransition, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
					this.grabTransition = null;
				}
			}
		}
		if (this.grabTimer > 0f)
		{
			this.grabTimer -= Time.deltaTime;
			if (this.grabTimer <= 0f)
			{
				this.audioGrab.PostFast();
			}
		}
		else
		{
			float y = this.boyGrabbing.input.stick.y;
			if (Mathf.Abs(y) > 0.3f)
			{
				this.SetTryState(Mathf.Sign(y));
			}
		}
	}

	// Token: 0x06002024 RID: 8228 RVA: 0x001107E0 File Offset: 0x0010E9E0
	private void SetTryState(float dir)
	{
		if (dir == 1f)
		{
			this.audioAttemptUp.PostFast();
			this.currentTryAnim = this.animUp;
		}
		else
		{
			this.audioAttemptDown.PostFast();
			this.currentTryAnim = this.animDown;
		}
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.currentTryAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.tryTimer = this.tryDelay;
		Device.SetVoiceActive();
		this.state = LeverElevatorStuck.State.Try;
	}

	// Token: 0x06002025 RID: 8229 RVA: 0x00110860 File Offset: 0x0010EA60
	private void TryState()
	{
		if (!this.boyGrabbing.input.rawAction || this.boyGrabbing.isDead)
		{
			this.Release();
			return;
		}
		if (this.tryTimer > 0f)
		{
			this.tryTimer -= Time.deltaTime;
		}
		if (this.currentTryAnim && this.currentTryAnim.animFinished)
		{
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.animGrabCenter, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			Device.SetVoicePassive();
			this.currentTryAnim = null;
		}
		float y = this.boyGrabbing.input.stick.y;
		if (Mathf.Abs(y) < 0.3f && this.tryTimer < 0f)
		{
			this.SetGrabState(this.boyGrabbing);
		}
	}

	// Token: 0x06002026 RID: 8230 RVA: 0x00110948 File Offset: 0x0010EB48
	private void FixedUpdate()
	{
		switch (this.state)
		{
		case LeverElevatorStuck.State.Idle:
			this.IdleState();
			break;
		case LeverElevatorStuck.State.Grab:
			this.GrabState();
			break;
		case LeverElevatorStuck.State.Try:
			this.TryState();
			break;
		}
	}

	// Token: 0x06002027 RID: 8231 RVA: 0x00110998 File Offset: 0x0010EB98
	private void Release()
	{
		if (!ScriptGlobals.boy.isDead)
		{
			BoyUtils.ClearState(this.boyGrabbing, -1f);
		}
		Device.SetVoiceNone();
		if (this.grabTimer <= 0f)
		{
			this.audioRelease.PostFast();
		}
		this.releaseTimer = this.releaseDelay;
		this.verticalReleaseTimer = this.verticalReleaseDelay;
		this.boyGrabbing = null;
		this.SetIdleState();
	}

	// Token: 0x06002028 RID: 8232 RVA: 0x00110A0C File Offset: 0x0010EC0C
	private void OnUnstuck()
	{
		if (this.activateLever)
		{
			this.activateLever.SetDisable(false);
		}
		this.state = LeverElevatorStuck.State.None;
		base.gameObject.SetActive(false);
	}

	// Token: 0x06002029 RID: 8233 RVA: 0x00110A40 File Offset: 0x0010EC40
	private void OnGetStuck()
	{
		if (this.activateLever)
		{
			this.activateLever.SetDisable(true);
		}
		base.gameObject.SetActive(true);
		this.SetIdleState();
	}

	// Token: 0x04003B81 RID: 15233
	public AnimClipNode animGrabCenter;

	// Token: 0x04003B82 RID: 15234
	public AnimClipNode animDown;

	// Token: 0x04003B83 RID: 15235
	public AnimClipNode animUp;

	// Token: 0x04003B84 RID: 15236
	public AnimClipNode animToGrabCenterMirror;

	// Token: 0x04003B85 RID: 15237
	public float grabDelay = 0.21f;

	// Token: 0x04003B86 RID: 15238
	public Lever activateLever;

	// Token: 0x04003B87 RID: 15239
	public string audioPrefix;

	// Token: 0x04003B88 RID: 15240
	private SignalIn unstuck;

	// Token: 0x04003B89 RID: 15241
	private SignalIn getStuck;

	// Token: 0x04003B8A RID: 15242
	private LeverElevatorStuck.State state;

	// Token: 0x04003B8B RID: 15243
	private float grabTimer;

	// Token: 0x04003B8C RID: 15244
	private float releaseTimer;

	// Token: 0x04003B8D RID: 15245
	private float releaseDelay = 0.15f;

	// Token: 0x04003B8E RID: 15246
	private float grabStunTimer;

	// Token: 0x04003B8F RID: 15247
	private float grabStunDelay = 0.15f;

	// Token: 0x04003B90 RID: 15248
	private float verticalReleaseTimer;

	// Token: 0x04003B91 RID: 15249
	private float verticalReleaseDelay = 0.4f;

	// Token: 0x04003B92 RID: 15250
	private float tryTimer;

	// Token: 0x04003B93 RID: 15251
	private float tryDelay = 0.3f;

	// Token: 0x04003B94 RID: 15252
	private AnimClipNode currentTryAnim;

	// Token: 0x04003B95 RID: 15253
	private AnimClipNode grabTransition;

	// Token: 0x04003B96 RID: 15254
	private float grabOffset = 0.1f;

	// Token: 0x04003B97 RID: 15255
	[HideInInspector]
	[SerializeField]
	private bool preProcessed;

	// Token: 0x04003B98 RID: 15256
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioGrab;

	// Token: 0x04003B99 RID: 15257
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioRelease;

	// Token: 0x04003B9A RID: 15258
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioAttemptUp;

	// Token: 0x04003B9B RID: 15259
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioAttemptDown;

	// Token: 0x020004CC RID: 1228
	private enum State
	{
		// Token: 0x04003B9D RID: 15261
		None,
		// Token: 0x04003B9E RID: 15262
		Idle,
		// Token: 0x04003B9F RID: 15263
		Grab,
		// Token: 0x04003BA0 RID: 15264
		Try
	}
}
