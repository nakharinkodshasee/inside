using System;
using UnityEngine;

// Token: 0x020004A2 RID: 1186
public class SecretWaterGate : Device, IPreAwake
{
	// Token: 0x06001F07 RID: 7943 RVA: 0x001097F8 File Offset: 0x001079F8
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(this.triggerGrab.gameObject, this);
		this.audioFrameSuccess = new AudioEventSimpleLocal("env_lab_diveToLab_secretGate_frameHandle_success", akGameObj);
		AkGameObj akGameObj2 = AudioUtils.EnsureAkGameObj(this.triggerGrabB.gameObject, this);
		this.audioGateSuccess = new AudioEventSimpleLocal("env_lab_diveToLab_secretGate_gateHandle_success", akGameObj2);
	}

	// Token: 0x06001F08 RID: 7944 RVA: 0x00109860 File Offset: 0x00107A60
	public bool PreAwake(int callcount)
	{
		this.partASuccess = SignalOut.Create("partASuccess", base.gameObject);
		this.partBSuccess = SignalOut.Create("partBSuccess", base.gameObject);
		this.allSuccess = SignalOut.Create("allSuccess", base.gameObject);
		this.loadComplete = SignalIn.Create("loadComplete", base.gameObject, new Action(this.OnLoadComplete));
		return true;
	}

	// Token: 0x06001F09 RID: 7945 RVA: 0x001098D4 File Offset: 0x00107AD4
	protected override void Start()
	{
		this.OnPreProcess();
		base.Start();
		if (this.state != SecretWaterGate.State.Complete)
		{
			this.triggerGrabB.enterTrigger.Register(this, ref this.grabBTriggerEnterHandle);
			this.triggerGrabB.exitTrigger.Register(this, ref this.grabBTriggerExitHandle);
			this.animGateLeverState = this.animGate[this.animGateLever.name];
			this.animLatchesOpenAState = this.animLatches[this.animLatchesOpenA.name];
			this.SetIdleState();
		}
	}

	// Token: 0x06001F0A RID: 7946 RVA: 0x00109968 File Offset: 0x00107B68
	private void SetIdleState()
	{
		this.boyGrabbing = null;
		this.state = SecretWaterGate.State.Idle;
	}

	// Token: 0x06001F0B RID: 7947 RVA: 0x00109978 File Offset: 0x00107B78
	private void IdleState()
	{
		if (this.completeA && this.completeB && this.animGateLeverState.normalizedTime >= 1f && this.animLatchesOpenAState.time > 2f)
		{
			this.SetOpenState();
		}
		if (this.transitionTimer > 0f)
		{
			this.transitionTimer -= Time.deltaTime;
		}
		if (this.releaseTimer > 0f)
		{
			this.releaseTimer -= Time.deltaTime;
			return;
		}
		if (!this.completeA)
		{
			int i = 0;
			int count = this.boysInside.Count;
			while (i < count)
			{
				Boy boy = this.boysInside[i];
				if (Device.GrabCheck(boy, false))
				{
					if (this.headBone == null)
					{
						this.headBone = boy.visualBoy.actor.bones[boy.visualBoy.actor.GetBone("Head")].transform;
					}
					Vector3 vector = this.grabPosA.position - this.headBone.position;
					vector.z = 0f;
					float magnitude = vector.magnitude;
					if (magnitude < this.minGrabDistance)
					{
						this.SetGrabTransitionStateA(boy);
					}
				}
				i++;
			}
		}
		if (!this.completeB && this.boyInsideB && Device.GrabCheck(this.boyInsideB, false))
		{
			if (this.headBone == null)
			{
				this.headBone = this.boyInsideB.visualBoy.actor.bones[this.boyInsideB.visualBoy.actor.GetBone("Head")].transform;
			}
			Vector3 vector2 = this.grabPosB.position - this.headBone.position;
			vector2.z = 0f;
			float magnitude2 = vector2.magnitude;
			if (magnitude2 < this.minGrabDistance)
			{
				this.SetGrabTransitionStateB(this.boyInsideB);
			}
		}
	}

	// Token: 0x06001F0C RID: 7948 RVA: 0x00109BAC File Offset: 0x00107DAC
	private void SetGrabTransitionStateA(Boy boy)
	{
		this.grabTimer = this.grabDelay;
		this.grabStunTimer = this.grabStunDelay;
		this.boyGrabbing = boy;
		this.currentBlend = 0f;
		this.animBlendPartA.currentBlendValue = this.currentBlend;
		this.pullTimer = this.pullTimeA;
		if (this.transitionTimer > 0f)
		{
			this.SetGrabStateA();
			return;
		}
		float num = Vector3.Dot(this.boyGrabbing.transform.up, base.transform.up);
		this.currentGrabAnim = ((num <= 0f) ? this.animGrabAboveA : this.animGrabA);
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.currentGrabAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.state = SecretWaterGate.State.GrabTransitionA;
	}

	// Token: 0x06001F0D RID: 7949 RVA: 0x00109C7C File Offset: 0x00107E7C
	private void GrabTransitionStateA()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		if ((this.grabStunTimer <= 0f && !this.boyGrabbing.input.rawAction) || this.boyGrabbing.isDead)
		{
			if (this.currentGrabAnim.frame > 25f)
			{
				this.transitionTimer = this.transitionDelay;
			}
			this.Release();
			return;
		}
		if (this.grabTimer > 0f)
		{
			this.grabTimer -= Time.deltaTime;
			return;
		}
		if (this.currentGrabAnim.frame >= this.currentGrabAnim.numFrames || this.pullDir != 0)
		{
			this.SetGrabStateA();
		}
	}

	// Token: 0x06001F0E RID: 7950 RVA: 0x00109D58 File Offset: 0x00107F58
	private void SetGrabStateA()
	{
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animBlendPartA, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.transitionTimer = this.transitionDelay;
		this.state = SecretWaterGate.State.GrabA;
	}

	// Token: 0x06001F0F RID: 7951 RVA: 0x00109D94 File Offset: 0x00107F94
	private void GrabStateA()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		if ((this.grabStunTimer <= 0f && !this.boyGrabbing.input.rawAction) || this.boyGrabbing.isDead)
		{
			this.Release();
			return;
		}
		this.currentBlend += ((float)this.pullDir - this.currentBlend) * Time.deltaTime * 7f;
		this.animBlendPartA.currentBlendValue = this.currentBlend;
		if (this.currentBlend >= 0.95f)
		{
			this.pullTimer -= Time.deltaTime;
			if (this.pullTimer <= 0f)
			{
				BoyUtils.StartCustomAnim(this.boyGrabbing, this.animSuccessA, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.Spike, 0.2f, 0.65f, 0, 0.25f);
				this.animFrame.Play(this.animFrameOpen.name);
				this.animLatches.Play(this.animLatchesOpenAState.name);
				this.audioFrameSuccess.PostFast();
				this.partASuccess.Signal();
				this.completeA = true;
				this.SetIdleState();
			}
		}
	}

	// Token: 0x06001F10 RID: 7952 RVA: 0x00109EF0 File Offset: 0x001080F0
	private void SetGrabTransitionStateB(Boy boy)
	{
		this.grabTimer = this.grabDelay;
		this.grabStunTimer = this.grabStunDelay;
		this.boyGrabbing = boy;
		this.currentBlend = 0f;
		this.animBlendPartB.currentBlendValue = this.currentBlend;
		this.pullTimer = this.pullTimeB;
		if (this.transitionTimer > 0f)
		{
			this.SetGrabStateB();
			return;
		}
		float num = Vector3.Dot(this.boyGrabbing.transform.up, base.transform.up);
		this.currentGrabAnim = ((num <= 0f) ? this.animGrabAboveB : this.animGrabB);
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.currentGrabAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.state = SecretWaterGate.State.GrabTransitionB;
	}

	// Token: 0x06001F11 RID: 7953 RVA: 0x00109FC0 File Offset: 0x001081C0
	private void GrabTransitionStateB()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		if ((this.grabStunTimer <= 0f && !this.boyGrabbing.input.rawAction) || this.boyGrabbing.isDead)
		{
			if (this.currentGrabAnim.frame > 25f)
			{
				this.transitionTimer = this.transitionDelay;
			}
			this.Release();
			return;
		}
		if (this.grabTimer > 0f)
		{
			this.grabTimer -= Time.deltaTime;
			return;
		}
		if (this.currentGrabAnim.frame >= this.currentGrabAnim.numFrames || this.pullDir != 0)
		{
			this.SetGrabStateB();
		}
	}

	// Token: 0x06001F12 RID: 7954 RVA: 0x0010A09C File Offset: 0x0010829C
	private void SetGrabStateB()
	{
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animBlendPartB, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.transitionTimer = this.transitionDelay;
		this.state = SecretWaterGate.State.GrabB;
	}

	// Token: 0x06001F13 RID: 7955 RVA: 0x0010A0D8 File Offset: 0x001082D8
	private void GrabStateB()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		if ((this.grabStunTimer <= 0f && !this.boyGrabbing.input.rawAction) || this.boyGrabbing.isDead)
		{
			this.Release();
			return;
		}
		this.currentBlend += ((float)this.pullDir - this.currentBlend) * Time.deltaTime * 7f;
		this.animBlendPartB.currentBlendValue = this.currentBlend;
		if (this.currentBlend >= 0.95f)
		{
			this.pullTimer -= Time.deltaTime;
			if (this.pullTimer <= 0f)
			{
				BoyUtils.StartCustomAnim(this.boyGrabbing, this.animSuccessB, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.Spike, 0.25f, 0.45f, 0, 0f);
				this.animGate.Play(this.animGateLeverState.name);
				this.completeB = true;
				this.partBSuccess.Signal();
				this.audioGateSuccess.PostFast();
				this.SetIdleState();
			}
		}
	}

	// Token: 0x06001F14 RID: 7956 RVA: 0x0010A21C File Offset: 0x0010841C
	private void SetOpenState()
	{
		this.animGate.Play(this.animGateOpen.name);
		this.animLatches.CrossFade(this.animLatchesOpenB.name, 0.3f);
		this.allSuccess.Signal();
		this.state = SecretWaterGate.State.Complete;
	}

	// Token: 0x06001F15 RID: 7957 RVA: 0x0010A270 File Offset: 0x00108470
	private void FixedUpdate()
	{
		if (this.state != SecretWaterGate.State.None)
		{
			if (this.boyGrabbing)
			{
				this.pullDir = this.GetPullDir();
			}
			switch (this.state)
			{
			case SecretWaterGate.State.Idle:
				this.IdleState();
				break;
			case SecretWaterGate.State.GrabA:
				this.GrabStateA();
				break;
			case SecretWaterGate.State.GrabB:
				this.GrabStateB();
				break;
			case SecretWaterGate.State.GrabTransitionA:
				this.GrabTransitionStateA();
				break;
			case SecretWaterGate.State.GrabTransitionB:
				this.GrabTransitionStateB();
				break;
			}
		}
	}

	// Token: 0x06001F16 RID: 7958 RVA: 0x0010A304 File Offset: 0x00108504
	private int GetPullDir()
	{
		vector2f stick = this.boyGrabbing.input.stick;
		if (stick.magnitude > 0.5f)
		{
			Vector3 zero = Vector3Fast.zero;
			zero.x = stick.x;
			zero.y = stick.y;
			float num = Vector3.Dot(zero, (!this.boyInsideB) ? this.pullTransformA.right : this.pullTransformB.right);
			if (num > this.pullAngle)
			{
				return 1;
			}
			if (num < this.pullAngle)
			{
				return -1;
			}
		}
		return 0;
	}

	// Token: 0x06001F17 RID: 7959 RVA: 0x0010A3A4 File Offset: 0x001085A4
	public override void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		base.OnFastEventEx(sender, ref collider);
		if (sender == this.triggerGrabB.enterTrigger)
		{
			this.TriggerEnterPartB(collider);
		}
		else if (sender == this.triggerGrabB.exitTrigger)
		{
			this.TriggerExitPartB(collider);
		}
	}

	// Token: 0x06001F18 RID: 7960 RVA: 0x0010A3F0 File Offset: 0x001085F0
	private void TriggerEnterPartB(Collider collider)
	{
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component)
		{
			this.boyInsideB = component.boy;
		}
	}

	// Token: 0x06001F19 RID: 7961 RVA: 0x0010A41C File Offset: 0x0010861C
	private void TriggerExitPartB(Collider collider)
	{
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component)
		{
			this.boyInsideB = null;
		}
	}

	// Token: 0x06001F1A RID: 7962 RVA: 0x0010A444 File Offset: 0x00108644
	private void Release()
	{
		if (!this.boyGrabbing.isDead)
		{
			BoyUtils.ClearState(this.boyGrabbing, 0.35f);
		}
		this.releaseTimer = this.releaseDelay;
		this.SetIdleState();
	}

	// Token: 0x06001F1B RID: 7963 RVA: 0x0010A484 File Offset: 0x00108684
	private void OnLoadComplete()
	{
		AnimationState animationState = this.animFrame[this.animFrameOpen.name];
		this.animFrame.Play(animationState.name);
		animationState.normalizedTime = 1f;
		AnimationState animationState2 = this.animGate[this.animGateOpen.name];
		this.animGate.Play(animationState2.name);
		animationState2.normalizedTime = 1f;
		AnimationState animationState3 = this.animLatches[this.animLatchesOpenB.name];
		this.animLatches.Play(this.animLatchesOpenB.name);
		animationState3.normalizedTime = 1f;
		this.state = SecretWaterGate.State.Complete;
	}

	// Token: 0x06001F1C RID: 7964 RVA: 0x0010A53C File Offset: 0x0010873C
	public void OnDrawGizmos()
	{
		if (this.debug && EditorMode.DebugLayerActive(EditorMode.EDebugLayers.Gameplay))
		{
			Boy boy = ScriptGlobals.boy;
			if (this.grabPosB)
			{
				float num = 0f;
				if (Application.isPlaying)
				{
					if (this.headBone == null)
					{
						this.headBone = boy.visualBoy.actor.bones[boy.visualBoy.actor.GetBone("Head")].transform;
					}
					Vector3 vector = this.grabPosB.position - this.headBone.position;
					vector.z = 0f;
					num = vector.magnitude;
				}
				if (this.boyInsideB && num < this.minGrabDistance)
				{
					Gizmos.color = Color.green.Alpha(0.15f);
				}
				else
				{
					Gizmos.color = Color.red.Alpha(0.15f);
				}
				Gizmos.DrawSphere(this.grabPosB.position, this.minGrabDistance);
			}
			if (this.grabPosA)
			{
				float num2 = 0f;
				if (Application.isPlaying)
				{
					if (this.headBone == null)
					{
						this.headBone = boy.visualBoy.actor.bones[boy.visualBoy.actor.GetBone("Head")].transform;
					}
					Vector3 vector2 = this.grabPosA.position - this.headBone.position;
					vector2.z = 0f;
					num2 = vector2.magnitude;
				}
				if (this.boysInside.Count > 0 && num2 < this.minGrabDistance)
				{
					Gizmos.color = Color.green.Alpha(0.15f);
				}
				else
				{
					Gizmos.color = Color.red.Alpha(0.15f);
				}
				Gizmos.DrawSphere(this.grabPosA.position, this.minGrabDistance);
			}
		}
	}

	// Token: 0x04003972 RID: 14706
	public float pullAngle = 80f;

	// Token: 0x04003973 RID: 14707
	public Animation animFrame;

	// Token: 0x04003974 RID: 14708
	public AnimationClip animFrameOpen;

	// Token: 0x04003975 RID: 14709
	public Animation animGate;

	// Token: 0x04003976 RID: 14710
	public AnimationClip animGateLever;

	// Token: 0x04003977 RID: 14711
	public AnimationClip animGateOpen;

	// Token: 0x04003978 RID: 14712
	public Animation animLatches;

	// Token: 0x04003979 RID: 14713
	public float minGrabDistance = 1.1f;

	// Token: 0x0400397A RID: 14714
	[Header("--- Split A ---")]
	public Transform pullTransformA;

	// Token: 0x0400397B RID: 14715
	public Transform grabPosA;

	// Token: 0x0400397C RID: 14716
	public AnimClipNode animGrabA;

	// Token: 0x0400397D RID: 14717
	public AnimClipNode animGrabAboveA;

	// Token: 0x0400397E RID: 14718
	public AnimClipNode animSuccessA;

	// Token: 0x0400397F RID: 14719
	public AnimBlendNode animBlendPartA;

	// Token: 0x04003980 RID: 14720
	public float pullTimeA = 0.5f;

	// Token: 0x04003981 RID: 14721
	public AnimationClip animLatchesOpenA;

	// Token: 0x04003982 RID: 14722
	[Header("--- Lever B ---")]
	public CollisionEvents triggerGrabB;

	// Token: 0x04003983 RID: 14723
	public Transform pullTransformB;

	// Token: 0x04003984 RID: 14724
	public Transform grabPosB;

	// Token: 0x04003985 RID: 14725
	public AnimClipNode animGrabB;

	// Token: 0x04003986 RID: 14726
	public AnimClipNode animGrabAboveB;

	// Token: 0x04003987 RID: 14727
	public AnimBlendNode animBlendPartB;

	// Token: 0x04003988 RID: 14728
	public AnimClipNode animSuccessB;

	// Token: 0x04003989 RID: 14729
	public float pullTimeB = 0.5f;

	// Token: 0x0400398A RID: 14730
	public AnimationClip animLatchesOpenB;

	// Token: 0x0400398B RID: 14731
	public bool debug;

	// Token: 0x0400398C RID: 14732
	private SignalOut partASuccess;

	// Token: 0x0400398D RID: 14733
	private SignalOut partBSuccess;

	// Token: 0x0400398E RID: 14734
	private SignalOut allSuccess;

	// Token: 0x0400398F RID: 14735
	private SignalIn loadComplete;

	// Token: 0x04003990 RID: 14736
	private SecretWaterGate.State state;

	// Token: 0x04003991 RID: 14737
	private Boy boyInsideB;

	// Token: 0x04003992 RID: 14738
	private bool completeB;

	// Token: 0x04003993 RID: 14739
	private float currentBlend;

	// Token: 0x04003994 RID: 14740
	private bool completeA;

	// Token: 0x04003995 RID: 14741
	private int pullDir;

	// Token: 0x04003996 RID: 14742
	private float pullTimer;

	// Token: 0x04003997 RID: 14743
	private float grabTimer;

	// Token: 0x04003998 RID: 14744
	private float grabDelay = 0.5f;

	// Token: 0x04003999 RID: 14745
	private float releaseTimer;

	// Token: 0x0400399A RID: 14746
	private float releaseDelay = 0.15f;

	// Token: 0x0400399B RID: 14747
	private float grabStunTimer;

	// Token: 0x0400399C RID: 14748
	private float grabStunDelay = 0.3f;

	// Token: 0x0400399D RID: 14749
	private float transitionTimer;

	// Token: 0x0400399E RID: 14750
	private float transitionDelay = 0.4f;

	// Token: 0x0400399F RID: 14751
	private AnimationState animLatchesOpenAState;

	// Token: 0x040039A0 RID: 14752
	private AnimationState animGateLeverState;

	// Token: 0x040039A1 RID: 14753
	private AnimClipNode currentGrabAnim;

	// Token: 0x040039A2 RID: 14754
	private Transform headBone;

	// Token: 0x040039A3 RID: 14755
	private int grabBTriggerEnterHandle = -1;

	// Token: 0x040039A4 RID: 14756
	private int grabBTriggerExitHandle = -1;

	// Token: 0x040039A5 RID: 14757
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioFrameSuccess;

	// Token: 0x040039A6 RID: 14758
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioGateSuccess;

	// Token: 0x040039A7 RID: 14759
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x020004A3 RID: 1187
	private enum State
	{
		// Token: 0x040039A9 RID: 14761
		None,
		// Token: 0x040039AA RID: 14762
		Idle,
		// Token: 0x040039AB RID: 14763
		GrabA,
		// Token: 0x040039AC RID: 14764
		GrabB,
		// Token: 0x040039AD RID: 14765
		GrabTransitionA,
		// Token: 0x040039AE RID: 14766
		GrabTransitionB,
		// Token: 0x040039AF RID: 14767
		Complete
	}
}
