using System;
using UnityEngine;

// Token: 0x020004A5 RID: 1189
public class TankWaterZoom : MonoBehaviour, IPreAwake
{
	// Token: 0x06001F21 RID: 7969 RVA: 0x0010A834 File Offset: 0x00108A34
	public bool PreAwake(int callcount)
	{
		this.activateCamLogic = SignalIn.Create("activateCamLogic", base.gameObject, new Action(this.ActivateCamLogic));
		return true;
	}

	// Token: 0x06001F22 RID: 7970 RVA: 0x0010A85C File Offset: 0x00108A5C
	private void Start()
	{
		if (!this.startActive)
		{
			this.isActive = false;
		}
		this.cameraBox = base.GetComponent<CameraBlendBox>();
		this.startCamZoom = this.cameraBox.positionCamera.z;
		this.startPosX = this.cameraBox.positionCamera.x;
		this.startAimX = this.cameraBox.positionAim.x;
	}

	// Token: 0x06001F23 RID: 7971 RVA: 0x0010A8CC File Offset: 0x00108ACC
	private void ActivateCamLogic()
	{
		this.isActive = true;
		this.activateFraction = 0f;
	}

	// Token: 0x06001F24 RID: 7972 RVA: 0x0010A8E0 File Offset: 0x00108AE0
	private void Update()
	{
		if (!this.isActive)
		{
			return;
		}
		float num = 1f;
		if (this.useHuddleBlendIn)
		{
			float num2 = Mathf.Max(Mathf.Abs(ScriptGlobals.huddle.velocity.x), Mathf.Abs(ScriptGlobals.huddle.velocity.y));
			num = Mathf.InverseLerp(0f, 4f, num2);
		}
		this.activateFraction = Mathf.Min(1f, this.activateFraction + Time.deltaTime * num / this.blendInTime);
		Vector3 vector = this.zoomTarget.position - ScriptGlobals.boy.transform.position;
		float magnitude = vector.magnitude;
		float num3 = Mathf.InverseLerp(this.blendDistance, this.minBlendDistance, magnitude);
		vector.Normalize();
		this.cameraBox.positionCamera.z = Mathf.Lerp(this.startCamZoom, this.targetZoom, num3);
		this.cameraBox.positionCamera.x = Mathf.Lerp(this.startPosX, this.targetPosX, num3);
		this.cameraBox.positionAim.x = Mathf.Lerp(this.startAimX, this.targetAimX, num3);
		if (this.bigRoom_lookAt)
		{
			this.cameraBox.positionAim.x = Mathf.Lerp(this.startAimX, this.targetAimX, num3) + vector.x * (1f - num3) * this.bigRoom_lookAtX * this.activateFraction;
			this.cameraBox.positionAim.y = vector.y * (1f - num3) * this.bigRoom_lookAtY * this.activateFraction;
		}
	}

	// Token: 0x040039B2 RID: 14770
	public bool startActive = true;

	// Token: 0x040039B3 RID: 14771
	public float blendInTime = 3f;

	// Token: 0x040039B4 RID: 14772
	public Transform zoomTarget;

	// Token: 0x040039B5 RID: 14773
	public float targetPosX;

	// Token: 0x040039B6 RID: 14774
	public float targetAimX;

	// Token: 0x040039B7 RID: 14775
	public float targetZoom = -8.5f;

	// Token: 0x040039B8 RID: 14776
	public float blendDistance = 9f;

	// Token: 0x040039B9 RID: 14777
	public float minBlendDistance = 1f;

	// Token: 0x040039BA RID: 14778
	public bool bigRoom_lookAt;

	// Token: 0x040039BB RID: 14779
	public float bigRoom_lookAtX = 2f;

	// Token: 0x040039BC RID: 14780
	public float bigRoom_lookAtY = 3f;

	// Token: 0x040039BD RID: 14781
	public bool useHuddleBlendIn;

	// Token: 0x040039BE RID: 14782
	private bool updateActive;

	// Token: 0x040039BF RID: 14783
	private float startCamZoom;

	// Token: 0x040039C0 RID: 14784
	private float startPosX;

	// Token: 0x040039C1 RID: 14785
	private float startAimX;

	// Token: 0x040039C2 RID: 14786
	private CameraBlendBox cameraBox;

	// Token: 0x040039C3 RID: 14787
	private bool isActive = true;

	// Token: 0x040039C4 RID: 14788
	private SignalIn activateCamLogic;

	// Token: 0x040039C5 RID: 14789
	private float activateFraction = 1f;
}
