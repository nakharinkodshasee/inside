using System;
using UnityEngine;

// Token: 0x0200035B RID: 859
public class SecretFlickerManager : MonoBehaviour
{
	// Token: 0x060017AF RID: 6063 RVA: 0x000CE604 File Offset: 0x000CC804
	private void Awake()
	{
		this.ring.SetActive(false);
		this.firstPull = SignalIn.Create("firstPull", base.gameObject, new Action(this.FirstPull));
		this.completed = SignalIn.Create("completed", base.gameObject, new Action(this.Completed));
		this.matCols = new Color[this.materialInstances.Length];
		this.props = new MaterialInstance.ColorProperty[this.materialInstances.Length];
		for (int i = 0; i < this.materialInstances.Length; i++)
		{
			this.props[i] = this.materialInstances[i].GetColorProperty("_Color");
			if (this.props[i] == null)
			{
				this.props[i] = this.materialInstances[i].GetColorProperty("_MainColor");
			}
			this.matCols[i] = this.materialInstances[i].GetColorValue(this.props[i]);
		}
		this.intensities = new float[this.lights.Length];
		for (int j = 0; j < this.lights.Length; j++)
		{
			this.intensities[j] = this.lights[j].intensity;
		}
		this.flareCols = new Color[this.lensFlares.Length];
		for (int k = 0; k < this.lensFlares.Length; k++)
		{
			this.flareCols[k] = this.lensFlares[k].color;
		}
	}

	// Token: 0x060017B0 RID: 6064 RVA: 0x000CE794 File Offset: 0x000CC994
	private void FirstPull()
	{
		this.ring.SetActive(true);
		this.time = 0f;
		this.flickerState = SecretFlickerManager.CurrentFlickerState.FirstPull;
		if (this.fxFirstPull)
		{
			this.fxFirstPull.Play();
		}
	}

	// Token: 0x060017B1 RID: 6065 RVA: 0x000CE7D0 File Offset: 0x000CC9D0
	private void Completed()
	{
		this.time = 0f;
		this.flickerState = SecretFlickerManager.CurrentFlickerState.Completed;
		if (this.fxFirstPull)
		{
			this.fxFirstPull.Stop();
		}
		if (this.fxCompleted)
		{
			this.fxCompleted.Play();
		}
	}

	// Token: 0x060017B2 RID: 6066 RVA: 0x000CE828 File Offset: 0x000CCA28
	private void Update()
	{
		switch (this.flickerState)
		{
		case SecretFlickerManager.CurrentFlickerState.Idle:
			this.curBrightness = this.brightness;
			this.curFrequency = this.frequency;
			this.curFlicker = this.flicker;
			this.curFlickerShape = this.flickerShape;
			break;
		case SecretFlickerManager.CurrentFlickerState.FirstPull:
			this.curBrightness = this.firstPullState.brightness.Evaluate(this.time);
			this.curFrequency = this.firstPullState.frequency.Evaluate(this.time);
			this.curFlicker = this.firstPullState.flicker.Evaluate(this.time);
			this.curFlickerShape = this.firstPullState.flickerShape;
			break;
		case SecretFlickerManager.CurrentFlickerState.Completed:
		{
			this.curBrightness = this.completedState.brightness.Evaluate(this.time);
			this.curFrequency = this.completedState.frequency.Evaluate(this.time);
			this.curFlicker = this.completedState.flicker.Evaluate(this.time);
			this.curFlickerShape = this.completedState.flickerShape;
			int i = 0;
			int num = this.screens.Length;
			while (i < num)
			{
				if (this.time > this.screenOfftimes[i] && this.screens[i].activeSelf)
				{
					this.screens[i].SetActive(false);
				}
				i++;
			}
			break;
		}
		}
		if (this.secretWire)
		{
			float pullBlend = this.secretWire.GetPullBlend();
			this.curFlicker += pullBlend * pullBlend * this.pullFlicker;
		}
		this.seed = 0;
		this.flickerTime += Time.deltaTime / Mathf.Max(0.016666668f, this.curFrequency);
		this.time += Time.deltaTime;
		for (int j = 0; j < this.materialInstances.Length; j++)
		{
			this.materialInstances[j].SetColorProperty(this.props[j], this.matCols[j] * this.Flicker());
		}
		for (int k = 0; k < this.lights.Length; k++)
		{
			this.lights[k].intensity = this.intensities[k] * this.Flicker();
		}
		for (int l = 0; l < this.lensFlares.Length; l++)
		{
			this.lensFlares[l].color = this.flareCols[l] * this.Flicker();
		}
	}

	// Token: 0x060017B3 RID: 6067 RVA: 0x000CEAE8 File Offset: 0x000CCCE8
	private float Flicker()
	{
		this.seed++;
		return this.curBrightness * (this.curFlickerShape.Evaluate(Mathf.PerlinNoise(this.flickerTime, (float)this.seed)) * this.curFlicker + 1f - this.curFlicker);
	}

	// Token: 0x04002A38 RID: 10808
	[Range(0f, 4f)]
	public float brightness = 1f;

	// Token: 0x04002A39 RID: 10809
	[Range(0.016666668f, 0.25f)]
	public float frequency = 0.1f;

	// Token: 0x04002A3A RID: 10810
	[Range(0f, 1f)]
	public float flicker = 1f;

	// Token: 0x04002A3B RID: 10811
	[Range(0f, 1f)]
	public float pullFlicker = 0.5f;

	// Token: 0x04002A3C RID: 10812
	public ParticleSystem fxFirstPull;

	// Token: 0x04002A3D RID: 10813
	public ParticleSystem fxCompleted;

	// Token: 0x04002A3E RID: 10814
	public AnimationCurve flickerShape = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);

	// Token: 0x04002A3F RID: 10815
	public SecretFlickerManager.FlickerState firstPullState;

	// Token: 0x04002A40 RID: 10816
	public SecretFlickerManager.FlickerState completedState;

	// Token: 0x04002A41 RID: 10817
	public SecretFlickerManager.CurrentFlickerState flickerState;

	// Token: 0x04002A42 RID: 10818
	public SecretWirePull secretWire;

	// Token: 0x04002A43 RID: 10819
	public MaterialInstance[] materialInstances;

	// Token: 0x04002A44 RID: 10820
	public GameObject ring;

	// Token: 0x04002A45 RID: 10821
	public GameObject[] screens = new GameObject[0];

	// Token: 0x04002A46 RID: 10822
	public float[] screenOfftimes = new float[0];

	// Token: 0x04002A47 RID: 10823
	private MaterialInstance.ColorProperty[] props;

	// Token: 0x04002A48 RID: 10824
	private Color[] matCols;

	// Token: 0x04002A49 RID: 10825
	public Light[] lights;

	// Token: 0x04002A4A RID: 10826
	private float[] intensities;

	// Token: 0x04002A4B RID: 10827
	public LensFlareSimple[] lensFlares;

	// Token: 0x04002A4C RID: 10828
	private Color[] flareCols;

	// Token: 0x04002A4D RID: 10829
	private float time;

	// Token: 0x04002A4E RID: 10830
	private float flickerTime;

	// Token: 0x04002A4F RID: 10831
	private int seed;

	// Token: 0x04002A50 RID: 10832
	private float curBrightness = 1f;

	// Token: 0x04002A51 RID: 10833
	private float curFrequency = 0.1f;

	// Token: 0x04002A52 RID: 10834
	private float curFlicker = 1f;

	// Token: 0x04002A53 RID: 10835
	private AnimationCurve curFlickerShape = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);

	// Token: 0x04002A54 RID: 10836
	private SignalIn firstPull;

	// Token: 0x04002A55 RID: 10837
	private SignalIn completed;

	// Token: 0x0200035C RID: 860
	[Serializable]
	public class FlickerState
	{
		// Token: 0x04002A56 RID: 10838
		public AnimationCurve brightness = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);

		// Token: 0x04002A57 RID: 10839
		public AnimationCurve frequency = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);

		// Token: 0x04002A58 RID: 10840
		public AnimationCurve flicker = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);

		// Token: 0x04002A59 RID: 10841
		public AnimationCurve flickerShape = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);
	}

	// Token: 0x0200035D RID: 861
	public enum CurrentFlickerState
	{
		// Token: 0x04002A5B RID: 10843
		Idle,
		// Token: 0x04002A5C RID: 10844
		FirstPull,
		// Token: 0x04002A5D RID: 10845
		Completed
	}
}
