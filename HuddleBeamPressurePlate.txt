using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020001B4 RID: 436
public class HuddleBeamPressurePlate : MonoBehaviour, IFastEventExListener<Collider>, IPreAwake
{
	// Token: 0x06000CDC RID: 3292 RVA: 0x0007BAF8 File Offset: 0x00079CF8
	public bool PreAwake(int callcount)
	{
		this.pressed = SignalOut.Create("pressed", base.gameObject);
		this.released = SignalOut.Create("released", base.gameObject);
		return true;
	}

	// Token: 0x06000CDD RID: 3293 RVA: 0x0007BB34 File Offset: 0x00079D34
	private void Start()
	{
		this.huddleTrigger.enterTrigger.Register(this, ref this.huddleTriggerEnterHandle);
		this.huddleTrigger.exitTrigger.Register(this, ref this.huddleTriggerExitHandle);
		this.beamTrigger.enterTrigger.Register(this, ref this.beamTriggerEnterHandle);
		this.beamTrigger.exitTrigger.Register(this, ref this.beamTriggerExitHandle);
	}

	// Token: 0x06000CDE RID: 3294 RVA: 0x0007BBA0 File Offset: 0x00079DA0
	private void ReleaseCheck()
	{
		if (this.currentPressed && this.huddleProbes.Count <= 0 && !this.beamOnPressurePlate)
		{
			this.anim.Play(this.animUp.name);
			this.lightRenderer.material = this.lightOff;
			this.released.Signal();
			this.currentPressed = false;
		}
	}

	// Token: 0x06000CDF RID: 3295 RVA: 0x0007BC10 File Offset: 0x00079E10
	private void PressCheck()
	{
		if (!this.currentPressed)
		{
			this.anim.Play(this.animDown.name);
			this.lightRenderer.material = this.lightOn;
			this.pressed.Signal();
			this.currentPressed = true;
		}
	}

	// Token: 0x06000CE0 RID: 3296 RVA: 0x0007BC64 File Offset: 0x00079E64
	public void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		if (sender == this.huddleTrigger.enterTrigger)
		{
			this.HuddleTriggerEnter(collider);
		}
		else if (sender == this.huddleTrigger.exitTrigger)
		{
			this.HuddleTriggerExit(collider);
		}
		else if (sender == this.beamTrigger.enterTrigger)
		{
			this.BeamTriggerEnter(collider);
		}
		else if (sender == this.beamTrigger.exitTrigger)
		{
			this.BeamTriggerExit(collider);
		}
	}

	// Token: 0x06000CE1 RID: 3297 RVA: 0x0007BCE4 File Offset: 0x00079EE4
	private void HuddleTriggerEnter(Collider collider)
	{
		HuddleProbe component = collider.GetComponent<HuddleProbe>();
		if (component && !this.huddleProbes.Contains(component))
		{
			this.huddleProbes.Add(component);
			this.PressCheck();
		}
	}

	// Token: 0x06000CE2 RID: 3298 RVA: 0x0007BD28 File Offset: 0x00079F28
	private void HuddleTriggerExit(Collider collider)
	{
		HuddleProbe component = collider.GetComponent<HuddleProbe>();
		if (component)
		{
			this.huddleProbes.Remove(component);
			this.ReleaseCheck();
		}
	}

	// Token: 0x06000CE3 RID: 3299 RVA: 0x0007BD5C File Offset: 0x00079F5C
	private void BeamTriggerEnter(Collider collider)
	{
		if (collider == this.beamCollider)
		{
			this.beamOnPressurePlate = true;
			this.PressCheck();
		}
	}

	// Token: 0x06000CE4 RID: 3300 RVA: 0x0007BD7C File Offset: 0x00079F7C
	private void BeamTriggerExit(Collider collider)
	{
		if (collider == this.beamCollider)
		{
			this.beamOnPressurePlate = false;
			this.ReleaseCheck();
		}
	}

	// Token: 0x04001690 RID: 5776
	public CollisionEvents huddleTrigger;

	// Token: 0x04001691 RID: 5777
	public CollisionEvents beamTrigger;

	// Token: 0x04001692 RID: 5778
	public Collider beamCollider;

	// Token: 0x04001693 RID: 5779
	public Animation anim;

	// Token: 0x04001694 RID: 5780
	public AnimationClip animDown;

	// Token: 0x04001695 RID: 5781
	public AnimationClip animUp;

	// Token: 0x04001696 RID: 5782
	public MeshRenderer lightRenderer;

	// Token: 0x04001697 RID: 5783
	public Material lightOn;

	// Token: 0x04001698 RID: 5784
	public Material lightOff;

	// Token: 0x04001699 RID: 5785
	private SignalOut pressed;

	// Token: 0x0400169A RID: 5786
	private SignalOut released;

	// Token: 0x0400169B RID: 5787
	private List<HuddleProbe> huddleProbes = new List<HuddleProbe>();

	// Token: 0x0400169C RID: 5788
	private bool beamOnPressurePlate;

	// Token: 0x0400169D RID: 5789
	private bool currentPressed;

	// Token: 0x0400169E RID: 5790
	private int huddleTriggerEnterHandle = -1;

	// Token: 0x0400169F RID: 5791
	private int huddleTriggerExitHandle = -1;

	// Token: 0x040016A0 RID: 5792
	private int beamTriggerEnterHandle = -1;

	// Token: 0x040016A1 RID: 5793
	private int beamTriggerExitHandle = -1;
}
