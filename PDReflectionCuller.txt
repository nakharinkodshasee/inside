using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000349 RID: 841
[ExecuteInEditMode]
public class PDReflectionCuller : MonoBehaviour
{
	// Token: 0x1700006B RID: 107
	// (get) Token: 0x0600175D RID: 5981 RVA: 0x000CBEC8 File Offset: 0x000CA0C8
	private int NumReflections
	{
		get
		{
			return Math.Min(this.frameReflections.Count, 3);
		}
	}

	// Token: 0x0600175E RID: 5982 RVA: 0x000CBEDC File Offset: 0x000CA0DC
	public void AddReflection(PDPlanarReflection pr)
	{
		this.frameReflections.Add(pr);
	}

	// Token: 0x0600175F RID: 5983 RVA: 0x000CBEEC File Offset: 0x000CA0EC
	private void OnEnable()
	{
		Camera component = base.GetComponent<Camera>();
		PDPlanarReflection.EnsureValid(component);
	}

	// Token: 0x06001760 RID: 5984 RVA: 0x000CBF08 File Offset: 0x000CA108
	private void OnPreCull()
	{
		this.frameReflections.Clear();
	}

	// Token: 0x06001761 RID: 5985 RVA: 0x000CBF18 File Offset: 0x000CA118
	public void CharRefl_add(MaterialInstance mi, string propname)
	{
		this.CharacterReflectionMatInstances.Add(mi);
		MaterialInstance.ColorProperty orAddColorProperty = mi.GetOrAddColorProperty(propname);
		this.CharacterReflectionColors.Add(orAddColorProperty);
	}

	// Token: 0x06001762 RID: 5986 RVA: 0x000CBF48 File Offset: 0x000CA148
	public void CharRefl_remove(MaterialInstance mi, string propname)
	{
		int num = this.CharacterReflectionMatInstances.IndexOf(mi);
		if (num >= 0)
		{
			this.CharacterReflectionMatInstances.RemoveAt(num);
			this.CharacterReflectionColors.RemoveAt(num);
		}
	}

	// Token: 0x06001763 RID: 5987 RVA: 0x000CBF84 File Offset: 0x000CA184
	private static void GetNearPlaneClip(Vector4[] p, float near, ref FastList<Vector2> out_zcut)
	{
		out_zcut.Clear();
		int i = 0;
		int num = 1;
		int num2 = p.Length;
		while (i < num2)
		{
			Vector4 vector = p[i];
			Vector4 vector2 = p[num];
			if (vector.z >= near || vector2.z >= near)
			{
				if (vector.z > near && vector2.z > near)
				{
					out_zcut.Add(vector / vector.w);
				}
				else if (vector.z < near)
				{
					vector = Vector4.Lerp(vector, vector2, Mathf.InverseLerp(vector.z, vector2.z, near));
					out_zcut.Add(vector / vector.w);
				}
				else if (vector2.z < near)
				{
					vector2 = Vector4.Lerp(vector2, vector, Mathf.InverseLerp(vector2.z, vector.z, near));
					out_zcut.Add(vector / vector.w);
					out_zcut.Add(vector2 / vector2.w);
				}
			}
			i++;
			num = (num + 1) % num2;
		}
	}

	// Token: 0x06001764 RID: 5988 RVA: 0x000CC0D0 File Offset: 0x000CA2D0
	private static byte CullMask(Vector2 vec)
	{
		byte b = 0;
		if (vec.x < -1f)
		{
			b |= 1;
		}
		else if (vec.x > 1f)
		{
			b |= 2;
		}
		if (vec.y < -1f)
		{
			b |= 4;
		}
		else if (vec.y > 1f)
		{
			b |= 8;
		}
		return b;
	}

	// Token: 0x06001765 RID: 5989 RVA: 0x000CC144 File Offset: 0x000CA344
	private static void CohenSutherlandClip(FastList<Vector2> input, ref FastList<Vector2> output)
	{
		output.Clear();
		int i = 0;
		int count = input.Count;
		IL_254:
		while (i < count)
		{
			Vector3 vector = input.raw[i];
			Vector3 vector2 = input.raw[(i + 1) % count];
			byte b = PDReflectionCuller.CullMask(vector);
			byte b2 = PDReflectionCuller.CullMask(vector2);
			bool flag = false;
			bool flag2 = false;
			bool flag3 = true;
			while ((b & b2) == 0)
			{
				if ((b | b2) == 0)
				{
					IL_1E4:
					if (flag3)
					{
						if (flag && flag2)
						{
							output.Add(vector);
							output.Add(vector2);
						}
						else if (flag2)
						{
							output.Add(vector);
							output.Add(vector2);
						}
						else
						{
							output.Add(vector);
						}
					}
					i++;
					goto IL_254;
				}
				Vector2 zero = Vector2.zero;
				Vector2 vector3 = vector2 - vector;
				byte b3 = (b == 0) ? b2 : b;
				if ((b3 & 8) != 0)
				{
					zero..ctor(vector.x - vector3.x / vector3.y * (vector.y - 1f), 1f);
				}
				else if ((b3 & 4) != 0)
				{
					zero..ctor(vector.x - vector3.x / vector3.y * (vector.y + 1f), -1f);
				}
				if ((b3 & 2) != 0)
				{
					zero..ctor(1f, vector.y - vector3.y / vector3.x * (vector.x - 1f));
				}
				else if ((b3 & 1) != 0)
				{
					zero..ctor(-1f, vector.y - vector3.y / vector3.x * (vector.x + 1f));
				}
				if (b3 == b)
				{
					flag = true;
					vector = zero;
					b = PDReflectionCuller.CullMask(zero);
				}
				else
				{
					flag2 = true;
					vector2 = zero;
					b2 = PDReflectionCuller.CullMask(zero);
				}
			}
			flag3 = false;
			goto IL_1E4;
		}
	}

	// Token: 0x06001766 RID: 5990 RVA: 0x000CC3AC File Offset: 0x000CA5AC
	private static void CornerCase(FastList<Vector2> input, ref FastList<Vector2> inout_pts)
	{
		int i = 0;
		int num = PDReflectionCuller.corners.Length;
		while (i < num)
		{
			bool flag = true;
			int j = 0;
			int num2 = 1;
			int count = input.Count;
			while (j < count)
			{
				flag &= ((PDReflectionCuller.corners[i].x - input.raw[num2].x) * (input.raw[j].y - input.raw[num2].y) < (PDReflectionCuller.corners[i].y - input.raw[num2].y) * (input.raw[j].x - input.raw[num2].x));
				j++;
				num2 = (num2 + 1) % count;
			}
			if (flag)
			{
				inout_pts.Add(PDReflectionCuller.corners[i]);
			}
			i++;
		}
	}

	// Token: 0x06001767 RID: 5991 RVA: 0x000CC4B0 File Offset: 0x000CA6B0
	private static void GetClipScreenPos(Transform tf, Bounds bounds, Matrix4x4 vp, Vector3 pos, float near, ref FastList<Vector2> output)
	{
		Vector3 min = bounds.min;
		Vector3 max = bounds.max;
		Vector3 center = bounds.center;
		Vector3 up = tf.up;
		PDReflectionCuller.eMajorAxis eMajorAxis;
		if (Mathf.Abs(up.x) > 0.5f)
		{
			eMajorAxis = PDReflectionCuller.eMajorAxis.x;
		}
		else if (Mathf.Abs(up.y) > 0.5f)
		{
			eMajorAxis = PDReflectionCuller.eMajorAxis.y;
		}
		else
		{
			eMajorAxis = PDReflectionCuller.eMajorAxis.z;
		}
		switch (eMajorAxis)
		{
		case PDReflectionCuller.eMajorAxis.x:
			PDReflectionCuller.clip_verts[0] = vp * new Vector4(center.x, min.y, min.z, 1f);
			PDReflectionCuller.clip_verts[1] = vp * new Vector4(center.x, min.y, max.z, 1f);
			PDReflectionCuller.clip_verts[2] = vp * new Vector4(center.x, max.y, max.z, 1f);
			PDReflectionCuller.clip_verts[3] = vp * new Vector4(center.x, max.y, min.z, 1f);
			break;
		case PDReflectionCuller.eMajorAxis.y:
			PDReflectionCuller.clip_verts[0] = vp * new Vector4(max.x, center.y, min.z, 1f);
			PDReflectionCuller.clip_verts[1] = vp * new Vector4(max.x, center.y, max.z, 1f);
			PDReflectionCuller.clip_verts[2] = vp * new Vector4(min.x, center.y, max.z, 1f);
			PDReflectionCuller.clip_verts[3] = vp * new Vector4(min.x, center.y, min.z, 1f);
			break;
		case PDReflectionCuller.eMajorAxis.z:
			PDReflectionCuller.clip_verts[0] = vp * new Vector4(min.x, min.y, center.z, 1f);
			PDReflectionCuller.clip_verts[1] = vp * new Vector4(min.x, max.y, center.z, 1f);
			PDReflectionCuller.clip_verts[2] = vp * new Vector4(max.x, max.y, center.z, 1f);
			PDReflectionCuller.clip_verts[3] = vp * new Vector4(max.x, min.y, center.z, 1f);
			break;
		}
		if (pos[(int)eMajorAxis] > center[(int)eMajorAxis])
		{
			Vector4 vector = PDReflectionCuller.clip_verts[0];
			PDReflectionCuller.clip_verts[0] = PDReflectionCuller.clip_verts[3];
			PDReflectionCuller.clip_verts[3] = vector;
			vector = PDReflectionCuller.clip_verts[1];
			PDReflectionCuller.clip_verts[1] = PDReflectionCuller.clip_verts[2];
			PDReflectionCuller.clip_verts[2] = vector;
		}
		PDReflectionCuller.GetNearPlaneClip(PDReflectionCuller.clip_verts, near, ref PDReflectionCuller.clip_zcut);
		PDReflectionCuller.CohenSutherlandClip(PDReflectionCuller.clip_zcut, ref output);
		PDReflectionCuller.CornerCase(PDReflectionCuller.clip_zcut, ref output);
	}

	// Token: 0x06001768 RID: 5992 RVA: 0x000CC88C File Offset: 0x000CAA8C
	private static void parmsFromBounds(float left, float right, float bottom, float top, ref Vector4 out_cropVec, ref Vector4 out_cropVecTex, ref Vector2 out_cropScale)
	{
		float num = 2f / (right - left);
		float num2 = 2f / (top - bottom);
		out_cropVec.x = num;
		out_cropVec.y = num2;
		out_cropVec.z = (left + right) * num * 0.5f;
		out_cropVec.w = (bottom + top) * num2 * 0.5f;
		out_cropVecTex..ctor(num, num2, (left * 0.5f + 0.5f) * -num, (bottom * 0.5f + 0.5f) * -num2);
		float num3 = 0.5f * (right - left);
		float num4 = 0.5f * (top - bottom);
		out_cropScale..ctor(num3, num4);
	}

	// Token: 0x06001769 RID: 5993 RVA: 0x000CC928 File Offset: 0x000CAB28
	public void WarmUp(PDPlanarReflection reflect)
	{
		this.frameReflections.Add(reflect);
		this.frameReflections.Clear();
		this.group_bounds.Add(1, Vector4.zero);
		this.group_bounds.Clear();
		Vector4 vector = default(Vector4);
		Camera component = base.GetComponent<Camera>();
		PDReflectionCuller.calcBounds(component, reflect, ref vector);
		this.CharacterReflectionColors.Add(null);
		this.CharacterReflectionColors.Clear();
		this.CharacterReflectionMatInstances.Add(null);
		this.CharacterReflectionMatInstances.Clear();
		PDReflectionCuller.OnPreReflect.Dispatch();
		this.rendered_textures.Add(null);
		this.rendered_textures.Clear();
		this.rendered_group_rtidx.Add(1, 1);
		this.rendered_group_rtidx.Clear();
		RenderTexture renderTexture = null;
		bool flag = this.rendered_group_rtidx.ContainsKey(reflect.ReflectionGroupID);
		int num = -1;
		if (flag)
		{
			num = this.rendered_group_rtidx[reflect.ReflectionGroupID];
			renderTexture = this.rendered_textures.raw[num];
		}
		if (renderTexture == null)
		{
			renderTexture = reflect.UpdateReflection(component);
		}
		if (num == -1)
		{
			num = this.rendered_textures.size;
			this.rendered_textures.Add(renderTexture);
		}
		if (reflect.ReflectionGroupID != -1 && !flag)
		{
			this.rendered_group_rtidx.Add(reflect.ReflectionGroupID, num);
		}
		PDReflectionCuller.OnPostReflect.Dispatch();
	}

	// Token: 0x0600176A RID: 5994 RVA: 0x000CCA8C File Offset: 0x000CAC8C
	private static void calcBounds(Camera currentCamera, PDPlanarReflection pdpr, ref Vector4 out_bounds)
	{
		Renderer component = pdpr.GetComponent<Renderer>();
		Matrix4x4 vp = currentCamera.projectionMatrix * currentCamera.worldToCameraMatrix;
		PDReflectionCuller.GetClipScreenPos(pdpr.transform, component.bounds, vp, currentCamera.transform.position, -currentCamera.nearClipPlane, ref PDReflectionCuller.clip_output);
		float num = 1f;
		float num2 = -1f;
		float num3 = 1f;
		float num4 = -1f;
		if (PDReflectionCuller.clip_output.Count < 0)
		{
			num = -1f;
			num2 = 1f;
			num3 = -1f;
			num4 = 1f;
		}
		int i = 0;
		int count = PDReflectionCuller.clip_output.Count;
		while (i < count)
		{
			num = Mathf.Min(PDReflectionCuller.clip_output[i].x, num);
			num2 = Mathf.Max(PDReflectionCuller.clip_output[i].x, num2);
			num3 = Mathf.Min(PDReflectionCuller.clip_output[i].y, num3);
			num4 = Mathf.Max(PDReflectionCuller.clip_output[i].y, num4);
			i++;
		}
		Vector2 vector;
		vector..ctor(0.1f / currentCamera.aspect, 0.1f);
		num = Mathf.Clamp(num - vector.x, -1f, 1f);
		num2 = Mathf.Clamp(num2 + vector.x, -1f, 1f);
		num3 = Mathf.Clamp(num3 - vector.y, -1f, 1f);
		num4 = Mathf.Clamp(num4 + vector.y, -1f, 1f);
		float num5 = Mathf.Ceil((num2 - num) * 0.5f * 3f) / 3f;
		float num6 = Mathf.Ceil((num4 - num3) * 0.5f * 4f) / 4f;
		float num7 = Mathf.Clamp((num + num2) * 0.5f, num5 - 1f, 1f - num5);
		float num8 = Mathf.Clamp((num4 + num3) * 0.5f, num6 - 1f, 1f - num6);
		num = num7 - num5;
		num2 = num7 + num5;
		num3 = num8 - num6;
		num4 = num8 + num6;
		out_bounds..ctor(num, num2, num3, num4);
	}

	// Token: 0x0600176B RID: 5995 RVA: 0x000CCCD8 File Offset: 0x000CAED8
	private void combineBounds(ref Vector4 a, ref Vector4 b, ref Vector4 out_bounds)
	{
		out_bounds.x = Mathf.Min(a.x, b.x);
		out_bounds.y = Mathf.Max(a.y, b.y);
		out_bounds.z = Mathf.Min(a.z, b.z);
		out_bounds.w = Mathf.Max(a.w, b.w);
	}

	// Token: 0x0600176C RID: 5996 RVA: 0x000CCD44 File Offset: 0x000CAF44
	private int reflectionColorID()
	{
		if (this.m_reflcol_id < 0)
		{
			this.m_reflcol_id = Shader.PropertyToID("_ReflectionColor");
		}
		return this.m_reflcol_id;
	}

	// Token: 0x0600176D RID: 5997 RVA: 0x000CCD74 File Offset: 0x000CAF74
	private void OnPreRender()
	{
		Camera component = base.GetComponent<Camera>();
		PDReflectionCuller.refcmp.ws_campos = component.transform.position;
		this.frameReflections.Sort(PDReflectionCuller.refcmp);
		this.group_bounds.Clear();
		int i = 0;
		int numReflections = this.NumReflections;
		while (i < numReflections)
		{
			PDPlanarReflection pdplanarReflection = this.frameReflections[i];
			if (pdplanarReflection.ReflectionGroupID >= 0)
			{
				if (!this.group_bounds.ContainsKey(pdplanarReflection.ReflectionGroupID))
				{
					Vector4 value = default(Vector4);
					PDReflectionCuller.calcBounds(component, pdplanarReflection, ref value);
					int j = i + 1;
					int numReflections2 = this.NumReflections;
					while (j < numReflections2)
					{
						PDPlanarReflection pdplanarReflection2 = this.frameReflections[j];
						if (pdplanarReflection2.ReflectionGroupID == pdplanarReflection.ReflectionGroupID)
						{
							Vector4 vector = default(Vector4);
							PDReflectionCuller.calcBounds(component, pdplanarReflection2, ref vector);
							this.combineBounds(ref value, ref vector, ref value);
						}
						j++;
					}
					this.group_bounds.Add(pdplanarReflection.ReflectionGroupID, value);
				}
			}
			i++;
		}
		int k = 0;
		int numReflections3 = this.NumReflections;
		while (k < numReflections3)
		{
			PDPlanarReflection pdplanarReflection3 = this.frameReflections[k];
			Vector4 vector2;
			if (pdplanarReflection3.ReflectionGroupID >= 0)
			{
				int index = this.group_bounds.FindIndexOf(pdplanarReflection3.ReflectionGroupID);
				vector2 = this.group_bounds.GetValueAt(index);
			}
			else
			{
				vector2 = default(Vector4);
				PDReflectionCuller.calcBounds(component, pdplanarReflection3, ref vector2);
			}
			PDReflectionCuller.parmsFromBounds(vector2.x, vector2.y, vector2.z, vector2.w, ref pdplanarReflection3.cropVec, ref pdplanarReflection3.cropVecTex, ref pdplanarReflection3.cropScale);
			k++;
		}
		int l = 0;
		int numReflections4 = this.NumReflections;
		while (l < numReflections4)
		{
			PDPlanarReflection pdplanarReflection4 = this.frameReflections[l];
			GameObject gameObject = pdplanarReflection4.gameObject;
			int m = 0;
			int size = this.CharacterReflectionColors.size;
			while (m < size)
			{
				MaterialInstance.ColorProperty property = this.CharacterReflectionColors.raw[m];
				MaterialInstance materialInstance = this.CharacterReflectionMatInstances.raw[m];
				materialInstance.SetColorProperty(property, pdplanarReflection4.BoyReflectionColor);
				m++;
			}
			Shader.SetGlobalColor(this.reflectionColorID(), pdplanarReflection4.BoyReflectionColor);
			PDReflectionCuller.OnPreReflect.Dispatch();
			RenderTexture renderTexture = null;
			bool flag = this.rendered_group_rtidx.ContainsKey(pdplanarReflection4.ReflectionGroupID);
			int num = -1;
			if (flag)
			{
				num = this.rendered_group_rtidx[pdplanarReflection4.ReflectionGroupID];
				renderTexture = this.rendered_textures.raw[num];
			}
			if (renderTexture == null)
			{
				renderTexture = pdplanarReflection4.UpdateReflection(component);
			}
			if (num == -1)
			{
				num = this.rendered_textures.size;
				this.rendered_textures.Add(renderTexture);
			}
			if (pdplanarReflection4.ReflectionGroupID != -1 && !flag)
			{
				this.rendered_group_rtidx.Add(pdplanarReflection4.ReflectionGroupID, num);
			}
			PDReflectionCuller.OnPostReflect.Dispatch();
			pdplanarReflection4.SetShaderProperties(renderTexture);
			l++;
		}
		this.rendered_group_rtidx.Clear();
	}

	// Token: 0x0600176E RID: 5998 RVA: 0x000CD0AC File Offset: 0x000CB2AC
	private void OnPostRender()
	{
		int i = 0;
		int numReflections = this.NumReflections;
		while (i < numReflections)
		{
			PDPlanarReflection pdplanarReflection = this.frameReflections[i];
			pdplanarReflection.ClearMaterialInstanceTexRefs();
			i++;
		}
		int j = 0;
		int size = this.rendered_textures.size;
		while (j < size)
		{
			RenderTexture renderTexture = this.rendered_textures.raw[j];
			RenderTexture.ReleaseTemporary(renderTexture);
			j++;
		}
		this.rendered_textures.Clear();
	}

	// Token: 0x0600176F RID: 5999 RVA: 0x000CD128 File Offset: 0x000CB328
	private void Awake()
	{
		this.d11 = base.GetComponent<D11PDReflectionCuller>();
		if (this.d11 == null)
		{
			this.d11 = base.gameObject.AddComponent<D11PDReflectionCuller>();
		}
		this.d11.WaterFogColor = this.WaterFogColor;
		this.d11.WaterFogStart = this.WaterFogStart;
		this.d11.WaterFogEnd = this.WaterFogEnd;
		this.d11.WaterFogOverride = this.WaterFogOverride;
		this.d11.blurshader = this.blurshader;
	}

	// Token: 0x040029C5 RID: 10693
	private const int MAX_FRAME_REFLECTION_MARKERS = 16;

	// Token: 0x040029C6 RID: 10694
	public const int MAX_RENDERED_REFLECTIONS_PER_FRAME = 3;

	// Token: 0x040029C7 RID: 10695
	private const byte LEFT = 1;

	// Token: 0x040029C8 RID: 10696
	private const byte RIGHT = 2;

	// Token: 0x040029C9 RID: 10697
	private const byte BOTTOM = 4;

	// Token: 0x040029CA RID: 10698
	private const byte TOP = 8;

	// Token: 0x040029CB RID: 10699
	private const byte BOTTOMLEFT = 5;

	// Token: 0x040029CC RID: 10700
	private const byte TOPLEFT = 9;

	// Token: 0x040029CD RID: 10701
	private const byte TOPRIGHT = 10;

	// Token: 0x040029CE RID: 10702
	private const byte BOTTOMRIGHT = 6;

	// Token: 0x040029CF RID: 10703
	public Shader blurshader;

	// Token: 0x040029D0 RID: 10704
	[NonSerialized]
	public List<PDPlanarReflection> frameReflections = new List<PDPlanarReflection>(16);

	// Token: 0x040029D1 RID: 10705
	public static FastEvent OnPreReflect = new FastEvent(32);

	// Token: 0x040029D2 RID: 10706
	public static FastEvent OnPostReflect = new FastEvent(32);

	// Token: 0x040029D3 RID: 10707
	private Dictionary<int, int> rendered_group_rtidx = new Dictionary<int, int>();

	// Token: 0x040029D4 RID: 10708
	private FastList<RenderTexture> rendered_textures = new FastList<RenderTexture>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x040029D5 RID: 10709
	private static PDReflectionCuller.refComparer refcmp = new PDReflectionCuller.refComparer();

	// Token: 0x040029D6 RID: 10710
	public Color WaterFogColor = new Color(0.15294118f, 0.18431373f, 0.19215687f, 0.9607843f);

	// Token: 0x040029D7 RID: 10711
	public float WaterFogStart;

	// Token: 0x040029D8 RID: 10712
	public float WaterFogEnd = 100f;

	// Token: 0x040029D9 RID: 10713
	public float WaterFogOverride = 1f;

	// Token: 0x040029DA RID: 10714
	private FastList<MaterialInstance> CharacterReflectionMatInstances = new FastList<MaterialInstance>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x040029DB RID: 10715
	private FastList<MaterialInstance.ColorProperty> CharacterReflectionColors = new FastList<MaterialInstance.ColorProperty>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x040029DC RID: 10716
	private static Vector2[] corners = new Vector2[]
	{
		Vector2.one,
		-Vector2.one,
		new Vector2(-1f, 1f),
		new Vector2(1f, -1f)
	};

	// Token: 0x040029DD RID: 10717
	private static Vector4[] clip_verts = new Vector4[4];

	// Token: 0x040029DE RID: 10718
	private static FastList<Vector2> clip_zcut = new FastList<Vector2>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x040029DF RID: 10719
	private static FastList<Vector2> clip_output = new FastList<Vector2>(16, FastListExpandMode.Exponential, 100);

	// Token: 0x040029E0 RID: 10720
	private NoGarbageDictionary<int, Vector4> group_bounds = new NoGarbageDictionary<int, Vector4>(0, 1, true);

	// Token: 0x040029E1 RID: 10721
	private int m_reflcol_id = -1;

	// Token: 0x040029E2 RID: 10722
	[NonSerialized]
	public D11PDReflectionCuller d11;

	// Token: 0x0200034A RID: 842
	private enum eMajorAxis
	{
		// Token: 0x040029E4 RID: 10724
		x,
		// Token: 0x040029E5 RID: 10725
		y,
		// Token: 0x040029E6 RID: 10726
		z
	}

	// Token: 0x0200034B RID: 843
	private class refComparer : IComparer<PDPlanarReflection>
	{
		// Token: 0x06001771 RID: 6001 RVA: 0x000CD1C0 File Offset: 0x000CB3C0
		private static Vector3 v3max(Vector3 v, float a)
		{
			return new Vector3(Mathf.Max(v.x, a), Mathf.Max(v.y, a), Mathf.Max(v.z, a));
		}

		// Token: 0x06001772 RID: 6002 RVA: 0x000CD1FC File Offset: 0x000CB3FC
		private static Vector3 v3abs(Vector3 v)
		{
			return new Vector3(Mathf.Abs(v.x), Mathf.Abs(v.y), Mathf.Abs(v.z));
		}

		// Token: 0x06001773 RID: 6003 RVA: 0x000CD228 File Offset: 0x000CB428
		private static Vector3 ClampToRect(Vector3 os_p)
		{
			return new Vector3(Mathf.Clamp(os_p.x, -0.5f, 0.5f), 0f, Mathf.Clamp(os_p.z, -0.5f, 0.5f));
		}

		// Token: 0x06001774 RID: 6004 RVA: 0x000CD26C File Offset: 0x000CB46C
		public static Vector3 sdUnitRect_wspos(Vector3 ws_p, Transform trans)
		{
			Vector3 os_p = trans.worldToLocalMatrix.MultiplyPoint(ws_p);
			Vector3 vector = PDReflectionCuller.refComparer.ClampToRect(os_p);
			return trans.localToWorldMatrix.MultiplyPoint(vector);
		}

		// Token: 0x06001775 RID: 6005 RVA: 0x000CD2A0 File Offset: 0x000CB4A0
		public static float sdUnitRectSqr(Vector3 ws_p, Transform t)
		{
			Vector3 vector = PDReflectionCuller.refComparer.sdUnitRect_wspos(ws_p, t);
			return Vector3.SqrMagnitude(vector - ws_p);
		}

		// Token: 0x06001776 RID: 6006 RVA: 0x000CD2C4 File Offset: 0x000CB4C4
		public int Compare(PDPlanarReflection a, PDPlanarReflection b)
		{
			float num = PDReflectionCuller.refComparer.sdUnitRectSqr(this.ws_campos, a.transform);
			float num2 = PDReflectionCuller.refComparer.sdUnitRectSqr(this.ws_campos, b.transform);
			if (num < num2)
			{
				return -1;
			}
			if (num > num2)
			{
				return 1;
			}
			return 0;
		}

		// Token: 0x040029E7 RID: 10727
		public Vector3 ws_campos;
	}
}
