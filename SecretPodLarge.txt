using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000220 RID: 544
public class SecretPodLarge : Device, IPreAwake
{
	// Token: 0x060010CC RID: 4300 RVA: 0x0009EAC4 File Offset: 0x0009CCC4
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.indicators = base.GetComponentsInChildren<SecretPodLargeIndicator>(true);
		this.fadeToBlackOriginalColors = new Color[this.fadeToBlack.Length];
		this.lampOriginalColors = new Color[this.lamps.Length];
		this.lampLightsOriginalIntensity = new float[this.lampLights.Length];
		this.lampOriginalGlow = new float[this.lamps.Length];
	}

	// Token: 0x060010CD RID: 4301 RVA: 0x0009EB40 File Offset: 0x0009CD40
	public bool PreAwake(int callcount)
	{
		this.OnPreProcess();
		this.turnOffLight = SignalIn.Create("turnOffLight", base.gameObject, new Action(this.OnLightTurnOff));
		if (this.lightActive)
		{
			this.lightOriginalIntensity = this.lightActive.intensity;
		}
		if (this.lightMaterial)
		{
			this.lightMaterialProperty = this.lightMaterial.GetOrAddColorProperty("_Color");
			this.lightMaterialOriginalColor = this.lightMaterial.GetColorValue(this.lightMaterialProperty);
		}
		this.fadeToBlackProperties = new MaterialInstance.ColorProperty[this.fadeToBlack.Length];
		int i = 0;
		int num = this.fadeToBlack.Length;
		while (i < num)
		{
			MaterialInstance materialInstance = this.fadeToBlack[i];
			MaterialInstance.ColorProperty orAddColorProperty = materialInstance.GetOrAddColorProperty("_Color");
			this.fadeToBlackProperties[i] = orAddColorProperty;
			this.fadeToBlackOriginalColors[i] = materialInstance.GetColorValue(orAddColorProperty);
			i++;
		}
		this.lampColorProperties = new MaterialInstance.ColorProperty[this.lamps.Length];
		this.lampGlowProperties = new MaterialInstance.FloatProperty[this.lamps.Length];
		int j = 0;
		int num2 = this.lamps.Length;
		while (j < num2)
		{
			MaterialInstance materialInstance2 = this.lamps[j];
			MaterialInstance.ColorProperty orAddColorProperty2 = materialInstance2.GetOrAddColorProperty("_Color");
			this.lampColorProperties[j] = orAddColorProperty2;
			this.lampOriginalColors[j] = materialInstance2.GetColorValue(orAddColorProperty2);
			MaterialInstance.FloatProperty orAddFloatProperty = materialInstance2.GetOrAddFloatProperty("_GlowIntensity");
			if (orAddFloatProperty != null)
			{
				this.lampGlowProperties[j] = orAddFloatProperty;
				this.lampOriginalGlow[j] = materialInstance2.GetFloatValue(orAddFloatProperty);
			}
			j++;
		}
		int k = 0;
		int num3 = this.lampLights.Length;
		while (k < num3)
		{
			this.lampLightsOriginalIntensity[k] = this.lampLights[k].intensity;
			k++;
		}
		this.casingProperties = new MaterialInstance.ColorProperty[this.casings.Length];
		int l = 0;
		int num4 = this.casings.Length;
		while (l < num4)
		{
			this.casingProperties[l] = this.casings[l].GetOrAddColorProperty("_Illum");
			l++;
		}
		this.insideSphereProperty = this.insideSphere.GetOrAddColorProperty("_Color");
		this.insideSphereOriginalColor = this.insideSphere.GetColorValue(this.insideSphereProperty);
		return true;
	}

	// Token: 0x060010CE RID: 4302 RVA: 0x0009EDA8 File Offset: 0x0009CFA8
	protected override void Start()
	{
		this.OnPreProcess();
		base.Start();
		this.triggerCheat.enterTrigger.Register(this, ref this.cheatTriggerEnterHandle);
		this.triggerCheat.exitTrigger.Register(this, ref this.cheatTriggerExitHandle);
		bool flag = this.AcquireUpdate();
		bool flag2 = User.Achievement.IsAcquired(AchievementPlatform.EAchievements.Achievement14);
		this.allowCheat = false;
		this.testingLightFade = false;
		if (flag2 && !this.testingLightFade)
		{
			this.UpdateLight(1f);
			this.UpdateLamps(0f);
			this.unlockedVisuals.SetActive(true);
			this.lockedVisuals.SetActive(false);
			this.entranceCollider.SetActive(false);
			int i = 0;
			int num = this.indicators.Length;
			while (i < num)
			{
				this.indicators[i].LoadComplete();
				i++;
			}
			this.SetCompleteState();
		}
		else if (flag)
		{
			this.SetActiveState();
		}
		else
		{
			this.SetIdleState();
		}
	}

	// Token: 0x060010CF RID: 4303 RVA: 0x0009EEA8 File Offset: 0x0009D0A8
	public override void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		base.OnFastEventEx(sender, ref collider);
		if (sender == this.triggerCheat.enterTrigger)
		{
			this.OnCheatTriggerEnter(collider);
		}
		else if (sender == this.triggerCheat.exitTrigger)
		{
			this.OnCheatTriggerExit(collider);
		}
	}

	// Token: 0x060010D0 RID: 4304 RVA: 0x0009EEF4 File Offset: 0x0009D0F4
	private void SetIdleState()
	{
		this.checkTimer = this.checkInterval;
		this.state = SecretPodLarge.State.Idle;
	}

	// Token: 0x060010D1 RID: 4305 RVA: 0x0009EF0C File Offset: 0x0009D10C
	private void IdleState()
	{
		if (this.checkTimer > 0f)
		{
			this.checkTimer -= Time.deltaTime;
		}
		else
		{
			bool flag = this.AcquireUpdate();
			if (flag)
			{
				this.SetActiveState();
			}
			this.checkTimer = this.checkInterval;
		}
		if (this.allowCheat && CheatManager.cheatsEnabled)
		{
			if (this.testingLightFade)
			{
				if (ScriptGlobals.boy.input.rawAction)
				{
					int i = 0;
					int num = this.indicators.Length;
					while (i < num)
					{
						User.Achievement.Acquire(this.indicators[i].achievement);
						i++;
					}
				}
			}
			else if (this.boysInsideCheatTrigger.Count > 0)
			{
				BoyInput input = this.boysInsideCheatTrigger[0].input;
				if (input.rawAction)
				{
					this.activateTimer -= Time.deltaTime;
					if (this.activateTimer <= 0f)
					{
						int j = 0;
						int num2 = this.indicators.Length;
						while (j < num2)
						{
							User.Achievement.Acquire(this.indicators[j].achievement);
							j++;
						}
					}
				}
			}
		}
	}

	// Token: 0x060010D2 RID: 4306 RVA: 0x0009F054 File Offset: 0x0009D254
	private void SetActiveState()
	{
		this.unlockedVisuals.SetActive(true);
		this.lockedVisuals.SetActive(false);
		this.entranceCollider.SetActive(false);
		this.state = SecretPodLarge.State.Active;
	}

	// Token: 0x060010D3 RID: 4307 RVA: 0x0009F084 File Offset: 0x0009D284
	private void ActiveState()
	{
		Boy boy = ScriptGlobals.boy;
		if (this.boysInside.Count > 0 && !(boy.state is BoyCustomAnimState))
		{
			this.limitInput.activateScript();
			float num = this.triggerGrab.transform.position.x - boy.pos.x;
			float num2 = 1f - Mathf.Clamp01(num / 10f);
			float num3 = 1f - 0.2f * num2;
			if (GameInput.stick.x < 0f)
			{
				num3 = 1f;
			}
			this.limitInput.stickVal.x = GameInput.stick.x * num3;
			this.limitInput.stickVal.y = GameInput.stick.y * num3;
		}
		else
		{
			this.limitInput.deactivateScript();
		}
		if (this.testingLightFade && ScriptGlobals.boy.input.rawAction && this.activateTimer > 0f)
		{
			this.activateTimer -= Time.deltaTime;
			if (this.activateTimer <= 0f)
			{
				this.SetFadeOutState();
			}
		}
	}

	// Token: 0x060010D4 RID: 4308 RVA: 0x0009F1D4 File Offset: 0x0009D3D4
	private void SetFadeOutState()
	{
		int i = 0;
		int num = this.indicators.Length;
		while (i < num)
		{
			this.indicators[i].FadeOut();
			i++;
		}
		this.limitInput.deactivateScript();
		this.fadeOutTimer = 0f;
		this.lampFadeTimer = this.lampFadeDuration;
		this.state = SecretPodLarge.State.FadeOut;
	}

	// Token: 0x060010D5 RID: 4309 RVA: 0x0009F234 File Offset: 0x0009D434
	private void FadeOutState()
	{
		if (this.fadeOutTimer < this.fadeOutDuration)
		{
			this.fadeOutTimer += Time.deltaTime;
			float f = Mathf.Clamp01(this.fadeOutTimer / this.fadeOutDuration);
			this.UpdateLight(f);
		}
		this.lampFadeTimer -= Time.deltaTime;
		float num = Mathf.Clamp01(this.lampFadeTimer / this.lampFadeDuration);
		this.UpdateLamps(num);
		if (num <= 0f)
		{
			this.SetCompleteState();
		}
	}

	// Token: 0x060010D6 RID: 4310 RVA: 0x0009F2BC File Offset: 0x0009D4BC
	private void SetCompleteState()
	{
		this.state = SecretPodLarge.State.Complete;
	}

	// Token: 0x060010D7 RID: 4311 RVA: 0x0009F2C8 File Offset: 0x0009D4C8
	private void CompleteState()
	{
	}

	// Token: 0x060010D8 RID: 4312 RVA: 0x0009F2CC File Offset: 0x0009D4CC
	private void FixedUpdate()
	{
		switch (this.state)
		{
		case SecretPodLarge.State.Idle:
			this.IdleState();
			break;
		case SecretPodLarge.State.Active:
			this.ActiveState();
			break;
		case SecretPodLarge.State.FadeOut:
			this.FadeOutState();
			break;
		case SecretPodLarge.State.Complete:
			this.CompleteState();
			break;
		}
	}

	// Token: 0x060010D9 RID: 4313 RVA: 0x0009F32C File Offset: 0x0009D52C
	private void UpdateLight(float f)
	{
		float num = this.fadeOutCurve.Evaluate(f);
		if (this.lightActive)
		{
			this.lightActive.intensity = this.lightOriginalIntensity * num;
		}
		if (this.lightFadeIn)
		{
			this.lightFadeIn.intensity = this.lightFadeInIntensity * (1f - num);
		}
		if (this.lightMaterial)
		{
			Color value = this.lightMaterialOriginalColor;
			value.a *= num;
			this.lightMaterial.SetColorProperty(this.lightMaterialProperty, value);
		}
		int i = 0;
		int num2 = this.fadeToBlack.Length;
		while (i < num2)
		{
			Color value2 = Color.Lerp(this.fadeToBlackColor, this.fadeToBlackOriginalColors[i], num);
			this.fadeToBlack[i].SetColorProperty(this.fadeToBlackProperties[i], value2);
			i++;
		}
		if (this.insideSphere)
		{
			Color value3 = Color.Lerp(this.insideSphereFadeColor, this.insideSphereOriginalColor, num);
			this.insideSphere.SetColorProperty(this.insideSphereProperty, value3);
		}
	}

	// Token: 0x060010DA RID: 4314 RVA: 0x0009F454 File Offset: 0x0009D654
	private void UpdateLamps(float fraction)
	{
		Color value = this.lampFadeGradient.Evaluate(1f - fraction);
		int i = 0;
		int num = this.lamps.Length;
		while (i < num)
		{
			MaterialInstance materialInstance = this.lamps[i];
			materialInstance.SetColorProperty(this.lampColorProperties[i], value);
			MaterialInstance.FloatProperty floatProperty = this.lampGlowProperties[i];
			if (floatProperty != null)
			{
				float value2 = this.lampOriginalGlow[i] * fraction;
				materialInstance.SetFloatProperty(floatProperty, value2);
			}
			i++;
		}
		int j = 0;
		int num2 = this.lampLights.Length;
		while (j < num2)
		{
			this.lampLights[j].intensity = this.lampLightsOriginalIntensity[j] * fraction;
			j++;
		}
		Color value3 = this.casingsGradient.Evaluate(1f - fraction);
		int k = 0;
		int num3 = this.casings.Length;
		while (k < num3)
		{
			this.casings[k].SetColorProperty(this.casingProperties[k], value3);
			k++;
		}
	}

	// Token: 0x060010DB RID: 4315 RVA: 0x0009F558 File Offset: 0x0009D758
	private bool AcquireUpdate()
	{
		int num = 0;
		int i = 0;
		int num2 = this.indicators.Length;
		while (i < num2)
		{
			bool flag = this.indicators[i].UpdateAquired();
			if (flag)
			{
				num++;
			}
			i++;
		}
		return num >= this.indicators.Length;
	}

	// Token: 0x060010DC RID: 4316 RVA: 0x0009F5A8 File Offset: 0x0009D7A8
	private void OnLightTurnOff()
	{
		WristSecret.instance.Activate();
		if (this.state == SecretPodLarge.State.Active)
		{
			this.SetFadeOutState();
		}
	}

	// Token: 0x060010DD RID: 4317 RVA: 0x0009F5C8 File Offset: 0x0009D7C8
	private void OnLoadComplete()
	{
		this.SetCompleteState();
	}

	// Token: 0x060010DE RID: 4318 RVA: 0x0009F5D0 File Offset: 0x0009D7D0
	private void OnCheatTriggerEnter(Collider c)
	{
		BoyProbe component = c.GetComponent<BoyProbe>();
		if (component)
		{
			Boy boy = component.boy;
			if (!this.boysInsideCheatTrigger.Contains(boy))
			{
				this.boysInsideCheatTrigger.Add(boy);
			}
		}
	}

	// Token: 0x060010DF RID: 4319 RVA: 0x0009F614 File Offset: 0x0009D814
	private void OnCheatTriggerExit(Collider c)
	{
		BoyProbe component = c.GetComponent<BoyProbe>();
		if (component)
		{
			this.boysInsideCheatTrigger.Remove(component.boy);
		}
	}

	// Token: 0x04001E6E RID: 7790
	public CollisionEvents triggerLimitInput;

	// Token: 0x04001E6F RID: 7791
	public CollisionEvents triggerCheat;

	// Token: 0x04001E70 RID: 7792
	public GameObject unlockedVisuals;

	// Token: 0x04001E71 RID: 7793
	public GameObject lockedVisuals;

	// Token: 0x04001E72 RID: 7794
	public GameObject entranceCollider;

	// Token: 0x04001E73 RID: 7795
	public BoySetInput limitInput;

	// Token: 0x04001E74 RID: 7796
	[Header("---- Fade to Black ----")]
	public float fadeOutDuration = 3f;

	// Token: 0x04001E75 RID: 7797
	public AnimationCurve fadeOutCurve;

	// Token: 0x04001E76 RID: 7798
	public Light lightActive;

	// Token: 0x04001E77 RID: 7799
	public MaterialInstance lightMaterial;

	// Token: 0x04001E78 RID: 7800
	public MaterialInstance[] fadeToBlack;

	// Token: 0x04001E79 RID: 7801
	public Color fadeToBlackColor;

	// Token: 0x04001E7A RID: 7802
	[Header("---- Lamps ----")]
	public float lampFadeDuration = 7f;

	// Token: 0x04001E7B RID: 7803
	public MaterialInstance[] lamps;

	// Token: 0x04001E7C RID: 7804
	public Light[] lampLights;

	// Token: 0x04001E7D RID: 7805
	public Gradient lampFadeGradient;

	// Token: 0x04001E7E RID: 7806
	[Header("---- Inside Sphere ----")]
	public MaterialInstance insideSphere;

	// Token: 0x04001E7F RID: 7807
	public Color insideSphereFadeColor;

	// Token: 0x04001E80 RID: 7808
	[Header("---- Fade in light ----")]
	public Light lightFadeIn;

	// Token: 0x04001E81 RID: 7809
	public float lightFadeInIntensity = 0.2f;

	// Token: 0x04001E82 RID: 7810
	[Header("---- Casings ----")]
	public MaterialInstance[] casings;

	// Token: 0x04001E83 RID: 7811
	public Gradient casingsGradient;

	// Token: 0x04001E84 RID: 7812
	[Space(15f)]
	public bool allowCheat;

	// Token: 0x04001E85 RID: 7813
	public bool testingLightFade;

	// Token: 0x04001E86 RID: 7814
	public Mesh secretMesh;

	// Token: 0x04001E87 RID: 7815
	private SignalIn turnOffLight;

	// Token: 0x04001E88 RID: 7816
	private SecretPodLarge.State state;

	// Token: 0x04001E89 RID: 7817
	private float checkTimer;

	// Token: 0x04001E8A RID: 7818
	private float checkInterval = 1f;

	// Token: 0x04001E8B RID: 7819
	private float activateTimer = 2f;

	// Token: 0x04001E8C RID: 7820
	private float fadeOutTimer;

	// Token: 0x04001E8D RID: 7821
	private float lampFadeTimer;

	// Token: 0x04001E8E RID: 7822
	private List<Boy> boysInsideCheatTrigger = new List<Boy>();

	// Token: 0x04001E8F RID: 7823
	private float lightOriginalIntensity;

	// Token: 0x04001E90 RID: 7824
	private Color lightMaterialOriginalColor;

	// Token: 0x04001E91 RID: 7825
	private MaterialInstance.ColorProperty lightMaterialProperty;

	// Token: 0x04001E92 RID: 7826
	private Color insideSphereOriginalColor;

	// Token: 0x04001E93 RID: 7827
	private MaterialInstance.ColorProperty insideSphereProperty;

	// Token: 0x04001E94 RID: 7828
	private int cheatTriggerEnterHandle = -1;

	// Token: 0x04001E95 RID: 7829
	private int cheatTriggerExitHandle = -1;

	// Token: 0x04001E96 RID: 7830
	private MaterialInstance.ColorProperty[] fadeToBlackProperties;

	// Token: 0x04001E97 RID: 7831
	private MaterialInstance.ColorProperty[] lampColorProperties;

	// Token: 0x04001E98 RID: 7832
	private MaterialInstance.ColorProperty[] casingProperties;

	// Token: 0x04001E99 RID: 7833
	private MaterialInstance.FloatProperty[] lampGlowProperties;

	// Token: 0x04001E9A RID: 7834
	[SerializeField]
	[HideInInspector]
	private Color[] fadeToBlackOriginalColors;

	// Token: 0x04001E9B RID: 7835
	[HideInInspector]
	[SerializeField]
	private Color[] lampOriginalColors;

	// Token: 0x04001E9C RID: 7836
	[SerializeField]
	[HideInInspector]
	private float[] lampLightsOriginalIntensity;

	// Token: 0x04001E9D RID: 7837
	[HideInInspector]
	[SerializeField]
	private float[] lampOriginalGlow;

	// Token: 0x04001E9E RID: 7838
	[HideInInspector]
	[SerializeField]
	private SecretPodLargeIndicator[] indicators;

	// Token: 0x04001E9F RID: 7839
	[HideInInspector]
	[SerializeField]
	private bool preProcessed;

	// Token: 0x02000221 RID: 545
	private enum State
	{
		// Token: 0x04001EA1 RID: 7841
		None,
		// Token: 0x04001EA2 RID: 7842
		Idle,
		// Token: 0x04001EA3 RID: 7843
		Active,
		// Token: 0x04001EA4 RID: 7844
		FadeOut,
		// Token: 0x04001EA5 RID: 7845
		Complete
	}
}
