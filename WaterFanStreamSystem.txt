using System;
using HutongGames.PlayMaker;
using UnityEngine;

// Token: 0x0200051B RID: 1307
public class WaterFanStreamSystem : MonoBehaviour, IPreAwake
{
	// Token: 0x0600221B RID: 8731 RVA: 0x0011D930 File Offset: 0x0011BB30
	public bool PreAwake(int callcount)
	{
		this.turnFanOn = SignalIn.Create("turnFanOn", base.gameObject, new Action(this.OnTurnFanOn));
		this.turnFanOff = SignalIn.Create("turnFanOff", base.gameObject, new Action(this.OnTurnFanOff));
		return true;
	}

	// Token: 0x0600221C RID: 8732 RVA: 0x0011D984 File Offset: 0x0011BB84
	private void OnEnable()
	{
		this.rumbleStream.SetRumble(0f, 0f);
		RumbleManager.instance.AddSource(this.rumbleStream);
	}

	// Token: 0x0600221D RID: 8733 RVA: 0x0011D9AC File Offset: 0x0011BBAC
	private void OnDisable()
	{
		RumbleManager.instance.RemoveSource(this.rumbleStream.Name);
	}

	// Token: 0x0600221E RID: 8734 RVA: 0x0011D9C4 File Offset: 0x0011BBC4
	private void OnDestroy()
	{
		RumbleManager.instance.RemoveSource(this.rumbleStream.Name);
	}

	// Token: 0x0600221F RID: 8735 RVA: 0x0011D9DC File Offset: 0x0011BBDC
	public bool GetIsOn()
	{
		return this.isOn;
	}

	// Token: 0x06002220 RID: 8736 RVA: 0x0011D9E4 File Offset: 0x0011BBE4
	private void OnTurnFanOn()
	{
		this.isOn = true;
		if (this.onFraction < 0.5f)
		{
			this.onFraction_whenTurnedOn = this.onFraction;
			this.onFraction = 0f;
		}
		else
		{
			this.onFraction_whenTurnedOn = 0f;
		}
	}

	// Token: 0x06002221 RID: 8737 RVA: 0x0011DA30 File Offset: 0x0011BC30
	private void OnTurnFanOff()
	{
		this.isOn = false;
	}

	// Token: 0x06002222 RID: 8738 RVA: 0x0011DA3C File Offset: 0x0011BC3C
	private float GetVISUALOnFraction()
	{
		return this.onFraction_whenTurnedOn + (1f - this.onFraction_whenTurnedOn) * this.onFraction;
	}

	// Token: 0x06002223 RID: 8739 RVA: 0x0011DA58 File Offset: 0x0011BC58
	private void Update()
	{
		float num = this.spinSpeed * 0.017453292f * 360f * this.fanAnimateSpeedCurve.Evaluate(this.GetVISUALOnFraction()) * Time.deltaTime * 60f;
		this.fanGfx.Rotate(Vector3.up, num);
	}

	// Token: 0x06002224 RID: 8740 RVA: 0x0011DAA8 File Offset: 0x0011BCA8
	private void FixedUpdate()
	{
		if (this.isOn)
		{
			this.onFraction = Mathf.MoveTowards(this.onFraction, 1f, 1f / this.timeToSpinUp * Time.deltaTime);
		}
		else
		{
			this.onFraction = Mathf.MoveTowards(this.onFraction, 0f, 1f / this.timeToSpinDown * Time.deltaTime);
		}
		float num = Mathf.InverseLerp(this.topPos.position.y, this.bottomPos.position.y, ScriptGlobals.boy.transform.position.y);
		float num2 = Mathf.Abs(ScriptGlobals.boy.transform.position.x - this.leverPos.position.x);
		float num3 = Mathf.Abs(ScriptGlobals.boy.transform.position.y - this.leverPos.position.y);
		if (this.fsm)
		{
			FsmFloat fsmFloat = this.fsm.Fsm.GetFsmFloat("spin");
			fsmFloat.Value = this.fxFsmValueCurve.Evaluate(this.GetVISUALOnFraction());
		}
		if (this.fx)
		{
			this.fx.spin = this.GetVISUALOnFraction();
		}
		float num4 = 1f;
		if (num3 < 2f && num2 < 1.5f && this.onFraction < 0.8f)
		{
			num4 = 0.825f;
			if (num3 < 1f && num2 < 1.5f && this.onFraction < 0.9f && ScriptGlobals.boy.input.rawAction)
			{
				num4 = 0.725f;
			}
		}
		float num5 = this.streamStrengthCurve.Evaluate(this.onFraction);
		float num6 = Mathf.InverseLerp(8f, 2.75f, num2);
		float num7 = 0f;
		if (ScriptGlobals.boy.transform.position.y < this.bottomPos.position.y + 1f)
		{
			num7 = Mathf.Abs(ScriptGlobals.boy.transform.position.y - (this.bottomPos.position.y + 1f)) * Mathf.InverseLerp(0.9f, 1f, this.onFraction) * 2f;
			num7 *= num6;
		}
		Vector3 strength = Vector3.up * num5 * this.streamStrength * num * (1f + 0.25f * (float)Math.Sin(Time.timeDbl * 3.5)) * this.onFraction * num4 * num6 + Vector3.up * num7;
		this.waterStream.strength = strength;
		float num8 = Mathf.Clamp01((strength.magnitude - 1.5f) / 2f);
		if (this.suctionLever.BoyHolding())
		{
			this.rumbleStream.SetRumble(num8 * this.rumblePowerGrabLeft, num8 * this.rumblePowerGrabRight);
		}
		else
		{
			this.rumbleStream.SetRumble(num8 * this.rumblePowerFreeLeft, num8 * this.rumblePowerFreeRight);
		}
		float num9 = 1f;
		if (ScriptGlobals.boy.transform.position.x < base.transform.position.x)
		{
			num9 = -1f;
		}
		float num10 = Mathf.InverseLerp(10f, 1f, Mathf.Abs(ScriptGlobals.boy.transform.position.y - this.waterSurfacePos.position.y));
		num10 *= Mathf.InverseLerp(10f, 0f, Mathf.Abs(ScriptGlobals.boy.transform.position.x - this.waterSurfacePos.position.x));
		this.surfaceStream.strength = Vector3.left * this.onFraction * num9 * this.surfaceStreamStrength * num10;
	}

	// Token: 0x04003FA6 RID: 16294
	public SuctionLever suctionLever;

	// Token: 0x04003FA7 RID: 16295
	public float timeToSpinUp = 4f;

	// Token: 0x04003FA8 RID: 16296
	public float timeToSpinDown = 4f;

	// Token: 0x04003FA9 RID: 16297
	public float spinSpeed = 1f;

	// Token: 0x04003FAA RID: 16298
	public Transform fanGfx;

	// Token: 0x04003FAB RID: 16299
	public WaterStream waterStream;

	// Token: 0x04003FAC RID: 16300
	public Transform topPos;

	// Token: 0x04003FAD RID: 16301
	public Transform bottomPos;

	// Token: 0x04003FAE RID: 16302
	public AnimationCurve streamStrengthCurve;

	// Token: 0x04003FAF RID: 16303
	public AnimationCurve fanAnimateSpeedCurve;

	// Token: 0x04003FB0 RID: 16304
	public AnimationCurve fxFsmValueCurve;

	// Token: 0x04003FB1 RID: 16305
	public float streamStrength = 1.75f;

	// Token: 0x04003FB2 RID: 16306
	public Transform leverPos;

	// Token: 0x04003FB3 RID: 16307
	public PlayMakerFSM fsm;

	// Token: 0x04003FB4 RID: 16308
	public WaterFanStreamFX fx;

	// Token: 0x04003FB5 RID: 16309
	public WaterStream surfaceStream;

	// Token: 0x04003FB6 RID: 16310
	public Transform waterSurfacePos;

	// Token: 0x04003FB7 RID: 16311
	public float surfaceStreamStrength = 0.75f;

	// Token: 0x04003FB8 RID: 16312
	public float rumblePowerFreeRight = 0.2f;

	// Token: 0x04003FB9 RID: 16313
	public float rumblePowerFreeLeft = 0.2f;

	// Token: 0x04003FBA RID: 16314
	public float rumblePowerGrabRight = 0.4f;

	// Token: 0x04003FBB RID: 16315
	public float rumblePowerGrabLeft = 0.4f;

	// Token: 0x04003FBC RID: 16316
	private SignalIn turnFanOn;

	// Token: 0x04003FBD RID: 16317
	private SignalIn turnFanOff;

	// Token: 0x04003FBE RID: 16318
	private ModifiableRumbleSource rumbleStream = new ModifiableRumbleSource("WaterFanStreamSystem", false, 0f, null, default(Vector3));

	// Token: 0x04003FBF RID: 16319
	private bool isOn = true;

	// Token: 0x04003FC0 RID: 16320
	private float onFraction = 1f;

	// Token: 0x04003FC1 RID: 16321
	private float onFraction_whenTurnedOn;
}