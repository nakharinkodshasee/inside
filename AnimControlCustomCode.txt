using System;
using ABHelper;
using UnityEngine;

// Token: 0x02000026 RID: 38
public class AnimControlCustomCode : MonoBehaviour
{
	// Token: 0x0600015C RID: 348 RVA: 0x00014C04 File Offset: 0x00012E04
	public virtual AnimcontrolledCharacter.CustomTransitionFunction GetCustomTransitFunction(string definitionName)
	{
		return null;
	}

	// Token: 0x0600015D RID: 349 RVA: 0x00014C08 File Offset: 0x00012E08
	public virtual AnimcontrolledCharacter.CustomPositioningFunction GetCustomPositioningFunction(string definitionName)
	{
		return null;
	}

	// Token: 0x0600015E RID: 350 RVA: 0x00014C0C File Offset: 0x00012E0C
	public virtual AnimcontrolledCharacter.CustomStaticPositionFunction GetCustomStaticPositionFunction(string definitionName)
	{
		return null;
	}

	// Token: 0x0600015F RID: 351 RVA: 0x00014C10 File Offset: 0x00012E10
	public virtual void NewWaypointSet(BaseWaypoint wayPoint)
	{
	}

	// Token: 0x06000160 RID: 352 RVA: 0x00014C14 File Offset: 0x00012E14
	public virtual void WaypointReached(BaseWaypoint wayPoint)
	{
	}

	// Token: 0x06000161 RID: 353 RVA: 0x00014C18 File Offset: 0x00012E18
	public virtual void SetUniqueAnimationFromWaypoint(BaseWaypoint waypointToUse)
	{
	}

	// Token: 0x06000162 RID: 354 RVA: 0x00014C1C File Offset: 0x00012E1C
	public virtual void PostUpdateFollowWaypoint(AnimcontrolledCharacter.AnimControl controls, BaseWaypoint wayPoint)
	{
	}

	// Token: 0x06000163 RID: 355 RVA: 0x00014C20 File Offset: 0x00012E20
	protected static void RotateWhileTurning(AnimcontrolledCharacter character, float deltaTime, float rotationStartPlaypos, float rotationEndsPlaypos, float animRot)
	{
		AnimationBlendHelper blendHelper = character.GetBlendHelper();
		ABHelperData latestAnimData = blendHelper.GetLatestAnimData();
		float num = 0f;
		float num2 = blendHelper.blendParameters[3];
		if (latestAnimData.normalizedAnimPos >= rotationStartPlaypos)
		{
			if (latestAnimData.normalizedAnimPos < rotationEndsPlaypos)
			{
				ABDefinition topDefinition = blendHelper.GetTopDefinition();
				float y = topDefinition.initialEuler.y;
				float num3 = Mathf.Repeat(y + animRot, 360f);
				float num4 = Mathf.Repeat(character.transform.eulerAngles.y + num2, 360f);
				float num5 = num4 - num3;
				if (num5 > 180f)
				{
					num5 -= 360f;
				}
				else if (num5 < -180f)
				{
					num5 += 360f;
				}
				num = num5 * deltaTime * 2f * (0.7f - latestAnimData.normalizedAnimPos) / 0.4f;
			}
			else
			{
				num = num2 * deltaTime * 1f;
			}
		}
		Vector3 eulerAngles = character.transform.eulerAngles;
		eulerAngles.y += num;
		if (character.fastSetPos)
		{
			character.transform.SetLocalRotationNoNotify(Quaternion.Euler(eulerAngles));
			character.FastPosUpdateNodes(false);
		}
		else
		{
			character.transform.eulerAngles = eulerAngles;
		}
	}

	// Token: 0x04000213 RID: 531
	[NonSerialized]
	public AnimcontrolledCharacter acCharacter;
}
