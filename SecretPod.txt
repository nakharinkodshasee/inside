using System;
using UnityEngine;

// Token: 0x0200021C RID: 540
public class SecretPod : Device, IPreAwake
{
	// Token: 0x060010A8 RID: 4264 RVA: 0x0009D3D0 File Offset: 0x0009B5D0
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(base.gameObject, this);
		this.audioGrab = new AudioEventSimpleLocal(this.audioPrefix + "_grab", akGameObj);
		this.audioRelease = new AudioEventSimpleLocal(this.audioPrefix + "_release", akGameObj);
		this.audioPullStart = new AudioEventSimpleLocal(this.audioPrefix + "_pullStart", akGameObj);
		this.audioPullStop = new AudioEventSimpleLocal(this.audioPrefix + "_pullStop", akGameObj);
		this.audioComplete = new AudioEventSimpleLocal(this.audioPrefix + "_complete", akGameObj);
		this.audioCompleteAquire = new AudioEventSimpleLocal(this.audioPrefix + "_completeAquire", akGameObj);
		this.grabPos = this.triggerGrab.transform;
	}

	// Token: 0x060010A9 RID: 4265 RVA: 0x0009D4B8 File Offset: 0x0009B6B8
	public bool PreAwake(int callcount)
	{
		this.success = SignalOut.Create("success", base.gameObject);
		this.loadAcquired = SignalOut.Create("loadAcquired", base.gameObject);
		this.loadTaken = SignalIn.Create("loadTaken", base.gameObject, new Action(this.LoadComplete));
		int i = 0;
		int num = this.activateOnSuccess.Length;
		while (i < num)
		{
			this.activateOnSuccess[i].SetActive(false);
			i++;
		}
		this.animDeviceIdleState = this.animDevice[this.animDeviceIdle.name];
		this.animDeviceIdleState.layer = 1;
		this.animDevice.Play(this.animDeviceIdle.name);
		if (this.animDevicePull)
		{
			this.animDevicePullState = this.animDevice[this.animDevicePull.name];
			this.animDevicePullState.layer = 2;
			this.animDevice.Play(this.animDevicePull.name);
			this.animDevicePullState.weight = 0f;
		}
		if (this.animDeviceGrab)
		{
			this.animDeviceGrabState = this.animDevice[this.animDeviceGrab.name];
			this.animDeviceGrabState.layer = 1;
		}
		if (this.animDeviceRelease)
		{
			this.animDeviceReleaseState = this.animDevice[this.animDeviceRelease.name];
			this.animDeviceReleaseState.layer = 1;
		}
		this.animDeviceSuccessState = this.animDevice[this.animDeviceSuccess.name];
		this.animDeviceSuccessState.layer = 2;
		this.acquired = User.Achievement.IsAcquired(this.achievement);
		this.acquiredRecently = User.Achievement.IsAcquiredRecently(this.achievement);
		if (this.acquired)
		{
			int j = 0;
			int num2 = this.deactivateOnLoadComplete.Length;
			while (j < num2)
			{
				this.deactivateOnLoadComplete[j].SetActive(false);
				j++;
			}
		}
		return true;
	}

	// Token: 0x060010AA RID: 4266 RVA: 0x0009D6D4 File Offset: 0x0009B8D4
	protected override void Start()
	{
		this.OnPreProcess();
		base.Start();
		if (this.acquired && this.probeFlicker)
		{
			this.probeFlicker.OnSetDeactivate();
		}
		if (this.acquiredRecently)
		{
			this.loadAcquired.Signal();
			this.LoadComplete();
		}
		else
		{
			this.SetIdleState();
		}
	}

	// Token: 0x060010AB RID: 4267 RVA: 0x0009D73C File Offset: 0x0009B93C
	public void DisableSecret()
	{
		this.state = SecretPod.State.None;
	}

	// Token: 0x060010AC RID: 4268 RVA: 0x0009D748 File Offset: 0x0009B948
	public bool IsBoyClose()
	{
		Vector3 vector = ScriptGlobals.boy.pos3 - base.transform.position;
		return Mathf.Abs(vector.y) <= 3f && Mathf.Abs(vector.x - 0.86f) < 1f;
	}

	// Token: 0x060010AD RID: 4269 RVA: 0x0009D7A4 File Offset: 0x0009B9A4
	private void SetIdleState()
	{
		this.state = SecretPod.State.Idle;
	}

	// Token: 0x060010AE RID: 4270 RVA: 0x0009D7B0 File Offset: 0x0009B9B0
	private void IdleState()
	{
		if (this.currentPullBlend > 0f)
		{
			this.currentPullBlend -= Time.deltaTime * 12f;
			this.currentPullBlend = Mathf.Max(0f, this.currentPullBlend);
			this.UpdateAnimation(this.currentPullBlend);
		}
		if (this.animDeviceRelease && this.animDeviceReleaseState.normalizedTime >= 1f && !this.animDevice.IsPlaying(this.animDeviceIdle.name))
		{
			this.animDevice.CrossFade(this.animDeviceIdle.name);
		}
		if (this.underwaterAlignTimer > 0f)
		{
			this.underwaterAlignTimer -= Time.deltaTime;
		}
		if (this.releaseTimer > 0f)
		{
			this.releaseTimer -= Time.deltaTime;
			return;
		}
		if (this.currentPullBlend > 0f)
		{
			return;
		}
		int i = 0;
		int count = this.boysInside.Count;
		while (i < count)
		{
			Boy boy = this.boysInside[i];
			if (this.underwater)
			{
				if (Device.GrabCheck(boy, false))
				{
					if (this.headBone == null)
					{
						this.headBone = boy.visualBoy.actor.bones[boy.visualBoy.actor.GetBone("Head")].transform;
					}
					Vector3 vector = this.grabPos.position - this.headBone.position;
					vector.z = 0f;
					if (vector.magnitude < this.underwaterGrabDistance)
					{
						this.SetGrabState(boy);
					}
				}
			}
			else if (Device.GrabCheck(boy, true))
			{
				this.SetGrabState(boy);
			}
			i++;
		}
	}

	// Token: 0x060010AF RID: 4271 RVA: 0x0009D998 File Offset: 0x0009BB98
	private void SetGrabState(Boy boy)
	{
		this.boyGrabbing = boy;
		this.grabTimer = this.grabDelay;
		this.grabStunTimer = this.grabStunDelay;
		if (this.animDeviceGrab)
		{
			this.animDevice.CrossFade(this.animDeviceGrab.name, 0.2f);
		}
		if (this.underwater)
		{
			if (this.underwaterAlignTimer > 0f)
			{
				this.underwaterAlignTimer = this.underwaterAlignDelay;
				BoyUtils.StartCustomAnim(this.boyGrabbing, this.animPull, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			}
			else
			{
				this.currentGrabAnim = this.animGrab;
				Vector3 vector = this.grabPos.position - boy.pos3;
				vector.z = 0f;
				float num = Vector3.Dot(vector, this.grabPos.right);
				float num2 = Vector3.Dot(vector, this.grabPos.up);
				if (num > 0f)
				{
					if (num2 < 0f && this.animGrabLeftAbove)
					{
						this.currentGrabAnim = this.animGrabLeftAbove;
					}
					else if (this.animGrabLeft)
					{
						this.currentGrabAnim = this.animGrabLeft;
					}
				}
				else if (num2 < 0f && this.animGrabAbove)
				{
					this.currentGrabAnim = this.animGrabAbove;
				}
				BoyUtils.StartCustomAnim(this.boyGrabbing, this.currentGrabAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			}
		}
		else
		{
			this.currentGrabAnim = this.animGrab;
			if (this.animGrabLeft)
			{
				bool flag = (boy.pos.x + 0.2f * this.pullDir) * this.pullDir < this.grabPos.position.x * this.pullDir;
				if (flag)
				{
					this.currentGrabAnim = this.animGrabLeft;
				}
			}
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.currentGrabAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		}
		Device.SetVoicePassive();
		this.state = SecretPod.State.Grab;
	}

	// Token: 0x060010B0 RID: 4272 RVA: 0x0009DBB8 File Offset: 0x0009BDB8
	private void SetGrabStateNoTransition()
	{
		Device.SetVoicePassive();
		this.audioPullStop.PostFast();
		this.state = SecretPod.State.Grab;
	}

	// Token: 0x060010B1 RID: 4273 RVA: 0x0009DBD4 File Offset: 0x0009BDD4
	private void GrabState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		if (this.boyGrabbing.isDead || (!this.boyGrabbing.input.rawAction && this.grabStunTimer <= 0f))
		{
			this.Release();
			return;
		}
		if (this.grabTimer > 0f)
		{
			this.grabTimer -= Time.deltaTime;
			if (this.grabTimer > 0f)
			{
				return;
			}
			this.audioGrab.PostFast();
		}
		BoyCustomAnimState boyCustomAnimState = this.boyGrabbing.state as BoyCustomAnimState;
		if (boyCustomAnimState.anim == this.currentGrabAnim)
		{
			if (this.underwater && this.currentGrabAnim.frame > 30f)
			{
				this.underwaterAlignTimer = this.underwaterAlignDelay;
			}
			if (this.currentGrabAnim.frame >= this.currentGrabAnim.numFrames)
			{
				BoyUtils.StartCustomAnim(this.boyGrabbing, this.animPull, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			}
		}
		if (this.currentPullBlend > 0f)
		{
			this.currentPullBlend -= Time.deltaTime * 4f;
			this.currentPullBlend = Mathf.Max(0f, this.currentPullBlend);
			this.UpdateAnimation(this.currentPullBlend);
		}
		else if (this.CheckPull())
		{
			this.SetPullState();
		}
	}

	// Token: 0x060010B2 RID: 4274 RVA: 0x0009DD6C File Offset: 0x0009BF6C
	private void SetPullState()
	{
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animPull, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.pullTimer = 0f;
		Device.SetVoiceActive();
		this.audioPullStart.PostFast();
		this.state = SecretPod.State.Pull;
	}

	// Token: 0x060010B3 RID: 4275 RVA: 0x0009DDB8 File Offset: 0x0009BFB8
	private void PullState()
	{
		if (this.boyGrabbing.isDead || !this.boyGrabbing.input.rawAction)
		{
			this.audioPullStop.PostFast();
			this.Release();
			return;
		}
		this.pullTimer += Time.deltaTime;
		this.pullTimer = Mathf.Min(this.pullDuration, this.pullTimer);
		this.currentPullBlend = this.pullCurve.Evaluate(this.pullTimer / this.pullDuration);
		this.UpdateAnimation(this.currentPullBlend);
		if (!this.CheckPull())
		{
			this.SetGrabStateNoTransition();
		}
		if (this.currentPullBlend >= 1f)
		{
			this.SetSuccessState();
		}
	}

	// Token: 0x060010B4 RID: 4276 RVA: 0x0009DE78 File Offset: 0x0009C078
	private void SetSuccessState()
	{
		if (this.activateOnSuccess != null)
		{
			int i = 0;
			int num = this.activateOnSuccess.Length;
			while (i < num)
			{
				this.activateOnSuccess[i].SetActive(true);
				i++;
			}
		}
		if (this.deactivateOnSuccess != null)
		{
			int j = 0;
			int num2 = this.deactivateOnSuccess.Length;
			while (j < num2)
			{
				this.deactivateOnSuccess[j].SetActive(false);
				j++;
			}
		}
		int k = 0;
		int num3 = this.particlesSuccess.Length;
		while (k < num3)
		{
			if (this.particlesSuccess[k] != null)
			{
				this.particlesSuccess[k].Play();
			}
			k++;
		}
		if (this.boyGrabbing.status.water)
		{
			this.animSuccess.transform.position = this.animGrab.transform.position;
			this.animSuccess.transform.rotation = this.animGrab.transform.rotation;
		}
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animSuccess, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		Device.SetVoiceNone();
		this.animDevice.CrossFade(this.animDeviceSuccess.name);
		this.animDevice.Stop(this.animDeviceIdle.name);
		this.animDeviceIdleState.weight = 0f;
		User.Achievement.Acquire(this.achievement);
		if (this.acquired)
		{
			this.audioComplete.PostFast();
		}
		else
		{
			this.audioCompleteAquire.PostFast();
		}
		if (!this.acquired && this.probeFlicker)
		{
			this.probeFlicker.OnSetActivated();
		}
		RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.Spike, 0.3f, 0.2f, 0, 0f);
		this.success.Signal();
		SingletonBehaviour<AchievementsOverlay>.instance.ShowAchievement();
		this.state = SecretPod.State.Success;
	}

	// Token: 0x060010B5 RID: 4277 RVA: 0x0009E07C File Offset: 0x0009C27C
	private void SuccessState()
	{
	}

	// Token: 0x060010B6 RID: 4278 RVA: 0x0009E080 File Offset: 0x0009C280
	private void FixedUpdate()
	{
		switch (this.state)
		{
		case SecretPod.State.Idle:
			this.IdleState();
			break;
		case SecretPod.State.Grab:
			this.GrabState();
			break;
		case SecretPod.State.Pull:
			this.PullState();
			break;
		case SecretPod.State.Success:
			this.SuccessState();
			break;
		}
	}

	// Token: 0x060010B7 RID: 4279 RVA: 0x0009E0E0 File Offset: 0x0009C2E0
	private void LateUpdate()
	{
		if (this.lightTarget && this.lightHolder)
		{
			this.lightHolder.position = this.lightTarget.position;
			Vector3 vector = this.lightTarget.TransformPoint(Vector3.up) - this.lightTarget.position;
			Vector3 vector2 = this.lightTarget.TransformPoint(Vector3.forward) - this.lightTarget.position;
			this.lightHolder.rotation = Quaternion.LookRotation(vector2, vector);
		}
	}

	// Token: 0x060010B8 RID: 4280 RVA: 0x0009E178 File Offset: 0x0009C378
	private void Release()
	{
		BoyUtils.ClearState(this.boyGrabbing, -1f);
		Device.SetVoiceNone();
		this.releaseTimer = this.releaseDelay;
		if (this.grabTimer <= 0f)
		{
			this.audioRelease.PostFast();
		}
		if (this.grabTimer <= 0f && this.animDeviceRelease)
		{
			this.currentPullBlend = 0f;
			this.UpdateAnimation(this.currentPullBlend);
			this.animDevice.CrossFade(this.animDeviceRelease.name);
		}
		else
		{
			this.animDevice.CrossFade(this.animDeviceIdle.name);
		}
		this.boyGrabbing = null;
		this.SetIdleState();
	}

	// Token: 0x060010B9 RID: 4281 RVA: 0x0009E238 File Offset: 0x0009C438
	private void UpdateAnimation(float value)
	{
		this.animPull.currentBlendValue = value;
		if (this.animDevicePullState)
		{
			this.animDevicePullState.weight = value;
		}
	}

	// Token: 0x060010BA RID: 4282 RVA: 0x0009E270 File Offset: 0x0009C470
	private bool CheckPull()
	{
		if (this.pullTransform)
		{
			vector2f stick = this.boyGrabbing.input.stick;
			if (stick.magnitude > 0.4f)
			{
				Vector3 vector;
				vector.x = stick.x;
				vector.y = stick.y;
				vector.z = 0f;
				Vector3 right = this.pullTransform.right;
				right.z = 0f;
				float num = Vector3.Dot(vector.normalized, right.normalized);
				return num > this.pullAngleMin;
			}
			return false;
		}
		else
		{
			float x = this.boyGrabbing.input.stick.x;
			if (this.pullDir == 1f)
			{
				return x > 0.3f;
			}
			return x < -0.3f;
		}
	}

	// Token: 0x060010BB RID: 4283 RVA: 0x0009E350 File Offset: 0x0009C550
	private void LoadComplete()
	{
		this.animDevice.Play(this.animDeviceSuccess.name);
		this.animDeviceSuccessState.normalizedTime = 1f;
		this.state = SecretPod.State.Success;
	}

	// Token: 0x060010BC RID: 4284 RVA: 0x0009E38C File Offset: 0x0009C58C
	private void OnDrawGizmos()
	{
		if (this.debug && this.underwater && EditorMode.DebugLayerActive(EditorMode.EDebugLayers.Gameplay))
		{
			Boy boy = ScriptGlobals.boy;
			float num = 0f;
			if (Application.isPlaying)
			{
				if (this.headBone == null)
				{
					this.headBone = boy.visualBoy.actor.bones[boy.visualBoy.actor.GetBone("Head")].transform;
				}
				Vector3 vector = this.triggerGrab.transform.position - this.headBone.position;
				vector.z = 0f;
				num = vector.magnitude;
			}
			if (this.boysInside.Count > 0 && num < this.underwaterGrabDistance)
			{
				Vector3 vector2 = this.triggerGrab.transform.position - boy.pos3;
				vector2.z = 0f;
				float num2 = Vector3.Dot(vector2, this.triggerGrab.transform.right);
				float num3 = Vector3.Dot(vector2, this.triggerGrab.transform.up);
				if (num2 > 0f)
				{
					if (num3 > 0f)
					{
						Gizmos.color = Color.blue.Alpha(0.1f);
					}
					else
					{
						Gizmos.color = Color.cyan.Alpha(0.1f);
					}
				}
				else if (num3 > 0f)
				{
					Gizmos.color = Color.green.Alpha(0.1f);
				}
				else
				{
					Gizmos.color = Color.yellow.Alpha(0.1f);
				}
			}
			else
			{
				Gizmos.color = Color.red.Alpha(0.1f);
			}
			Gizmos.DrawSphere(this.triggerGrab.transform.position, this.underwaterGrabDistance);
		}
	}

	// Token: 0x04001E0C RID: 7692
	public AchievementPlatform.EAchievements achievement;

	// Token: 0x04001E0D RID: 7693
	public float pullDir = -1f;

	// Token: 0x04001E0E RID: 7694
	public Transform pullTransform;

	// Token: 0x04001E0F RID: 7695
	public float pullAngleMin = 0.65f;

	// Token: 0x04001E10 RID: 7696
	public float grabDelay = 0.2f;

	// Token: 0x04001E11 RID: 7697
	public AnimClipNode animGrab;

	// Token: 0x04001E12 RID: 7698
	public AnimClipNode animGrabAbove;

	// Token: 0x04001E13 RID: 7699
	public AnimClipNode animGrabLeft;

	// Token: 0x04001E14 RID: 7700
	public AnimClipNode animGrabLeftAbove;

	// Token: 0x04001E15 RID: 7701
	public AnimClipNode animSuccess;

	// Token: 0x04001E16 RID: 7702
	public AnimBlendNode animPull;

	// Token: 0x04001E17 RID: 7703
	public AnimationCurve pullCurve;

	// Token: 0x04001E18 RID: 7704
	public float pullDuration = 1.25f;

	// Token: 0x04001E19 RID: 7705
	public Animation animDevice;

	// Token: 0x04001E1A RID: 7706
	public AnimationClip animDeviceIdle;

	// Token: 0x04001E1B RID: 7707
	public AnimationClip animDeviceGrab;

	// Token: 0x04001E1C RID: 7708
	public AnimationClip animDeviceRelease;

	// Token: 0x04001E1D RID: 7709
	public AnimationClip animDevicePull;

	// Token: 0x04001E1E RID: 7710
	public AnimationClip animDeviceSuccess;

	// Token: 0x04001E1F RID: 7711
	public SecretProbeFlicker probeFlicker;

	// Token: 0x04001E20 RID: 7712
	public GameObject[] activateOnSuccess;

	// Token: 0x04001E21 RID: 7713
	public ParticleSystem[] particlesSuccess;

	// Token: 0x04001E22 RID: 7714
	public GameObject[] deactivateOnSuccess;

	// Token: 0x04001E23 RID: 7715
	public GameObject[] deactivateOnLoadComplete;

	// Token: 0x04001E24 RID: 7716
	public Transform lightHolder;

	// Token: 0x04001E25 RID: 7717
	public Transform lightTarget;

	// Token: 0x04001E26 RID: 7718
	public bool underwater;

	// Token: 0x04001E27 RID: 7719
	public float underwaterGrabDistance = 0.9f;

	// Token: 0x04001E28 RID: 7720
	public string audioPrefix;

	// Token: 0x04001E29 RID: 7721
	public bool debug;

	// Token: 0x04001E2A RID: 7722
	private SignalOut success;

	// Token: 0x04001E2B RID: 7723
	private SignalOut loadAcquired;

	// Token: 0x04001E2C RID: 7724
	private SignalIn loadTaken;

	// Token: 0x04001E2D RID: 7725
	private SecretPod.State state;

	// Token: 0x04001E2E RID: 7726
	private float pullTimer;

	// Token: 0x04001E2F RID: 7727
	private float currentPullBlend;

	// Token: 0x04001E30 RID: 7728
	private float grabTimer;

	// Token: 0x04001E31 RID: 7729
	private float grabStunTimer;

	// Token: 0x04001E32 RID: 7730
	private float grabStunDelay = 0.15f;

	// Token: 0x04001E33 RID: 7731
	private float releaseTimer;

	// Token: 0x04001E34 RID: 7732
	private float releaseDelay = 0.15f;

	// Token: 0x04001E35 RID: 7733
	private float underwaterAlignTimer;

	// Token: 0x04001E36 RID: 7734
	private float underwaterAlignDelay = 0.35f;

	// Token: 0x04001E37 RID: 7735
	private float guiWaitTimer;

	// Token: 0x04001E38 RID: 7736
	private AnimationState animDeviceIdleState;

	// Token: 0x04001E39 RID: 7737
	private AnimationState animDeviceGrabState;

	// Token: 0x04001E3A RID: 7738
	private AnimationState animDeviceReleaseState;

	// Token: 0x04001E3B RID: 7739
	private AnimationState animDevicePullState;

	// Token: 0x04001E3C RID: 7740
	private AnimationState animDeviceSuccessState;

	// Token: 0x04001E3D RID: 7741
	private Transform headBone;

	// Token: 0x04001E3E RID: 7742
	private AnimClipNode currentGrabAnim;

	// Token: 0x04001E3F RID: 7743
	private bool acquired;

	// Token: 0x04001E40 RID: 7744
	private bool acquiredRecently;

	// Token: 0x04001E41 RID: 7745
	[HideInInspector]
	[SerializeField]
	private Transform grabPos;

	// Token: 0x04001E42 RID: 7746
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioGrab;

	// Token: 0x04001E43 RID: 7747
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioRelease;

	// Token: 0x04001E44 RID: 7748
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioPullStart;

	// Token: 0x04001E45 RID: 7749
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioPullStop;

	// Token: 0x04001E46 RID: 7750
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioComplete;

	// Token: 0x04001E47 RID: 7751
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioCompleteAquire;

	// Token: 0x04001E48 RID: 7752
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x0200021D RID: 541
	private enum State
	{
		// Token: 0x04001E4A RID: 7754
		None,
		// Token: 0x04001E4B RID: 7755
		Idle,
		// Token: 0x04001E4C RID: 7756
		Grab,
		// Token: 0x04001E4D RID: 7757
		Pull,
		// Token: 0x04001E4E RID: 7758
		Success
	}
}