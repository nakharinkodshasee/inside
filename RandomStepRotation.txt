using System;
using System.Collections.Generic;
using SceneVerification;
using UnityEngine;

// Token: 0x0200013D RID: 317
public class RandomStepRotation : MonoBehaviour
{
	// Token: 0x060009BC RID: 2492 RVA: 0x000624C4 File Offset: 0x000606C4
	private void Start()
	{
		switch (this.rotationAxis)
		{
		case RandomStepRotation.axisSelect.Xaxis:
			this.axis = Vector3.right;
			break;
		case RandomStepRotation.axisSelect.Yaxis:
			this.axis = Vector3.up;
			break;
		case RandomStepRotation.axisSelect.Zaxis:
			this.axis = Vector3.back;
			break;
		}
		this.SetPlayState();
	}

	// Token: 0x060009BD RID: 2493 RVA: 0x0006252C File Offset: 0x0006072C
	private void Update()
	{
		switch (this.state)
		{
		case RandomStepRotation.State.Play:
			this.PlayState();
			break;
		case RandomStepRotation.State.Seek:
			this.SeekState();
			break;
		case RandomStepRotation.State.Delay:
			this.DelayState();
			break;
		}
	}

	// Token: 0x060009BE RID: 2494 RVA: 0x0006257C File Offset: 0x0006077C
	private void SetSeekState()
	{
		this.seekDuration = Random.Range(this.seekDurationMin, this.seekDurationMax);
		this.time = 0f;
		if (this.seekRandomFlip)
		{
			float num = Random.Range(0f, 1f);
			if ((double)num < 0.5)
			{
				this.seekSpeed = -this.seekSpeed;
			}
		}
		this.tempSpeed = this.seekSpeed;
		this.state = RandomStepRotation.State.Seek;
	}

	// Token: 0x060009BF RID: 2495 RVA: 0x000625F8 File Offset: 0x000607F8
	private void SeekState()
	{
		if (this.time < this.seekDuration)
		{
			this.time += Time.deltaTime;
			for (int i = 0; i < this.rotateTransforms.Count; i++)
			{
				this.rotateTransforms[i].Rotate(this.axis, Time.deltaTime * this.tempSpeed);
			}
		}
		else
		{
			this.SetSeek2PlayDelayState();
		}
	}

	// Token: 0x060009C0 RID: 2496 RVA: 0x00062674 File Offset: 0x00060874
	private void SetSeek2PlayDelayState()
	{
		if (this.seekToPlayDelay <= 0f)
		{
			this.SetPlayState();
		}
		else
		{
			this.waitTimer = this.seekToPlayDelay;
			this.gotoSeek = false;
			this.state = RandomStepRotation.State.Delay;
		}
	}

	// Token: 0x060009C1 RID: 2497 RVA: 0x000626AC File Offset: 0x000608AC
	private void SetPlay2SeekDelayState()
	{
		if (this.playToSeekDelay <= 0f)
		{
			this.SetSeekState();
		}
		else
		{
			this.waitTimer = this.playToSeekDelay;
			this.gotoSeek = true;
			this.state = RandomStepRotation.State.Delay;
		}
	}

	// Token: 0x060009C2 RID: 2498 RVA: 0x000626E4 File Offset: 0x000608E4
	private void DelayState()
	{
		if (this.waitTimer > 0f)
		{
			this.waitTimer -= Time.deltaTime;
		}
		else if (this.gotoSeek)
		{
			this.SetSeekState();
		}
		else
		{
			this.SetPlayState();
		}
	}

	// Token: 0x060009C3 RID: 2499 RVA: 0x00062734 File Offset: 0x00060934
	private void SetPlayState()
	{
		this.playDuration = Random.Range(this.playDurationMin, this.playDurationMax);
		this.time = 0f;
		this.state = RandomStepRotation.State.Play;
	}

	// Token: 0x060009C4 RID: 2500 RVA: 0x00062760 File Offset: 0x00060960
	private void PlayState()
	{
		if (this.time < this.playDuration)
		{
			this.time += Time.deltaTime;
			for (int i = 0; i < this.rotateTransforms.Count; i++)
			{
				this.rotateTransforms[i].Rotate(this.axis, Time.deltaTime * this.playSpeed);
			}
		}
		else
		{
			this.SetPlay2SeekDelayState();
		}
	}

	// Token: 0x060009C5 RID: 2501 RVA: 0x000627DC File Offset: 0x000609DC
	[Verify("Asset/Disabled RandomStepRotation", "Check if object have disabled RandomStepRotation component", new string[]
	{
		"CleanUp"
	})]
	public void VerifyDisabledComponent(Form form)
	{
		if (!base.enabled)
		{
			form.ReportWarning(this, "Disabled RandomStepRotation, remove if not used by logic/scripting");
		}
	}

	// Token: 0x040010A4 RID: 4260
	public List<Transform> rotateTransforms;

	// Token: 0x040010A5 RID: 4261
	public RandomStepRotation.axisSelect rotationAxis;

	// Token: 0x040010A6 RID: 4262
	public float seekSpeed = 1200f;

	// Token: 0x040010A7 RID: 4263
	public float seekDurationMin = 0.3f;

	// Token: 0x040010A8 RID: 4264
	public float seekDurationMax = 2.5f;

	// Token: 0x040010A9 RID: 4265
	public float playSpeed = 30f;

	// Token: 0x040010AA RID: 4266
	public float playDurationMin = 5f;

	// Token: 0x040010AB RID: 4267
	public float playDurationMax = 20f;

	// Token: 0x040010AC RID: 4268
	public float seekToPlayDelay = 0.5f;

	// Token: 0x040010AD RID: 4269
	public float playToSeekDelay = 0.2f;

	// Token: 0x040010AE RID: 4270
	public bool seekRandomFlip = true;

	// Token: 0x040010AF RID: 4271
	private RandomStepRotation.State state;

	// Token: 0x040010B0 RID: 4272
	private float seekDuration;

	// Token: 0x040010B1 RID: 4273
	private float playDuration;

	// Token: 0x040010B2 RID: 4274
	private float waitTimer;

	// Token: 0x040010B3 RID: 4275
	private float time;

	// Token: 0x040010B4 RID: 4276
	private float tempSpeed;

	// Token: 0x040010B5 RID: 4277
	private bool gotoSeek = true;

	// Token: 0x040010B6 RID: 4278
	private Vector3 axis;

	// Token: 0x0200013E RID: 318
	public enum axisSelect
	{
		// Token: 0x040010B8 RID: 4280
		Xaxis,
		// Token: 0x040010B9 RID: 4281
		Yaxis,
		// Token: 0x040010BA RID: 4282
		Zaxis
	}

	// Token: 0x0200013F RID: 319
	private enum State
	{
		// Token: 0x040010BC RID: 4284
		None,
		// Token: 0x040010BD RID: 4285
		Play,
		// Token: 0x040010BE RID: 4286
		Seek,
		// Token: 0x040010BF RID: 4287
		Delay
	}
}