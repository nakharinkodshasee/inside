using System;
using DelaunayTriangulation;
using UnityEngine;

// Token: 0x02000551 RID: 1361
public class CameraPointBox2 : CameraBox
{
	// Token: 0x14000003 RID: 3
	// (add) Token: 0x06002341 RID: 9025 RVA: 0x00126F80 File Offset: 0x00125180
	// (remove) Token: 0x06002342 RID: 9026 RVA: 0x00126F98 File Offset: 0x00125198
	public static event Action<CameraPointBox2> onDrawGizmos;

	// Token: 0x14000004 RID: 4
	// (add) Token: 0x06002343 RID: 9027 RVA: 0x00126FB0 File Offset: 0x001251B0
	// (remove) Token: 0x06002344 RID: 9028 RVA: 0x00126FC8 File Offset: 0x001251C8
	public static event Action<CameraPointBox2> onDrawGizmosSelected;

	// Token: 0x17000092 RID: 146
	// (get) Token: 0x06002345 RID: 9029 RVA: 0x00126FE0 File Offset: 0x001251E0
	// (set) Token: 0x06002346 RID: 9030 RVA: 0x00126FE8 File Offset: 0x001251E8
	public Deleauney deleauney { get; private set; }

	// Token: 0x06002347 RID: 9031 RVA: 0x00126FF4 File Offset: 0x001251F4
	public static float smootherstep(float x)
	{
		return x * x * x * (x * (x * 6f - 15f) + 10f);
	}

	// Token: 0x06002348 RID: 9032 RVA: 0x00127014 File Offset: 0x00125214
	public void Initialize()
	{
		float num = -base.boxCollider.size.x * 0.5f;
		float num2 = base.boxCollider.size.x * 0.5f;
		float num3 = base.boxCollider.size.y * 0.5f;
		float num4 = -base.boxCollider.size.y * 0.5f;
		this.deleauney = new Deleauney(new Vector2(num, num4), new Vector2(num2, num4), new Vector2(num2, num3), new Vector2(num, num3));
		for (int i = 0; i < base.transform.childCount; i++)
		{
			Transform child = base.transform.GetChild(i);
			if (child.gameObject.activeSelf)
			{
				CameraPointArea component = child.GetComponent<CameraPointArea>();
				if (child.childCount > 0)
				{
					for (int j = 0; j < child.childCount; j++)
					{
						Transform child2 = child.GetChild(j);
						if (child2.gameObject.activeSelf)
						{
							this.deleauney.AddSite(base.transform.InverseTransformPoint(child2.position), component);
						}
					}
				}
				else
				{
					this.deleauney.AddSite(child.localPosition, component);
				}
			}
		}
	}

	// Token: 0x06002349 RID: 9033 RVA: 0x0012719C File Offset: 0x0012539C
	public override CameraPivot GetCameraPivot(Vector3 position, CameraBlendProbe probe)
	{
		this.Initialize();
		position = base.transform.InverseTransformPoint(position);
		position.x = Mathf.Clamp(position.x, -base.boxCollider.size.x * 0.499f, base.boxCollider.size.x * 0.499f);
		position.y = Mathf.Clamp(position.y, -base.boxCollider.size.y * 0.499f, base.boxCollider.size.y * 0.499f);
		position.z = 0f;
		if (this.useCalc)
		{
			this.deleauney.CalcSite(position);
		}
		else
		{
			this.deleauney.AddSite(position, null);
		}
		float num = 0f;
		float num2 = 0f;
		Vector3 vector = Vector3.zero;
		Vector3 vector2 = Vector3.zero;
		Vector3 vector3 = Vector3.zero;
		float num3 = 0f;
		for (int i = 0; i < this.deleauney.points.Count; i++)
		{
			Point point = this.deleauney.points[i];
			num3 += point.GetWeight();
		}
		float num4 = 0f;
		for (int j = 0; j < this.deleauney.points.Count; j++)
		{
			Point point2 = this.deleauney.points[j];
			float num5 = CameraPointBox2.smootherstep(point2.GetWeight() / num3);
			num4 += num5;
			CameraPointArea cameraPointArea = point2.value as CameraPointArea;
			if (cameraPointArea)
			{
				num += cameraPointArea.extrapolateCamera * num5;
				num2 += cameraPointArea.extrapolateAim * num5;
				vector += (cameraPointArea.cameraPosition + probe.transform.position) * num5;
				vector2 += (cameraPointArea.aim + probe.transform.position) * num5;
				vector3 += cameraPointArea.up * num5;
			}
		}
		if (num4 > 0f)
		{
			num /= num4;
			num2 /= num4;
			vector /= num4;
			vector2 /= num4;
			vector3 /= num4;
			return new CameraPivot
			{
				extrapolateCamera = num,
				extrapolateAim = num2,
				camera = vector,
				aim = vector2,
				up = vector3
			};
		}
		return new CameraPivot
		{
			camera = new Vector3(0f, 0f, -7f),
			aim = Vector3.zero,
			up = Vector3.up
		};
	}

	// Token: 0x0600234A RID: 9034 RVA: 0x00127488 File Offset: 0x00125688
	private void OnDrawGizmos()
	{
		if (CameraPointBox2.onDrawGizmos != null)
		{
			CameraPointBox2.onDrawGizmos(this);
		}
	}

	// Token: 0x0600234B RID: 9035 RVA: 0x001274A0 File Offset: 0x001256A0
	private void OnDrawGizmosSelected()
	{
		if (CameraPointBox2.onDrawGizmosSelected != null)
		{
			CameraPointBox2.onDrawGizmosSelected(this);
		}
	}

	// Token: 0x040041F0 RID: 16880
	public bool initializeOnGizmos;

	// Token: 0x040041F1 RID: 16881
	public bool showTriangulation;

	// Token: 0x040041F2 RID: 16882
	public bool useCalc;
}
