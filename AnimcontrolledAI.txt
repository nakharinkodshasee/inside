using System;
using ABHelper;
using UnityEngine;

// Token: 0x02000035 RID: 53
public class AnimcontrolledAI : BaseWaypointFollower
{
	// Token: 0x06000192 RID: 402 RVA: 0x00015BD0 File Offset: 0x00013DD0
	public virtual void InitAnimcontrolledAI(AnimcontrolledCharacter character)
	{
		if (character != null)
		{
			base.InitBaseWaypointFollower(character.transform);
		}
		this.character = character;
	}

	// Token: 0x06000193 RID: 403 RVA: 0x00015BF4 File Offset: 0x00013DF4
	public override void NewWaypointSet_Callback(BaseWaypoint wayPoint)
	{
		if (this.character.customCodeManager != null)
		{
			this.character.customCodeManager.NewWaypointSet(wayPoint);
		}
	}

	// Token: 0x06000194 RID: 404 RVA: 0x00015C20 File Offset: 0x00013E20
	public override void WaypointReached_Callback(BaseWaypoint wayPoint)
	{
		bool flag = false;
		BaseWaypoint nextWaypoint = wayPoint.nextWaypoint;
		if (nextWaypoint == null || nextWaypoint.uniqueAnimationName.Length == 0 || !nextWaypoint.CloseToWayPoint(this.character.transform))
		{
			AnimationBlendHelper blendHelper = this.character.GetBlendHelper();
			ABDefinition topDefinition = blendHelper.GetTopDefinition();
			bool flag2 = true;
			ABHelperData latestAnimData = blendHelper.GetLatestAnimData();
			if (latestAnimData != null)
			{
				flag2 = (latestAnimData.topIsLooped || wayPoint.uniqueAnimCustomEndPos >= 0f);
			}
			if (flag2)
			{
				if (wayPoint.uniqueAnimDefID == topDefinition.definitionID)
				{
					flag = true;
				}
				else
				{
					AnimcontrolledRandomStateWaypoint animcontrolledRandomStateWaypoint = wayPoint as AnimcontrolledRandomStateWaypoint;
					if (animcontrolledRandomStateWaypoint != null && animcontrolledRandomStateWaypoint.containsThisRandomAnim(topDefinition.definitionID))
					{
						flag = true;
					}
				}
			}
		}
		if (flag)
		{
			this.character.GoToDefaultAnimation();
		}
		if (this.character.customCodeManager != null)
		{
			this.character.customCodeManager.WaypointReached(wayPoint);
		}
	}

	// Token: 0x06000195 RID: 405 RVA: 0x00015D30 File Offset: 0x00013F30
	public virtual void Reset(bool keepTriggers = false)
	{
	}

	// Token: 0x06000196 RID: 406 RVA: 0x00015D34 File Offset: 0x00013F34
	public virtual bool AllowGroundCollision(Collider collider)
	{
		return true;
	}

	// Token: 0x06000197 RID: 407 RVA: 0x00015D38 File Offset: 0x00013F38
	public virtual bool AllowUpdate()
	{
		return true;
	}

	// Token: 0x06000198 RID: 408 RVA: 0x00015D3C File Offset: 0x00013F3C
	public virtual bool HandleHighGroundCollision(ColInfo3 colInfo)
	{
		return false;
	}

	// Token: 0x06000199 RID: 409 RVA: 0x00015D40 File Offset: 0x00013F40
	public virtual Vector3 AIUpdateFinalMoveVector(Vector3 moveVector, float deltaTime, ref Vector3 wantedPos)
	{
		return moveVector;
	}

	// Token: 0x0600019A RID: 410 RVA: 0x00015D44 File Offset: 0x00013F44
	public virtual void DoLateUpdate()
	{
	}

	// Token: 0x0600019B RID: 411 RVA: 0x00015D48 File Offset: 0x00013F48
	public override void SetUniqueAnimationFromWaypoint_Callback(BaseWaypoint waypointToUse)
	{
		this.character.SetUniqueAnimation(waypointToUse.uniqueAnimDefID, waypointToUse.gameObject, waypointToUse.arrivalLineMode, waypointToUse.uniqueAnimCustomParameter, waypointToUse.uniqueOverrideTransitTime, waypointToUse.uniqueOverrideStartPlayPos);
		if (this.character.customCodeManager != null)
		{
			this.character.customCodeManager.SetUniqueAnimationFromWaypoint(waypointToUse);
		}
	}

	// Token: 0x0600019C RID: 412 RVA: 0x00015DAC File Offset: 0x00013FAC
	public override void PostUpdateFollowWaypoint_Callback(AnimcontrolledCharacter.AnimControl controls, BaseWaypoint wayPoint)
	{
		if (this.character.customCodeManager != null)
		{
			this.character.customCodeManager.PostUpdateFollowWaypoint(controls, wayPoint);
		}
	}

	// Token: 0x0600019D RID: 413 RVA: 0x00015DE4 File Offset: 0x00013FE4
	public override void Start()
	{
	}

	// Token: 0x0400024E RID: 590
	protected AnimcontrolledCharacter character;
}
