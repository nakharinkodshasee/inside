using System;
using UnityEngine;

// Token: 0x02000340 RID: 832
public class MIColorFromScene : MonoBehaviour
{
	// Token: 0x0600172C RID: 5932 RVA: 0x000CAA9C File Offset: 0x000C8C9C
	private void Start()
	{
		this.count = this.parentObj.transform.childCount;
		this.rt = new RenderTexture(this.width, this.height, 24);
		this.tex = new Texture2D(this.rt.width, this.rt.height, 3, false);
		if (this.debug)
		{
			MonoBehaviour.print("Child cound: " + this.count);
		}
		this.child = new GameObject[this.count];
		this.MI = new MaterialInstance[this.count];
		this.colorProperty = new MaterialInstance.ColorProperty[this.count];
		this.colorValue = new Color[this.count];
		for (int i = 0; i < this.count; i++)
		{
			Transform transform = this.parentObj.transform.GetChild(i);
			this.child[i] = transform.gameObject;
			if (this.debug)
			{
				MonoBehaviour.print(string.Concat(new object[]
				{
					"Child ",
					i,
					" name: ",
					this.child[i]
				}));
			}
			this.MI[i] = this.child[i].GetComponent<MaterialInstance>();
			if (this.debug)
			{
				MonoBehaviour.print(string.Concat(new object[]
				{
					"Material instance ",
					i,
					": ",
					this.MI[i]
				}));
			}
			this.colorProperty[i] = this.MI[i].GetOrAddColorProperty("_TintColor");
			this.colorValue[i] = this.MI[i].GetColorValue(this.colorProperty[i]);
		}
	}

	// Token: 0x0600172D RID: 5933 RVA: 0x000CAC70 File Offset: 0x000C8E70
	private void Update()
	{
		Camera camera = this.cam;
		RenderSettings.fog = false;
		for (int i = 0; i < this.count; i++)
		{
			this.child[i].SetActive(false);
		}
		camera.targetTexture = this.rt;
		camera.Render();
		RenderTexture.active = this.rt;
		this.tex.ReadPixels(new Rect(0f, 0f, (float)this.rt.width, (float)this.rt.height), 0, 0);
		this.tex.Apply();
		RenderSettings.fog = true;
		for (int j = 0; j < this.count; j++)
		{
			this.child[j].SetActive(true);
		}
		for (int k = 0; k < this.count; k++)
		{
			Vector3 vector = camera.WorldToScreenPoint(this.child[k].transform.position);
			float num = vector.x / (float)this.rt.width;
			float num2 = vector.y / (float)this.rt.height;
			Color color = this.tex.GetPixelBilinear(num, num2);
			color *= this.colorTint;
			if (this.MI[k] != null)
			{
				this.MI[k].SetColorProperty(this.colorProperty[k], Color.Lerp(this.colorValue[k], color, this.colorBlend));
			}
		}
	}

	// Token: 0x0600172E RID: 5934 RVA: 0x000CADFC File Offset: 0x000C8FFC
	private void OnInspectorGUI()
	{
	}

	// Token: 0x04002976 RID: 10614
	public GameObject parentObj;

	// Token: 0x04002977 RID: 10615
	public Color colorTint = Color.white;

	// Token: 0x04002978 RID: 10616
	public float colorBlend = 1f;

	// Token: 0x04002979 RID: 10617
	public bool debug;

	// Token: 0x0400297A RID: 10618
	private MaterialInstance[] MI;

	// Token: 0x0400297B RID: 10619
	private MaterialInstance.ColorProperty[] colorProperty;

	// Token: 0x0400297C RID: 10620
	private Color[] colorValue;

	// Token: 0x0400297D RID: 10621
	private GameObject[] child;

	// Token: 0x0400297E RID: 10622
	private int count;

	// Token: 0x0400297F RID: 10623
	private Texture2D tex;

	// Token: 0x04002980 RID: 10624
	private RenderTexture rt;

	// Token: 0x04002981 RID: 10625
	public Camera cam;

	// Token: 0x04002982 RID: 10626
	public int width = 256;

	// Token: 0x04002983 RID: 10627
	public int height = 256;
}