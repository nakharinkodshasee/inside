using System;
using System.Diagnostics;
using UnityEngine;

// Token: 0x0200057A RID: 1402
public class BenchmarkMaskingQueries : MonoBehaviour
{
	// Token: 0x06002437 RID: 9271 RVA: 0x0012B4A0 File Offset: 0x001296A0
	private void Start()
	{
		this.outCollider = new Collider[128];
		this.outRayhit = new RaycastHit[128];
		this.runIteration = false;
	}

	// Token: 0x06002438 RID: 9272 RVA: 0x0012B4CC File Offset: 0x001296CC
	private void FixedUpdate()
	{
		if (this.runIteration)
		{
			Vector3 position = base.transform.position;
			float num = this.distance;
			Vector3 vector;
			vector..ctor(1f, -0.1f, 0.1f);
			Vector3 normalized = vector.normalized;
			int num2 = this.iterations;
			int playerInteractionMask = CollisionUtils.Layers.playerInteractionMask;
			int num3 = CollisionUtils.ShapeMask[(int)this.filter];
			bool flag = this.raycastInsideOut;
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			for (int num4 = 0; num4 != num2; num4++)
			{
				Physics.OverlapSphere(position, num, playerInteractionMask);
			}
			stopwatch.Stop();
			this.timeOverlap = (float)stopwatch.ElapsedMilliseconds;
			Stopwatch stopwatch2 = new Stopwatch();
			stopwatch2.Start();
			for (int num5 = 0; num5 != num2; num5++)
			{
				Physics.OverlapSpherePreAlloc(this.outCollider, position, num, playerInteractionMask);
			}
			stopwatch2.Stop();
			this.timeOverlapPreAlloc = (float)stopwatch2.ElapsedMilliseconds;
			Stopwatch stopwatch3 = new Stopwatch();
			stopwatch3.Start();
			for (int num6 = 0; num6 != num2; num6++)
			{
				Physics.OverlapSphereMasking(this.outCollider, position, num, playerInteractionMask, num3);
			}
			stopwatch3.Stop();
			this.timeOverlapMasking = (float)stopwatch3.ElapsedMilliseconds;
			Stopwatch stopwatch4 = new Stopwatch();
			stopwatch4.Start();
			for (int num7 = 0; num7 != num2; num7++)
			{
				Physics.RaycastAll(position, normalized, num, playerInteractionMask);
			}
			stopwatch4.Stop();
			this.timeRaycast = (float)stopwatch4.ElapsedMilliseconds;
			Stopwatch stopwatch5 = new Stopwatch();
			stopwatch5.Start();
			for (int num8 = 0; num8 != num2; num8++)
			{
				Physics.RaycastAllMasking(this.outRayhit, position, normalized, num, playerInteractionMask, num3, flag);
			}
			stopwatch5.Stop();
			this.timeRaycastMasking = (float)stopwatch5.ElapsedMilliseconds;
		}
		this.runIteration = false;
	}

	// Token: 0x04004286 RID: 17030
	private Collider[] outCollider;

	// Token: 0x04004287 RID: 17031
	private RaycastHit[] outRayhit;

	// Token: 0x04004288 RID: 17032
	public CollisionUtils.Type filter = CollisionUtils.Type.All;

	// Token: 0x04004289 RID: 17033
	public float distance = 2f;

	// Token: 0x0400428A RID: 17034
	public bool raycastInsideOut;

	// Token: 0x0400428B RID: 17035
	public int iterations = 1;

	// Token: 0x0400428C RID: 17036
	public bool runIteration;

	// Token: 0x0400428D RID: 17037
	public float timeOverlap;

	// Token: 0x0400428E RID: 17038
	public float timeOverlapPreAlloc;

	// Token: 0x0400428F RID: 17039
	public float timeOverlapMasking;

	// Token: 0x04004290 RID: 17040
	public float timeRaycast;

	// Token: 0x04004291 RID: 17041
	public float timeRaycastMasking;
}