using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000537 RID: 1335
public class SubmarineBreakBoards : MonoBehaviour, IPreAwake
{
	// Token: 0x060022C5 RID: 8901 RVA: 0x001236E0 File Offset: 0x001218E0
	public bool PreAwake(int callcount)
	{
		this.startBreak = SignalIn.Create("startBreak", base.gameObject, new Action(this.DoStartBreak));
		this.loadBroken = SignalIn.Create("loadBroken", base.gameObject, new Action(this.DoLoadBroken));
		this.isBroken = SignalOut.Create("isBroken", base.gameObject);
		return true;
	}

	// Token: 0x060022C6 RID: 8902 RVA: 0x00123748 File Offset: 0x00121948
	private void Start()
	{
		if (this.spotLighttoFadeOut != null)
		{
			this.startLightIntensity = this.spotLighttoFadeOut.intensity;
		}
	}

	// Token: 0x060022C7 RID: 8903 RVA: 0x00123778 File Offset: 0x00121978
	private void Update()
	{
		if (this.lightFadeActive && this.spotLighttoFadeOut != null)
		{
			this.fadeTimer += Time.deltaTime;
			this.spotLighttoFadeOut.intensity = Mathf.InverseLerp(0.55f, 0f, this.fadeTimer) * this.startLightIntensity;
		}
	}

	// Token: 0x060022C8 RID: 8904 RVA: 0x001237DC File Offset: 0x001219DC
	private void HandleDynamicObjects()
	{
		Vector3 velocity = LevelGlobals.sewerSubmarine.GetComponent<Rigidbody>().velocity;
		foreach (Rigidbody rigidbody in this.dynamicObjects)
		{
			Vector3 position = rigidbody.transform.position;
			position.z = 0f;
			Vector3 vector = (rigidbody.transform.position - position).normalized * 3f;
			Vector3 vector2 = (vector + velocity.normalized) * 0.5f * velocity.magnitude;
			rigidbody.isKinematic = false;
			rigidbody.WakeUp();
			rigidbody.AddForce(vector2);
			NoGravityWaterObject component = rigidbody.GetComponent<NoGravityWaterObject>();
			if (component)
			{
				component.DoActivateScript();
			}
		}
	}

	// Token: 0x060022C9 RID: 8905 RVA: 0x001238E0 File Offset: 0x00121AE0
	private void DoStartBreak()
	{
		this.lightFadeActive = true;
		foreach (GameObject gameObject in this.objectsToDisable)
		{
			gameObject.SetActive(false);
		}
		foreach (GameObject gameObject2 in this.objectsToEnable)
		{
			gameObject2.SetActive(true);
		}
		foreach (ParticleSystem particleSystem in this.particlesToStart)
		{
			particleSystem.Play();
		}
		this.animToPlay.Play(this.animName);
		this.HandleDynamicObjects();
	}

	// Token: 0x060022CA RID: 8906 RVA: 0x00123A14 File Offset: 0x00121C14
	private void DoLoadBroken()
	{
		if (this.spotLighttoFadeOut != null)
		{
			this.spotLighttoFadeOut.intensity = 0f;
		}
		foreach (GameObject gameObject in this.objectsToDisable)
		{
			gameObject.SetActive(false);
		}
		foreach (GameObject gameObject2 in this.objectsToEnable)
		{
			gameObject2.SetActive(true);
		}
		foreach (Rigidbody rigidbody in this.dynamicObjects)
		{
			rigidbody.gameObject.SetActive(false);
		}
		foreach (GameObject gameObject3 in this.disableAtLoad)
		{
			gameObject3.SetActive(false);
		}
		this.animToPlay[this.animName].normalizedTime = 1f;
		this.animToPlay.Play(this.animName);
	}

	// Token: 0x040040EC RID: 16620
	public List<GameObject> objectsToDisable;

	// Token: 0x040040ED RID: 16621
	public List<GameObject> objectsToEnable;

	// Token: 0x040040EE RID: 16622
	public List<ParticleSystem> particlesToStart;

	// Token: 0x040040EF RID: 16623
	public Animation animToPlay;

	// Token: 0x040040F0 RID: 16624
	public string animName;

	// Token: 0x040040F1 RID: 16625
	public Light spotLighttoFadeOut;

	// Token: 0x040040F2 RID: 16626
	public List<Rigidbody> dynamicObjects;

	// Token: 0x040040F3 RID: 16627
	public List<GameObject> disableAtLoad;

	// Token: 0x040040F4 RID: 16628
	private SignalIn startBreak;

	// Token: 0x040040F5 RID: 16629
	private SignalIn loadBroken;

	// Token: 0x040040F6 RID: 16630
	private SignalOut isBroken;

	// Token: 0x040040F7 RID: 16631
	private bool lightFadeActive;

	// Token: 0x040040F8 RID: 16632
	private float startLightIntensity;

	// Token: 0x040040F9 RID: 16633
	private float fadeTimer;
}