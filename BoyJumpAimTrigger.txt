using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000155 RID: 341
public class BoyJumpAimTrigger : MonoBehaviour, IPreAwake
{
	// Token: 0x06000A39 RID: 2617 RVA: 0x00065694 File Offset: 0x00063894
	public bool PreAwake(int callcount)
	{
		if (this.target == null)
		{
			this.target = base.gameObject;
		}
		this.activate = SignalIn.Create("activate", base.gameObject, delegate
		{
			this.isActive = true;
		});
		this.deactivate = SignalIn.Create("deactivate", base.gameObject, delegate
		{
			this.isActive = false;
		});
		return true;
	}

	// Token: 0x06000A3A RID: 2618 RVA: 0x00065704 File Offset: 0x00063904
	private void OnTriggerEnter(Collider coll)
	{
		BoyProbe component = coll.GetComponent<BoyProbe>();
		if (component && !this.boysInsideList.Contains(component.boy))
		{
			if (component.boy == ScriptGlobals.boy)
			{
				AlbinoGroupManager.mInstance.SetAlbinoJumpAimTarget(this);
			}
			this.boysInsideList.Add(component.boy);
		}
	}

	// Token: 0x06000A3B RID: 2619 RVA: 0x0006576C File Offset: 0x0006396C
	private void OnTriggerExit(Collider coll)
	{
		BoyProbe component = coll.GetComponent<BoyProbe>();
		if (component)
		{
			if (component.boy == ScriptGlobals.boy)
			{
				AlbinoGroupManager.mInstance.SetAlbinoJumpAimTarget(null);
			}
			this.boysInsideList.Remove(component.boy);
			this.boysBeingAimed.Remove(component.boy);
			this.allowHelp = false;
		}
	}

	// Token: 0x06000A3C RID: 2620 RVA: 0x000657D8 File Offset: 0x000639D8
	private vector2f PreciseJumpCorrectionSpeed(Boy boy, bool always)
	{
		float num = this.target.transform.position.x - boy.pos.x;
		float x = boy.velocity.x;
		if (Mathf.Abs(x) < this.minCorrectionSpeed)
		{
			return vector2f.zero;
		}
		if (Mathf.Abs(x) > Mathf.Abs(this.originalXSpeed))
		{
			this.originalXSpeed = x;
		}
		if (Mathf.Abs(this.originalXSpeed) < Mathf.Max(1.5f, this.minCorrectionSpeed))
		{
			return vector2f.zero;
		}
		if (this.originalXSpeed * num > 0f)
		{
			float num2 = num / this.originalXSpeed;
			if (num2 > 0.02f)
			{
				float num3 = num2 * num2;
				float num4 = boy.pos.y + boy.velocity.y * num2 - 5f * num3;
				float num5 = this.target.transform.position.y - num4;
				if (num5 < Mathf.Clamp(2f * num2, 0.2f, this.maxXCorrectionDist) || always)
				{
					float num6 = num5 / num2;
					if (num6 < this.maxCorrectionSpeed)
					{
						return new vector2f(this.originalXSpeed - boy.velocity.x, num6 * Time.deltaTime * 8f);
					}
				}
			}
		}
		return vector2f.zero;
	}

	// Token: 0x06000A3D RID: 2621 RVA: 0x00065954 File Offset: 0x00063B54
	private vector2f ThrowChasmCorrectionSpeed(Boy boy)
	{
		float num = this.target.transform.position.x - boy.pos.x;
		float x = boy.velocity.x;
		if (Mathf.Abs(x) > Mathf.Abs(this.originalXSpeed))
		{
			this.originalXSpeed = x;
		}
		if (this.originalXSpeed * num > 0f)
		{
			float num2 = num / this.originalXSpeed;
			if (num2 > 0.2f)
			{
				float num3 = num2 * num2;
				float num4 = this.target.transform.position.y - boy.pos.y;
				float num5 = (num4 + 4f * num3) / num2;
				return new vector2f(this.originalXSpeed - boy.velocity.x, Mathf.Max(0f, num5 - boy.velocity.y) * Time.deltaTime * 5f);
			}
		}
		return vector2f.zero;
	}

	// Token: 0x06000A3E RID: 2622 RVA: 0x00065A64 File Offset: 0x00063C64
	private vector2f GetCorrectionSpeed(Boy boy, bool always = false)
	{
		if (this.throwOverChasmMode)
		{
			return this.ThrowChasmCorrectionSpeed(boy);
		}
		if (this.preciseJumpHelper)
		{
			return this.PreciseJumpCorrectionSpeed(boy, always);
		}
		Vector3 velocity = boy.velocity3;
		bool flag = Mathf.Abs(velocity.x) > 2f;
		if (velocity.y > 0f || flag)
		{
			float num = velocity.y * 0.1f;
			if (num > 0.05f || flag)
			{
				float num2 = -5f * num * num + velocity.y * num + boy.pos.y;
				if (num2 > this.target.transform.position.y - 0.7f)
				{
					float num3 = velocity.x * num;
					float num4 = this.target.transform.position.x - boy.pos.x - num3;
					if (flag)
					{
						float num5 = (this.target.transform.position.x - boy.pos.x) / velocity.x;
						if (num5 > 0.03f)
						{
							float num6 = boy.pos.y - 5f * num5 * num5 + boy.velocity.y * num5;
							Vector3 vector;
							vector..ctor(this.target.transform.position.x, num6, 0f);
							Debug.DrawLine(vector, vector + Vector3.right, Color.red, 2f);
							float num7 = num6 + 0.7f - this.target.transform.position.y;
							float num8 = -2f;
							float num9 = Mathf.Max(-num5 * 3f, num8);
							if (num7 < 0f && num7 > num9)
							{
								return new vector2f(0f, -(4f * Time.deltaTime / num5) * num7);
							}
						}
					}
					else
					{
						bool flag2 = false;
						if (boy.history.ElapsedSince(BoyHistory.Event.Jump) < 0.3f)
						{
							BoyJumpState boyJumpState = boy.state as BoyJumpState;
							if (boyJumpState != null)
							{
								flag2 = (boyJumpState.state == BoyJumpState.State.JumpForward);
							}
						}
						if ((!this.allowBackwardAutoAim || flag2) && num4 * boy.facing < 0f)
						{
							return vector2f.zero;
						}
						if (Mathf.Abs(num4) <= this.maxXCorrectionDist)
						{
							return new vector2f(0.5f * num4 / num, 0f);
						}
					}
				}
			}
		}
		return vector2f.zero;
	}

	// Token: 0x06000A3F RID: 2623 RVA: 0x00065D30 File Offset: 0x00063F30
	private void FixedUpdate()
	{
		if (this.target != null && this.isActive)
		{
			int i = 0;
			int count = this.boysInsideList.Count;
			while (i < count)
			{
				Boy boy = this.boysInsideList[i];
				if ((this.allowHelp || !this.throwOverChasmMode || this.preciseJumpHelper) && !this.boysBeingAimed.Contains(boy))
				{
					BoyJumpState boyJumpState = boy.state as BoyJumpState;
					if (boyJumpState != null)
					{
						vector2f correctionSpeed = this.GetCorrectionSpeed(boy, false);
						if (correctionSpeed.x < this.maxCorrectionSpeed && (correctionSpeed.sqrMagnitude > 0.01f || !this.preciseJumpHelper))
						{
							this.allowHelp = false;
							this.originalXSpeed = boy.velocity.x;
							this.boysBeingAimed.Add(boy);
						}
					}
				}
				if (!(boy.state is BoyJumpState))
				{
					AlbinoGroupManager.AlbinoJumpState jumpState = AlbinoGroupManager.mInstance.GetJumpState();
					if (jumpState == AlbinoGroupManager.AlbinoJumpState.jumping)
					{
						this.allowHelp = true;
					}
					else if (jumpState != AlbinoGroupManager.AlbinoJumpState.Inactive)
					{
						this.allowHelp = false;
					}
				}
				else if (!(boy.state is BoyCustomAnimState))
				{
					this.allowHelp = false;
				}
				i++;
			}
			for (int j = this.boysBeingAimed.Count - 1; j >= 0; j--)
			{
				Boy boy2 = this.boysBeingAimed[j];
				BoyJumpState boyJumpState2 = boy2.state as BoyJumpState;
				if (boyJumpState2 != null)
				{
					vector2f correctionSpeed2 = this.GetCorrectionSpeed(boy2, true);
					boy2.AddVelocity(correctionSpeed2, null, 1f);
				}
				else
				{
					this.boysBeingAimed.RemoveAt(j);
				}
			}
		}
	}

	// Token: 0x040011B0 RID: 4528
	public GameObject target;

	// Token: 0x040011B1 RID: 4529
	public float maxCorrectionSpeed = 2f;

	// Token: 0x040011B2 RID: 4530
	public float maxXCorrectionDist = 1.2f;

	// Token: 0x040011B3 RID: 4531
	public float minCorrectionSpeed;

	// Token: 0x040011B4 RID: 4532
	private List<Boy> boysInsideList = new List<Boy>();

	// Token: 0x040011B5 RID: 4533
	private List<Boy> boysBeingAimed = new List<Boy>();

	// Token: 0x040011B6 RID: 4534
	public bool isActive = true;

	// Token: 0x040011B7 RID: 4535
	public bool throwOverChasmMode;

	// Token: 0x040011B8 RID: 4536
	public bool preciseJumpHelper;

	// Token: 0x040011B9 RID: 4537
	public bool preferLeftThrow;

	// Token: 0x040011BA RID: 4538
	public bool preferRightThrow;

	// Token: 0x040011BB RID: 4539
	public bool allowBackwardAutoAim = true;

	// Token: 0x040011BC RID: 4540
	public SignalIn activate;

	// Token: 0x040011BD RID: 4541
	public SignalIn deactivate;

	// Token: 0x040011BE RID: 4542
	private float originalXSpeed;

	// Token: 0x040011BF RID: 4543
	private bool allowHelp;
}