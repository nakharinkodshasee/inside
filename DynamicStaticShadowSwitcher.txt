using System;
using UnityEngine;

// Token: 0x02000182 RID: 386
public class DynamicStaticShadowSwitcher : MonoBehaviour
{
	// Token: 0x06000B5F RID: 2911 RVA: 0x00070234 File Offset: 0x0006E434
	[LateProcessBuild(0)]
	private void OnPreprocess()
	{
		if (this.preprocessed)
		{
			return;
		}
		this.preprocessed = true;
		this.cachedLight = base.GetComponent<Light>();
		Vector3 position = base.transform.position;
		Vector3 forward = base.transform.forward;
		this.cachedLight.useStaticShadows = true;
		this.usingStaticShadows = true;
		Vector3 vector = Vector3Fast.zero;
		Vector3 vector2 = Vector3Fast.zero;
		Vector3 vector3 = Vector3Fast.zero;
		if (this.cachedLight.type == 4)
		{
			vector = position + forward * this.cachedLight.dirLocalScale.z;
			vector2 = base.transform.right * this.cachedLight.dirLocalScale.x * 0.5f;
			vector3 = base.transform.up * this.cachedLight.dirLocalScale.y * 0.5f;
		}
		else
		{
			if (this.cachedLight.type != null)
			{
				return;
			}
			vector = position + forward * this.cachedLight.range;
			float num = Mathf.Sin(0.017453292f * this.cachedLight.spotAngle * 0.5f) * this.cachedLight.range;
			vector2 = base.transform.right * num;
			vector3 = base.transform.up * num;
		}
		this.xRange.x = float.MaxValue;
		this.xRange.y = float.MinValue;
		this.yRange.x = float.MaxValue;
		this.yRange.y = float.MinValue;
		float planeZ = this.gamePlaneZ;
		int num2 = 0;
		vector2f[] array = new vector2f[6];
		this.__vertex[DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.____] = position - vector2 - vector3;
		this.__vertex[DynamicStaticShadowSwitcher.XBIT | DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.____] = position + vector2 - vector3;
		this.__vertex[DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.YBIT | DynamicStaticShadowSwitcher.____] = position - vector2 + vector3;
		this.__vertex[DynamicStaticShadowSwitcher.XBIT | DynamicStaticShadowSwitcher.YBIT | DynamicStaticShadowSwitcher.____] = position + vector2 + vector3;
		this.__vertex[DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.ZBIT] = vector - vector2 - vector3;
		this.__vertex[DynamicStaticShadowSwitcher.XBIT | DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.ZBIT] = vector + vector2 - vector3;
		this.__vertex[DynamicStaticShadowSwitcher.____ | DynamicStaticShadowSwitcher.YBIT | DynamicStaticShadowSwitcher.ZBIT] = vector - vector2 + vector3;
		this.__vertex[DynamicStaticShadowSwitcher.XBIT | DynamicStaticShadowSwitcher.YBIT | DynamicStaticShadowSwitcher.ZBIT] = vector + vector2 + vector3;
		int num3 = 0;
		for (int i = 1; i < 8; i++)
		{
			if (this.__vertex[i].z < this.__vertex[num3].z)
			{
				num3 = i;
			}
		}
		this.__paths[0] = num3;
		this.__paths[4] = num3;
		this.__paths[8] = num3;
		for (int j = 0; j < 3; j++)
		{
			this.__paths[1 + j] = (this.__paths[0 + j] ^ DynamicStaticShadowSwitcher.__bits[j % 3]);
			this.__paths[5 + j] = (this.__paths[4 + j] ^ DynamicStaticShadowSwitcher.__bits[(j + 1) % 3]);
			this.__paths[9 + j] = (this.__paths[8 + j] ^ DynamicStaticShadowSwitcher.__bits[(j + 2) % 3]);
		}
		int marker = num2;
		for (int k = 0; k < 3; k++)
		{
			int num4 = k << 2;
			for (int l = num4; l < num4 + 3; l++)
			{
				Vector3 vector4 = this.__vertex[this.__paths[l]];
				Vector3 vector5 = this.__vertex[this.__paths[l + 1]];
				if (ZDecomposition.Edge(planeZ, ref vector4, ref vector5, ref array, ref num2))
				{
					break;
				}
			}
			Vector3 vector6 = this.__vertex[this.__paths[num4 + 2]];
			Vector3 vector7 = this.__vertex[this.__paths[(num4 + 4) % 12 + 1]];
			ZDecomposition.Edge(planeZ, ref vector6, ref vector7, ref array, ref num2);
		}
		ZDecomposition.RemoveDegenerateConvex(ref array, ref num2, marker);
		for (int m = 0; m < num2; m++)
		{
			vector2f vector2f = array[m];
			if (vector2f.x < this.xRange.x)
			{
				this.xRange.x = vector2f.x;
			}
			if (vector2f.x > this.xRange.y)
			{
				this.xRange.y = vector2f.x;
			}
			if (vector2f.y < this.yRange.x)
			{
				this.yRange.x = vector2f.y;
			}
			if (vector2f.y > this.yRange.y)
			{
				this.yRange.y = vector2f.y;
			}
		}
	}

	// Token: 0x06000B60 RID: 2912 RVA: 0x00070810 File Offset: 0x0006EA10
	private void Update()
	{
		bool flag = false;
		Character mainCharacter = ScriptGlobals.mainCharacter;
		if (mainCharacter == null || !mainCharacter.isCharacterActive)
		{
			return;
		}
		Vector3 vector = mainCharacter.pos3;
		float num = 1f;
		if (mainCharacter is Huddle)
		{
			num = 2.5f;
		}
		if (vector.x + num > this.xRange.x && vector.x - num < this.xRange.y && vector.y + num > this.yRange.x && vector.y - num < this.yRange.y)
		{
			flag = true;
			if (!this.usingStaticShadows)
			{
				return;
			}
		}
		if (this.useMindHatDudes && !flag)
		{
			int i = 0;
			int count = MindHatCompanionController.instance.companionList.Count;
			while (i < count)
			{
				Boy boy = MindHatCompanionController.instance.companionList[i];
				vector2f pos = boy.pos;
				if (pos.x + 1f > this.xRange.x && pos.x - 1f < this.xRange.y && pos.y + 1f > this.yRange.x && pos.y - 1f < this.yRange.y)
				{
					flag = true;
					if (!this.usingStaticShadows)
					{
						return;
					}
					break;
				}
				else
				{
					i++;
				}
			}
		}
		if (this.useAlbinos && !flag)
		{
			bool flag2 = false;
			if (!object.ReferenceEquals(this.albinoThatWasInside, null))
			{
				vector = this.albinoThatWasInside.cachedWantedPos;
				if (vector.x + 2f > this.xRange.x && vector.x - 2f < this.xRange.y && vector.y + 2f > this.yRange.x && vector.y - 2f < this.yRange.y)
				{
					flag2 = true;
					flag = true;
					if (!this.usingStaticShadows)
					{
						return;
					}
				}
				else
				{
					this.albinoThatWasInside = null;
				}
			}
			if (!flag2)
			{
				FastList<AlbinoAI> activeAlbinos = AlbinoGroupManager.mInstance.GetActiveAlbinos();
				int j = 0;
				int size = activeAlbinos.size;
				while (j < size)
				{
					AlbinoAI albinoAI = activeAlbinos.raw[j];
					vector = albinoAI.cachedWantedPos;
					if (vector.x + 2f > this.xRange.x && vector.x - 2f < this.xRange.y && vector.y + 2f > this.yRange.x && vector.y - 2f < this.yRange.y)
					{
						this.albinoThatWasInside = albinoAI;
						flag = true;
						if (!this.usingStaticShadows)
						{
							return;
						}
						break;
					}
					else
					{
						j++;
					}
				}
			}
		}
		if (flag)
		{
			this.usingStaticShadows = false;
			this.cachedLight.useStaticShadows = false;
		}
		else if (!this.usingStaticShadows)
		{
			this.usingStaticShadows = true;
			this.cachedLight.useStaticShadows = true;
		}
	}

	// Token: 0x040013A6 RID: 5030
	public float gamePlaneZ;

	// Token: 0x040013A7 RID: 5031
	public bool useMindHatDudes;

	// Token: 0x040013A8 RID: 5032
	public bool useAlbinos;

	// Token: 0x040013A9 RID: 5033
	private AlbinoAI albinoThatWasInside;

	// Token: 0x040013AA RID: 5034
	[HideInInspector]
	[SerializeField]
	private Vector3[] genericObjectPos;

	// Token: 0x040013AB RID: 5035
	[SerializeField]
	[HideInInspector]
	private Vector2 yRange = Vector2.zero;

	// Token: 0x040013AC RID: 5036
	[HideInInspector]
	[SerializeField]
	private Vector2 xRange = Vector2.zero;

	// Token: 0x040013AD RID: 5037
	[HideInInspector]
	[SerializeField]
	private Light cachedLight;

	// Token: 0x040013AE RID: 5038
	[HideInInspector]
	[SerializeField]
	private bool usingStaticShadows = true;

	// Token: 0x040013AF RID: 5039
	[SerializeField]
	[HideInInspector]
	private bool preprocessed;

	// Token: 0x040013B0 RID: 5040
	private Vector3[] __vertex = new Vector3[8];

	// Token: 0x040013B1 RID: 5041
	private int[] __paths = new int[12];

	// Token: 0x040013B2 RID: 5042
	private static int ____ = 0;

	// Token: 0x040013B3 RID: 5043
	private static int XBIT = 1;

	// Token: 0x040013B4 RID: 5044
	private static int YBIT = 2;

	// Token: 0x040013B5 RID: 5045
	private static int ZBIT = 4;

	// Token: 0x040013B6 RID: 5046
	private static int[] __bits = new int[]
	{
		DynamicStaticShadowSwitcher.XBIT,
		DynamicStaticShadowSwitcher.YBIT,
		DynamicStaticShadowSwitcher.ZBIT
	};

	// Token: 0x040013B7 RID: 5047
	private int genObjToTest = -1;
}