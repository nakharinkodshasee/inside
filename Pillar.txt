using System;
using UnityEngine;

// Token: 0x0200020E RID: 526
public class Pillar : MonoBehaviour, IFastEventExListener<ImpactEffect>, IPreAwake
{
	// Token: 0x0600103E RID: 4158 RVA: 0x000995BC File Offset: 0x000977BC
	public bool PreAwake(int callcount)
	{
		this.fallSignal = SignalOut.Create("fallSignal", base.gameObject);
		return true;
	}

	// Token: 0x0600103F RID: 4159 RVA: 0x000995D8 File Offset: 0x000977D8
	private void Start()
	{
		this.collisionAnalyzer = base.GetComponent<CollisionAnalyzer>();
		this.collisionAnalyzer.GetAggregator().RegisterImpactEvent(this, ref this.impactEffectHandle);
		this.pillarRigidbody = base.GetComponent<Rigidbody>();
		this.pillarTransform = base.transform;
		this.SetIdleState();
	}

	// Token: 0x06001040 RID: 4160 RVA: 0x00099628 File Offset: 0x00097828
	private void OnDestroy()
	{
		this.collisionAnalyzer.GetAggregator().UnregisterImpactEvent(ref this.impactEffectHandle);
	}

	// Token: 0x06001041 RID: 4161 RVA: 0x00099640 File Offset: 0x00097840
	public void OnFastEventEx(FastEventEx<ImpactEffect> sender, ref ImpactEffect arg)
	{
		if (arg.impactForce > 5f)
		{
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.Spike, 0.5f, 0.3f, 0, 0f);
		}
	}

	// Token: 0x06001042 RID: 4162 RVA: 0x00099670 File Offset: 0x00097870
	private void SetIdleState()
	{
		this.state = Pillar.State.Idle;
	}

	// Token: 0x06001043 RID: 4163 RVA: 0x0009967C File Offset: 0x0009787C
	private void IdleState()
	{
		if (this.GrabCheck())
		{
			this.SetGrabState();
		}
	}

	// Token: 0x06001044 RID: 4164 RVA: 0x00099690 File Offset: 0x00097890
	private void SetGrabState()
	{
		Device.SetVoicePassive();
		this.state = Pillar.State.Grab;
	}

	// Token: 0x06001045 RID: 4165 RVA: 0x000996A0 File Offset: 0x000978A0
	private void GrabState()
	{
		if (!this.GrabCheck())
		{
			this.SetIdleState();
			Device.SetVoiceNone();
			return;
		}
		float x = ScriptGlobals.boy.input.stick.x;
		float magnitude = this.pillarRigidbody.angularVelocity.magnitude;
		bool flag = Mathf.Abs(x) > this.sensitivity;
		float num = this.pillarRigidbody.rotation.eulerAngles.z;
		if (num > 180f)
		{
			num -= 360f;
		}
		num -= this.initialRot;
		if (flag)
		{
			float num2 = Mathf.Sign(x);
			if (num2 != this.pushDir)
			{
				float num3 = (float)((this.pushDir != 0f && (num2 != -1f || Mathf.Abs(num) >= 1f)) ? this.forceOtherPush : this.forceFirstPush);
				if (this.debug)
				{
				}
				Vector3 zero = Vector3.zero;
				zero.x = num3 * num2;
				this.pillarRigidbody.AddForceAtPosition(zero, this.ForceTarget.transform.position);
				this.pushDir = num2;
			}
			else
			{
				Vector3 zero2 = Vector3.zero;
				zero2.x = num2 * (float)this.forceStickHeld * Time.deltaTime;
				float num4 = 4f;
				if (num2 * num < 0f)
				{
					zero2.x *= (num4 - Mathf.Min(Mathf.Abs(num), num4)) / num4;
				}
				this.pillarRigidbody.AddForceAtPosition(zero2, this.ForceTarget.transform.position);
			}
		}
		if (flag != this.previouslyPushing)
		{
			if (flag)
			{
				Device.SetVoiceActive();
			}
			else
			{
				Device.SetVoicePassive();
			}
		}
		if (this.pushDir != 0f && Mathf.Abs(x) < this.still && magnitude < 0.004f && Mathf.Abs(num) < 1.5f)
		{
			if (this.debug)
			{
			}
			this.pushDir = 0f;
		}
		this.previouslyPushing = flag;
	}

	// Token: 0x06001046 RID: 4166 RVA: 0x000998CC File Offset: 0x00097ACC
	private void FixedUpdate()
	{
		if (this.state == Pillar.State.Idle)
		{
			this.IdleState();
		}
		else if (this.state == Pillar.State.Grab)
		{
			this.GrabState();
		}
		if (this.reEnableGrabTimer > 0f)
		{
			this.reEnableGrabTimer -= Time.deltaTime;
			if (this.reEnableGrabTimer <= 0f)
			{
				NoGrab component = base.GetComponent<NoGrab>();
				if (component)
				{
					component.enabled = false;
				}
			}
		}
		this.FallCheck();
	}

	// Token: 0x06001047 RID: 4167 RVA: 0x00099954 File Offset: 0x00097B54
	private void FallCheck()
	{
		if (this.fallen)
		{
			return;
		}
		float num = Vector3.Dot(Vector3.up, this.pillarTransform.up);
		if (num < 0.96f && !(ScriptGlobals.boy.state is BoyGrabState))
		{
			BoyDepthObstruction component = base.GetComponent<BoyDepthObstruction>();
			if (component)
			{
				component.depthClimbdown = true;
				component.depthClimbup = true;
				NoGrab component2 = base.GetComponent<NoGrab>();
				if (component2)
				{
					this.reEnableGrabTimer = 0.75f;
					component2.enabled = true;
				}
				if (this.GrabCheck() && ScriptGlobals.boy.state is BoyGrabState)
				{
					BoyUtils.ClearState(ScriptGlobals.boy, 0.35f);
				}
			}
			this.fallSignal.Signal();
			this.fallen = true;
		}
	}

	// Token: 0x06001048 RID: 4168 RVA: 0x00099A28 File Offset: 0x00097C28
	private bool GrabCheck()
	{
		BoyGrabState boyGrabState = ScriptGlobals.boy.state as BoyGrabState;
		return boyGrabState != null && boyGrabState.body == this.pillarRigidbody;
	}

	// Token: 0x04001D4B RID: 7499
	public bool fallen;

	// Token: 0x04001D4C RID: 7500
	public Transform ForceTarget;

	// Token: 0x04001D4D RID: 7501
	public int forceFirstPush = 120;

	// Token: 0x04001D4E RID: 7502
	public int forceOtherPush = 40;

	// Token: 0x04001D4F RID: 7503
	public int forceStickHeld = 8;

	// Token: 0x04001D50 RID: 7504
	public float initialRot = -1.1f;

	// Token: 0x04001D51 RID: 7505
	public bool debug;

	// Token: 0x04001D52 RID: 7506
	private SignalOut fallSignal;

	// Token: 0x04001D53 RID: 7507
	private Pillar.State state;

	// Token: 0x04001D54 RID: 7508
	private float sensitivity = 0.7f;

	// Token: 0x04001D55 RID: 7509
	private float still = 0.25f;

	// Token: 0x04001D56 RID: 7510
	private Rigidbody pillarRigidbody;

	// Token: 0x04001D57 RID: 7511
	private Transform pillarTransform;

	// Token: 0x04001D58 RID: 7512
	private float pushDir;

	// Token: 0x04001D59 RID: 7513
	private bool previouslyPushing;

	// Token: 0x04001D5A RID: 7514
	private CollisionAnalyzer collisionAnalyzer;

	// Token: 0x04001D5B RID: 7515
	private float reEnableGrabTimer;

	// Token: 0x04001D5C RID: 7516
	private int impactEffectHandle = -1;

	// Token: 0x0200020F RID: 527
	private enum State
	{
		// Token: 0x04001D5E RID: 7518
		None,
		// Token: 0x04001D5F RID: 7519
		Idle,
		// Token: 0x04001D60 RID: 7520
		Grab
	}
}
