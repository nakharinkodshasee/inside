using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000130 RID: 304
public class MindhatDudeAudio : MonoBehaviour, IUnityAnimEventHandler, IUnityAnimEventComponent
{
	// Token: 0x06000924 RID: 2340 RVA: 0x0005E240 File Offset: 0x0005C440
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.walkFootStepEvent = new AudioEventSimple("mindhat_walk");
		this.jogFootStepEvent = new AudioEventSimple("mindhat_jog");
		this.waterImpactEvent = new AudioEventSimple("mindhat_water_impact");
		this.landEvent = new AudioEventSimple("mindhat_land_1foot_mp");
		this.walkFootStepEvent.Initialize();
		this.jogFootStepEvent.Initialize();
		this.waterImpactEvent.Initialize();
		this.landEvent.Initialize();
		WildcardMatrix boyFoleyMatrix = WildcardMatrixDatabase.GetBoyFoleyMatrix();
		this.audioEventMatrixFoley = new AudioEventMatrix();
		this.audioEventMatrixFoley.Preprocess(boyFoleyMatrix, "mindhat_", string.Empty);
		this.akGameObj = AudioUtils.EnsureAkGameObj(base.gameObject, null);
		this.waterProbe = base.GetComponent<WaterProbe>();
	}

	// Token: 0x06000925 RID: 2341 RVA: 0x0005E314 File Offset: 0x0005C514
	private void Start()
	{
		this.OnPreProcess();
		if (this.boy == null)
		{
		}
		this.fxMatDetector = new EffectMaterialDetector(base.gameObject);
	}

	// Token: 0x06000926 RID: 2342 RVA: 0x0005E34C File Offset: 0x0005C54C
	private void Update()
	{
		if (this.boy)
		{
			bool isInWater = this.waterProbe.IsInWater;
			Collider groundCollider = this.boy.status.groundCollider;
			this.fxMatDetector.OnUpdate(this.boy.status.groundCollider, this.boy.status.water);
			if (this.fxMatDetector.fxMatChanged)
			{
				SoundEngine.Switches.material.Set((int)this.fxMatDetector.currentFxMat, this.akGameObj);
			}
			if (isInWater != this.wasInWater && isInWater && this.boy.specialBoyMode != Boy.SpecialBoyMode.InsideSub)
			{
				float num = Mathf.Abs(this.boy.velocity.y);
				float value = Mathf.Clamp01(num * 5f);
				SoundEngine.RTPCs.boyImpact.Set01ClampedFast(value, this.akGameObj);
				this.waterImpactEvent.PostFast(this.akGameObj);
			}
			this.wasInWater = isInWater;
		}
	}

	// Token: 0x06000927 RID: 2343 RVA: 0x0005E450 File Offset: 0x0005C650
	public void HandleAnimEvent(IUnityAnimEventTrigger trigger, UnityAnimEvent animEvent)
	{
		if (base.enabled && animEvent.isAudioEvent)
		{
			if (animEvent.type == UnityAnimEvent.AudioType.Footstep)
			{
				float magnitude = this.boy.velocity3.magnitude;
				if (magnitude <= 2f)
				{
					this.walkFootStepEvent.PostFast(this.akGameObj);
				}
				else
				{
					this.jogFootStepEvent.PostFast(this.akGameObj);
				}
			}
			else if (animEvent.type == UnityAnimEvent.AudioType.Custom)
			{
				animEvent.audioEvent.PostFast(this.akGameObj);
			}
			else if (animEvent.type == UnityAnimEvent.AudioType.Matrix)
			{
				string eventName;
				uint value = this.audioEventMatrixFoley.GetValue(animEvent.matrixKeyIndex, out eventName);
				SoundEngine.PostEventByIDFast(value, eventName, this.akGameObj);
			}
		}
	}

	// Token: 0x06000928 RID: 2344 RVA: 0x0005E520 File Offset: 0x0005C720
	public void HandleAnimEventEditor(IUnityAnimEventTrigger trigger, UnityAnimEvent animEvent)
	{
		if (base.enabled && animEvent.isAudioEvent)
		{
			string eventName;
			if (animEvent.type == UnityAnimEvent.AudioType.Footstep)
			{
				eventName = this.walkFootStepEvent.eventName;
			}
			else
			{
				eventName = AudioEventNames.GetEventName(animEvent, "mindhat", null);
			}
			EditorAudio.PostEvent(eventName);
		}
	}

	// Token: 0x06000929 RID: 2345 RVA: 0x0005E574 File Offset: 0x0005C774
	public void HandleContinuousAnimEvent(IUnityAnimEventTrigger trigger, UnityAnimEvent animEvent, bool isActive)
	{
	}

	// Token: 0x0600092A RID: 2346 RVA: 0x0005E578 File Offset: 0x0005C778
	public void HandleAnimationChange(IUnityAnimEventTrigger trigger, Object oldAnim, Object newAnim)
	{
		VisualBoyJump visualBoyJump = oldAnim as VisualBoyJump;
		VisualBoyGrab visualBoyGrab = newAnim as VisualBoyGrab;
		if (visualBoyJump != null && visualBoyGrab != null)
		{
			this.landEvent.PostFast(this.akGameObj);
		}
	}

	// Token: 0x0600092B RID: 2347 RVA: 0x0005E5BC File Offset: 0x0005C7BC
	public void PreprocessUnityAnimEvents(int animID, List<UnityAnimEvent> events)
	{
	}

	// Token: 0x0600092C RID: 2348 RVA: 0x0005E5C0 File Offset: 0x0005C7C0
	virtual bool get_enabled()
	{
		return base.enabled;
	}

	// Token: 0x0600092D RID: 2349 RVA: 0x0005E5C8 File Offset: 0x0005C7C8
	virtual GameObject get_gameObject()
	{
		return base.gameObject;
	}

	// Token: 0x04000F63 RID: 3939
	private const string prefix = "mindhat_";

	// Token: 0x04000F64 RID: 3940
	private const float walkToJogThreshold = 2f;

	// Token: 0x04000F65 RID: 3941
	private const float fallImpactScale = 5f;

	// Token: 0x04000F66 RID: 3942
	public Boy boy;

	// Token: 0x04000F67 RID: 3943
	private bool wasInWater;

	// Token: 0x04000F68 RID: 3944
	private EffectMaterialDetector fxMatDetector;

	// Token: 0x04000F69 RID: 3945
	[SerializeField]
	private AkGameObj akGameObj;

	// Token: 0x04000F6A RID: 3946
	[SerializeField]
	private bool preProcessed;

	// Token: 0x04000F6B RID: 3947
	[SerializeField]
	private AudioEventMatrix audioEventMatrixFoley;

	// Token: 0x04000F6C RID: 3948
	[SerializeField]
	private WaterProbe waterProbe;

	// Token: 0x04000F6D RID: 3949
	[SerializeField]
	private AudioEventSimple walkFootStepEvent;

	// Token: 0x04000F6E RID: 3950
	[SerializeField]
	private AudioEventSimple jogFootStepEvent;

	// Token: 0x04000F6F RID: 3951
	[SerializeField]
	private AudioEventSimple waterImpactEvent;

	// Token: 0x04000F70 RID: 3952
	[SerializeField]
	private AudioEventSimple landEvent;
}
