using System;
using UnityEngine;

// Token: 0x02000227 RID: 551
public class SecretWirePull : Device, IPreAwake
{
	// Token: 0x06001100 RID: 4352 RVA: 0x000A00E8 File Offset: 0x0009E2E8
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(base.gameObject, this);
		this.audioGrab = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_grab", akGameObj);
		this.audioRelease = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_release", akGameObj);
		this.audioPullStart = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_pullStart", akGameObj);
		this.audioPullStop = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_pullStop", akGameObj);
		this.audioAnticipateStart = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_anticipateStart", akGameObj);
		this.audioAnticipateStop = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_anticipateStop", akGameObj);
		this.audioHalfWayOut = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_halfWayOut", akGameObj);
		this.audioAllTheWayOut = new AudioEventSimpleLocal(this.audioPrefix + "_secretWire_allTheWayOut", akGameObj);
	}

	// Token: 0x06001101 RID: 4353 RVA: 0x000A01F8 File Offset: 0x0009E3F8
	public bool PreAwake(int callcount)
	{
		this.firstBreak = SignalOut.Create("firstBreak", base.gameObject);
		this.complete = SignalOut.Create("complete", base.gameObject);
		this.animDevicePullBState = this.animDevice[this.animDevicePullB.name];
		this.animDevicePullBState.layer = 1;
		this.animDevice[this.animDeviceReturnB.name].layer = 1;
		this.animDevice[this.animDeviceComplete.name].layer = 2;
		return true;
	}

	// Token: 0x06001102 RID: 4354 RVA: 0x000A0294 File Offset: 0x0009E494
	protected override void Start()
	{
		this.OnPreProcess();
		base.Start();
		this.SetIdleState();
	}

	// Token: 0x06001103 RID: 4355 RVA: 0x000A02A8 File Offset: 0x0009E4A8
	private void SetIdleState()
	{
		this.currentFirstBlend = 0f;
		this.state = SecretWirePull.State.Idle;
	}

	// Token: 0x06001104 RID: 4356 RVA: 0x000A02BC File Offset: 0x0009E4BC
	private void IdleState()
	{
		if (this.releaseTimer > 0f)
		{
			this.releaseTimer -= Time.deltaTime;
			return;
		}
		if (this.currentFirstBlend > 0f)
		{
			this.currentFirstBlend -= this.currentFirstBlend * Time.deltaTime * 6f;
		}
		if (this.currentSecondBlend > 0f)
		{
			this.currentSecondBlend -= this.currentSecondBlend * Time.deltaTime * 6f;
		}
		int i = 0;
		int count = this.boysInside.Count;
		while (i < count)
		{
			Boy boy = this.boysInside[i];
			if (boy.facing == 1f && boy.visualBoy.IsPoseFacing(1f, this.grabAngle) && Device.GrabCheck(boy, true))
			{
				this.grabStunTimer = this.grabStunDelay;
				this.grabTimer = this.grabDelay;
				if (this.isBroken)
				{
					this.SetGrabBState();
				}
				else
				{
					this.SetGrabState(boy);
				}
				break;
			}
			i++;
		}
	}

	// Token: 0x06001105 RID: 4357 RVA: 0x000A03E8 File Offset: 0x0009E5E8
	private void SetGrabState(Boy boy)
	{
		this.boyGrabbing = boy;
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.grabAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.isGrabing = true;
		Device.SetVoicePassive();
		this.state = SecretWirePull.State.Grab;
	}

	// Token: 0x06001106 RID: 4358 RVA: 0x000A0420 File Offset: 0x0009E620
	private void SetGrabStateNoTransition()
	{
		Device.SetVoicePassive();
		this.state = SecretWirePull.State.Grab;
	}

	// Token: 0x06001107 RID: 4359 RVA: 0x000A0430 File Offset: 0x0009E630
	public float GetPullBlend()
	{
		return Mathf.Max(this.currentFirstBlend, this.currentSecondBlend) * 0.5f;
	}

	// Token: 0x06001108 RID: 4360 RVA: 0x000A044C File Offset: 0x0009E64C
	private void GrabState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		else if (!this.boyGrabbing.input.rawAction)
		{
			this.Release();
			return;
		}
		if (this.isGrabing)
		{
			BoyCustomAnimState boyCustomAnimState = this.boyGrabbing.state as BoyCustomAnimState;
			if (boyCustomAnimState != null && boyCustomAnimState.anim == this.grabAnim && this.grabAnim.frame >= this.grabAnim.numFrames)
			{
				BoyUtils.StartCustomAnim(this.boyGrabbing, this.firstPullAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
				this.isGrabing = false;
			}
		}
		this.currentFirstBlend -= this.currentFirstBlend * Time.deltaTime * 6f;
		if (this.grabTimer > 0f)
		{
			this.grabTimer -= Time.deltaTime;
			if (this.grabTimer <= 0f)
			{
				this.audioGrab.PostFast();
			}
		}
		else if (this.CheckAnticipate())
		{
			this.SetAnticipateState();
		}
		else if (this.CheckPull())
		{
			this.SetPullState();
		}
	}

	// Token: 0x06001109 RID: 4361 RVA: 0x000A0598 File Offset: 0x0009E798
	private void SetAnticipateState()
	{
		if (this.isGrabing)
		{
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.firstPullAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			this.isGrabing = false;
		}
		this.audioAnticipateStart.PostFast();
		this.state = SecretWirePull.State.Anticipate;
	}

	// Token: 0x0600110A RID: 4362 RVA: 0x000A05E4 File Offset: 0x0009E7E4
	private void AnticipateState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		else if (!this.boyGrabbing.input.rawAction)
		{
			this.audioAnticipateStop.PostFast();
			this.Release();
			return;
		}
		if (!this.CheckAnticipate())
		{
			this.audioAnticipateStop.PostFast();
			this.SetGrabStateNoTransition();
		}
		else
		{
			this.currentFirstBlend -= Time.deltaTime * 8f;
		}
	}

	// Token: 0x0600110B RID: 4363 RVA: 0x000A067C File Offset: 0x0009E87C
	private void SetPullState()
	{
		if (this.isGrabing)
		{
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.firstPullAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
			this.isGrabing = false;
		}
		this.pullTimer = 0f;
		this.audioPullStart.PostFast();
		Device.SetVoiceActive();
		this.state = SecretWirePull.State.Pull;
	}

	// Token: 0x0600110C RID: 4364 RVA: 0x000A06D8 File Offset: 0x0009E8D8
	private void PullState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		else if (!this.boyGrabbing.input.rawAction)
		{
			this.audioPullStop.PostFast();
			this.Release();
			return;
		}
		if (this.currentFirstBlend < 1f)
		{
			this.currentFirstBlend += Time.deltaTime * 8f;
		}
		else
		{
			if (this.currentFirstBlend >= 2f)
			{
				this.SetBreakState();
				return;
			}
			this.pullTimer += Time.deltaTime;
			float num = this.pullTimer / this.pullDuration;
			num = Mathf.Clamp(num, 0f, 1f);
			this.currentFirstBlend = 1f + num;
		}
		if (!this.CheckPull())
		{
			this.audioPullStop.PostFast();
			this.SetGrabStateNoTransition();
		}
	}

	// Token: 0x0600110D RID: 4365 RVA: 0x000A07D4 File Offset: 0x0009E9D4
	private void SetBreakState()
	{
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.breakAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.animDevice.Play(this.animDeviceBreak.name);
		this.isBroken = true;
		this.firstBreak.Signal();
		this.breakTimer = this.breakDuration;
		this.audioHalfWayOut.PostFast();
		this.state = SecretWirePull.State.Break;
	}

	// Token: 0x0600110E RID: 4366 RVA: 0x000A0844 File Offset: 0x0009EA44
	private void BreakState()
	{
		this.breakTimer -= Time.deltaTime;
		if (this.breakTimer <= 0f)
		{
			this.SetGrabBState();
		}
	}

	// Token: 0x0600110F RID: 4367 RVA: 0x000A087C File Offset: 0x0009EA7C
	private void SetGrabBState()
	{
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.secondPullAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		Device.SetVoicePassive();
		this.state = SecretWirePull.State.GrabB;
	}

	// Token: 0x06001110 RID: 4368 RVA: 0x000A08A4 File Offset: 0x0009EAA4
	private void GrabBState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		else if (!this.boyGrabbing.input.rawAction)
		{
			this.Release();
			return;
		}
		this.currentSecondBlend -= this.currentSecondBlend * Time.deltaTime * 6f;
		if (this.grabTimer > 0f)
		{
			this.grabTimer -= Time.deltaTime;
			if (this.grabTimer <= 0f)
			{
				this.audioGrab.PostFast();
			}
		}
		else if (Mathf.Abs(this.currentSecondBlend) <= 0.1f)
		{
			if (this.CheckPull())
			{
				this.SetPullBState();
			}
			else if (this.CheckAnticipate())
			{
				this.SetAnticipateBState();
			}
		}
	}

	// Token: 0x06001111 RID: 4369 RVA: 0x000A0994 File Offset: 0x0009EB94
	private void SetAnticipateBState()
	{
		this.audioAnticipateStart.PostFast();
		this.state = SecretWirePull.State.AnticipateB;
	}

	// Token: 0x06001112 RID: 4370 RVA: 0x000A09AC File Offset: 0x0009EBAC
	private void AnticipateBState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		else if (!this.boyGrabbing.input.rawAction)
		{
			this.audioAnticipateStop.PostFast();
			this.Release();
			return;
		}
		if (!this.CheckAnticipate())
		{
			this.audioAnticipateStop.PostFast();
			this.SetGrabBState();
		}
		else
		{
			this.currentSecondBlend -= Time.deltaTime * 8f;
		}
	}

	// Token: 0x06001113 RID: 4371 RVA: 0x000A0A44 File Offset: 0x0009EC44
	private void SetPullBState()
	{
		this.pullTimer = 0f;
		this.animDevice.Play(this.animDevicePullBState.name);
		this.audioPullStart.PostFast();
		Device.SetVoiceActive();
		this.state = SecretWirePull.State.PullB;
	}

	// Token: 0x06001114 RID: 4372 RVA: 0x000A0A8C File Offset: 0x0009EC8C
	private void PullBState()
	{
		if (this.grabStunTimer > 0f)
		{
			this.grabStunTimer -= Time.deltaTime;
		}
		else if (!this.boyGrabbing.input.rawAction)
		{
			this.audioPullStop.PostFast();
			this.Release();
			return;
		}
		if (this.currentSecondBlend < 1f)
		{
			this.currentSecondBlend += Time.deltaTime * 8f;
		}
		else
		{
			if (this.currentSecondBlend >= 2f)
			{
				this.SetCompleteState();
				return;
			}
			this.pullTimer += Time.deltaTime;
			float num = this.pullTimer / this.pullBDuration;
			num = Mathf.Clamp(num, 0f, 1f);
			this.currentSecondBlend = 1f + num;
		}
		if (!this.CheckPull())
		{
			this.audioPullStop.PostFast();
			this.SetGrabBState();
		}
	}

	// Token: 0x06001115 RID: 4373 RVA: 0x000A0B88 File Offset: 0x0009ED88
	private void SetCompleteState()
	{
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.completeAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.animDevice.Play(this.animDeviceComplete.name);
		this.complete.Signal();
		this.audioAllTheWayOut.PostFast();
		this.lastBreathTimer = this.lastExhaleDelay;
		Device.SetVoiceNone();
		this.state = SecretWirePull.State.Complete;
	}

	// Token: 0x06001116 RID: 4374 RVA: 0x000A0BF8 File Offset: 0x0009EDF8
	private void CompleteState()
	{
		if (this.lastBreathTimer > 0f)
		{
			this.lastBreathTimer -= Time.deltaTime;
			if (this.lastBreathTimer <= 0f)
			{
				SingletonBehaviour<BoyAudio>.instance.KillBoyWithFinalExhale(VoiceConfigProbe.Emotion.DoNotSet, false);
			}
		}
	}

	// Token: 0x06001117 RID: 4375 RVA: 0x000A0C48 File Offset: 0x0009EE48
	private void FixedUpdate()
	{
		switch (this.state)
		{
		case SecretWirePull.State.Idle:
			this.IdleState();
			break;
		case SecretWirePull.State.Anticipate:
			this.AnticipateState();
			break;
		case SecretWirePull.State.Grab:
			this.GrabState();
			break;
		case SecretWirePull.State.Pull:
			this.PullState();
			break;
		case SecretWirePull.State.Break:
			this.BreakState();
			break;
		case SecretWirePull.State.AnticipateB:
			this.AnticipateBState();
			break;
		case SecretWirePull.State.GrabB:
			this.GrabBState();
			break;
		case SecretWirePull.State.PullB:
			this.PullBState();
			break;
		case SecretWirePull.State.Complete:
			this.CompleteState();
			break;
		}
	}

	// Token: 0x06001118 RID: 4376 RVA: 0x000A0CF0 File Offset: 0x0009EEF0
	private void Update()
	{
		if (this.state != SecretWirePull.State.None)
		{
			this.currentFirstBlend = Mathf.Clamp(this.currentFirstBlend, -1f, 2f);
			this.currentSecondBlend = Mathf.Clamp(this.currentSecondBlend, -1f, 2f);
			this.firstPullAnim.currentBlendValue = this.currentFirstBlend;
			this.secondPullAnim.currentBlendValue = this.currentSecondBlend;
			float weight = Mathf.Max(this.currentSecondBlend - 1f, 0f);
			this.animDevicePullBState.weight = weight;
		}
	}

	// Token: 0x06001119 RID: 4377 RVA: 0x000A0D84 File Offset: 0x0009EF84
	private bool CheckPull()
	{
		return this.boyGrabbing.input.stick.x < -0.5f;
	}

	// Token: 0x0600111A RID: 4378 RVA: 0x000A0DB0 File Offset: 0x0009EFB0
	private bool CheckAnticipate()
	{
		return this.boyGrabbing.input.stick.x > 0.5f;
	}

	// Token: 0x0600111B RID: 4379 RVA: 0x000A0DDC File Offset: 0x0009EFDC
	private void Release()
	{
		if (!this.isBroken && this.grabTimer <= 0f)
		{
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.releaseAnim, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		}
		else
		{
			BoyUtils.ClearState(this.boyGrabbing, -1f);
		}
		if (this.grabTimer <= 0f)
		{
			this.audioRelease.PostFast();
		}
		if (this.isBroken && this.currentSecondBlend > 1.2f)
		{
			this.animDevice.CrossFade(this.animDeviceReturnB.name);
		}
		this.releaseTimer = this.releaseDelay;
		Device.SetVoiceNone();
		this.SetIdleState();
	}

	// Token: 0x04001EE5 RID: 7909
	public AnimClipNode grabAnim;

	// Token: 0x04001EE6 RID: 7910
	public AnimClipNode releaseAnim;

	// Token: 0x04001EE7 RID: 7911
	public AnimBlendNode firstPullAnim;

	// Token: 0x04001EE8 RID: 7912
	public AnimClipNode breakAnim;

	// Token: 0x04001EE9 RID: 7913
	public AnimBlendNode secondPullAnim;

	// Token: 0x04001EEA RID: 7914
	public AnimClipNode completeAnim;

	// Token: 0x04001EEB RID: 7915
	public Animation animDevice;

	// Token: 0x04001EEC RID: 7916
	public AnimationClip animDeviceBreak;

	// Token: 0x04001EED RID: 7917
	public AnimationClip animDeviceIdleB;

	// Token: 0x04001EEE RID: 7918
	public AnimationClip animDevicePullB;

	// Token: 0x04001EEF RID: 7919
	public AnimationClip animDeviceReturnB;

	// Token: 0x04001EF0 RID: 7920
	public AnimationClip animDeviceComplete;

	// Token: 0x04001EF1 RID: 7921
	public float grabAngle = 100f;

	// Token: 0x04001EF2 RID: 7922
	public float pullDuration = 1.5f;

	// Token: 0x04001EF3 RID: 7923
	public float pullBDuration = 2f;

	// Token: 0x04001EF4 RID: 7924
	public string audioPrefix = string.Empty;

	// Token: 0x04001EF5 RID: 7925
	public float lastExhaleDelay = 6.35f;

	// Token: 0x04001EF6 RID: 7926
	private SignalOut firstBreak;

	// Token: 0x04001EF7 RID: 7927
	private SignalOut complete;

	// Token: 0x04001EF8 RID: 7928
	private SecretWirePull.State state;

	// Token: 0x04001EF9 RID: 7929
	private bool isBroken;

	// Token: 0x04001EFA RID: 7930
	private bool isGrabing;

	// Token: 0x04001EFB RID: 7931
	private float currentFirstBlend;

	// Token: 0x04001EFC RID: 7932
	private float currentSecondBlend;

	// Token: 0x04001EFD RID: 7933
	private float pullTimer;

	// Token: 0x04001EFE RID: 7934
	private float breakTimer;

	// Token: 0x04001EFF RID: 7935
	private float breakDuration = 0.3f;

	// Token: 0x04001F00 RID: 7936
	private float grabTimer;

	// Token: 0x04001F01 RID: 7937
	private float grabDelay = 0.2f;

	// Token: 0x04001F02 RID: 7938
	private float releaseTimer;

	// Token: 0x04001F03 RID: 7939
	private float releaseDelay = 0.15f;

	// Token: 0x04001F04 RID: 7940
	private float grabStunTimer;

	// Token: 0x04001F05 RID: 7941
	private float grabStunDelay = 0.15f;

	// Token: 0x04001F06 RID: 7942
	private float lastBreathTimer;

	// Token: 0x04001F07 RID: 7943
	private AnimationState animDevicePullBState;

	// Token: 0x04001F08 RID: 7944
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioGrab;

	// Token: 0x04001F09 RID: 7945
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioRelease;

	// Token: 0x04001F0A RID: 7946
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioPullStart;

	// Token: 0x04001F0B RID: 7947
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioPullStop;

	// Token: 0x04001F0C RID: 7948
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioAnticipateStart;

	// Token: 0x04001F0D RID: 7949
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioAnticipateStop;

	// Token: 0x04001F0E RID: 7950
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioHalfWayOut;

	// Token: 0x04001F0F RID: 7951
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioAllTheWayOut;

	// Token: 0x04001F10 RID: 7952
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x02000228 RID: 552
	private enum State
	{
		// Token: 0x04001F12 RID: 7954
		None,
		// Token: 0x04001F13 RID: 7955
		Idle,
		// Token: 0x04001F14 RID: 7956
		Anticipate,
		// Token: 0x04001F15 RID: 7957
		Grab,
		// Token: 0x04001F16 RID: 7958
		Pull,
		// Token: 0x04001F17 RID: 7959
		Break,
		// Token: 0x04001F18 RID: 7960
		AnticipateB,
		// Token: 0x04001F19 RID: 7961
		GrabB,
		// Token: 0x04001F1A RID: 7962
		PullB,
		// Token: 0x04001F1B RID: 7963
		Complete
	}
}