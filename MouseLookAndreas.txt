using System;
using UnityEngine;

// Token: 0x02000546 RID: 1350
[AddComponentMenu("Camera-Control/Mouse Look Andreas")]
public class MouseLookAndreas : MonoBehaviour
{
	// Token: 0x06002316 RID: 8982 RVA: 0x001255DC File Offset: 0x001237DC
	private void Update()
	{
		if (this.axes == MouseLookAndreas.RotationAxes.MouseXAndY)
		{
			this.rotationX += Input.GetAxis("Mouse X") * this.sensitivityX;
			this.rotationY += Input.GetAxis("Mouse Y") * this.sensitivityY;
			this.rotationX = MouseLookAndreas.ClampAngle(this.rotationX, this.minimumX, this.maximumX);
			this.rotationY = MouseLookAndreas.ClampAngle(this.rotationY, this.minimumY, this.maximumY);
			Quaternion quaternion = Quaternion.AngleAxis(this.rotationX, Vector3.up);
			Quaternion quaternion2 = Quaternion.AngleAxis(this.rotationY, -Vector3.right);
			base.transform.localRotation = this.originalRotation * quaternion * quaternion2;
		}
		else if (this.axes == MouseLookAndreas.RotationAxes.MouseX)
		{
			this.rotationX += Input.GetAxis("Mouse X") * this.sensitivityX;
			this.rotationX = MouseLookAndreas.ClampAngle(this.rotationX, this.minimumX, this.maximumX);
			Quaternion quaternion3 = Quaternion.AngleAxis(this.rotationX, Vector3.up);
			base.transform.localRotation = this.originalRotation * quaternion3;
		}
		else
		{
			this.rotationY += Input.GetAxis("Mouse Y") * this.sensitivityY;
			this.rotationY = MouseLookAndreas.ClampAngle(this.rotationY, this.minimumY, this.maximumY);
			Quaternion quaternion4 = Quaternion.AngleAxis(-this.rotationY, Vector3.right);
			base.transform.localRotation = this.originalRotation * quaternion4;
		}
	}

	// Token: 0x06002317 RID: 8983 RVA: 0x0012578C File Offset: 0x0012398C
	private void Start()
	{
		if (base.GetComponent<Rigidbody>())
		{
			base.GetComponent<Rigidbody>().freezeRotation = true;
		}
		this.originalRotation = base.transform.localRotation;
	}

	// Token: 0x06002318 RID: 8984 RVA: 0x001257C8 File Offset: 0x001239C8
	public static float ClampAngle(float angle, float min, float max)
	{
		if (angle < -360f)
		{
			angle += 360f;
		}
		if (angle > 360f)
		{
			angle -= 360f;
		}
		return Mathf.Clamp(angle, min, max);
	}

	// Token: 0x04004197 RID: 16791
	public MouseLookAndreas.RotationAxes axes;

	// Token: 0x04004198 RID: 16792
	public float sensitivityX = 15f;

	// Token: 0x04004199 RID: 16793
	public float sensitivityY = 15f;

	// Token: 0x0400419A RID: 16794
	public float minimumX = -360f;

	// Token: 0x0400419B RID: 16795
	public float maximumX = 360f;

	// Token: 0x0400419C RID: 16796
	public float minimumY = -60f;

	// Token: 0x0400419D RID: 16797
	public float maximumY = 60f;

	// Token: 0x0400419E RID: 16798
	private float rotationX;

	// Token: 0x0400419F RID: 16799
	private float rotationY;

	// Token: 0x040041A0 RID: 16800
	private Quaternion originalRotation;

	// Token: 0x02000547 RID: 1351
	public enum RotationAxes
	{
		// Token: 0x040041A2 RID: 16802
		MouseXAndY,
		// Token: 0x040041A3 RID: 16803
		MouseX,
		// Token: 0x040041A4 RID: 16804
		MouseY
	}
}
