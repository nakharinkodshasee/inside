using System;
using UnityEngine;

// Token: 0x020004D2 RID: 1234
public class MindHatTakeOffSimple : MonoBehaviour, IFastEventListener, IFastEventExListener<Collider>, IPreAwake
{
	// Token: 0x06002056 RID: 8278 RVA: 0x00111AEC File Offset: 0x0010FCEC
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.audioHatTakeOff = new AudioEventSimple("env_mines_mindHatTakeOff");
	}

	// Token: 0x06002057 RID: 8279 RVA: 0x00111B14 File Offset: 0x0010FD14
	public bool PreAwake(int callcount)
	{
		this.disableAlbinos = SignalOut.Create("disableAlbinos", base.gameObject);
		this.startBlowOff = SignalOut.Create("startBlowOff", base.gameObject);
		this.loadCompleted = SignalIn.Create("loadCompleted", base.gameObject, new Action(this.DoSetCompleted));
		return true;
	}

	// Token: 0x06002058 RID: 8280 RVA: 0x00111B70 File Offset: 0x0010FD70
	private void Start()
	{
		this.OnPreProcess();
		this.animDeviceDropState = this.animDevice[this.animDeviceDrop.name];
		this.shadowDecal.gameObject.SetActive(false);
		this.trigger.enterTrigger.Register(this, ref this.triggerEnterHandle);
		this.trigger.exitTrigger.Register(this, ref this.triggerExitHandle);
		ForcePushManager.warningEvent.Register(this, ref this.warningHandle);
	}

	// Token: 0x06002059 RID: 8281 RVA: 0x00111BF0 File Offset: 0x0010FDF0
	private void Destroy()
	{
		ForcePushManager.warningEvent.Unregister(ref this.warningHandle);
	}

	// Token: 0x0600205A RID: 8282 RVA: 0x00111C04 File Offset: 0x0010FE04
	public void OnFastEvent(FastEvent sender)
	{
		if (sender == ForcePushManager.warningEvent && this.state == MindHatTakeOffSimple.State.WaitForBlast)
		{
			this.state = MindHatTakeOffSimple.State.Wait;
		}
	}

	// Token: 0x0600205B RID: 8283 RVA: 0x00111C24 File Offset: 0x0010FE24
	public void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		if (sender == this.trigger.enterTrigger)
		{
			this.OnTriggerEnter(collider);
		}
		else if (sender == this.trigger.exitTrigger)
		{
			this.OnTriggerExit(collider);
		}
	}

	// Token: 0x0600205C RID: 8284 RVA: 0x00111C60 File Offset: 0x0010FE60
	private void WaitForBlastState()
	{
	}

	// Token: 0x0600205D RID: 8285 RVA: 0x00111C64 File Offset: 0x0010FE64
	private void WaitState()
	{
		if (!(this.boy.state is BoyJumpState))
		{
			this.SetIntroState();
		}
	}

	// Token: 0x0600205E RID: 8286 RVA: 0x00111C94 File Offset: 0x0010FE94
	private void SetIntroState()
	{
		this.startTakingHatOff = true;
		BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.animDropHat, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.shadowDecal.position = this.mindHatTransform.position;
		this.shadowDecal.rotation = this.mindHatTransform.rotation;
		this.shadowDecal.parent = this.mindHatTransform;
		this.shadowDecal.gameObject.SetActive(true);
		this.visuals.rotation = Quaternion.Euler(0f, 90f * ScriptGlobals.boy.facing, 0f);
		this.visuals.position = ScriptGlobals.boy.pos3;
		this.audioHatTakeOff.PostFast(AudioKeyObject.AkGameObjs.global);
		this.startBlowOff.Signal();
		this.state = MindHatTakeOffSimple.State.Intro;
	}

	// Token: 0x0600205F RID: 8287 RVA: 0x00111D70 File Offset: 0x0010FF70
	private void IntroState()
	{
		this.MoveHat();
		if (this.animDropHat.frame > this.sparkFrame)
		{
			this.SetDropState();
		}
	}

	// Token: 0x06002060 RID: 8288 RVA: 0x00111DA0 File Offset: 0x0010FFA0
	private void SetDropState()
	{
		this.holderSparkFX.position = this.mindHatTransform.position;
		this.holderSparkFX.rotation = this.mindHatTransform.rotation;
		this.holderSparkFX.gameObject.SetActive(false);
		this.holderSparkFX.gameObject.SetActive(true);
		this.sparkFX.Play();
		this.mindHat.FadeLight();
		this.state = MindHatTakeOffSimple.State.Drop;
	}

	// Token: 0x06002061 RID: 8289 RVA: 0x00111E18 File Offset: 0x00110018
	private void DropState()
	{
		this.MoveHat();
		if (this.animDropHat.frame > this.dropFrame)
		{
			this.mindHat.Reparent(base.transform.parent);
			this.mindHat.Detach();
			this.animDevice.Play(this.animDeviceDropState.name);
			this.disableAlbinos.Signal();
			this.state = MindHatTakeOffSimple.State.Complete;
		}
	}

	// Token: 0x06002062 RID: 8290 RVA: 0x00111E8C File Offset: 0x0011008C
	private void CompleteState()
	{
		Vector3 position = this.targetPos.position;
		Vector3 position2 = this.targetPos.position;
		position2.y += 1f;
		Ray ray;
		ray..ctor(position2, Vector3.down);
		float num = 100f;
		Vector3 position3 = this.visuals.position;
		int i = 0;
		int num2 = this.groundColliders.Length;
		while (i < num2)
		{
			Collider collider = this.groundColliders[i];
			RaycastHit raycastHit;
			if (collider.Raycast(ray, ref raycastHit, 5f))
			{
				float num3 = Mathf.Abs(position2.y - raycastHit.point.y);
				if (num3 < num)
				{
					num = num3;
					position3.y = raycastHit.point.y + this.groundOffsetY;
				}
			}
			i++;
		}
		this.visuals.position = position3;
		this.mindHatTransform.rotation = Quaternion.RotateTowards(this.mindHatTransform.rotation, this.targetPos.rotation, Time.deltaTime * this.rotateBlendSpeed);
		this.mindHatTransform.position = Vector3.MoveTowards(this.mindHatTransform.position, this.targetPos.position, Time.deltaTime * this.posBlendSpeed);
	}

	// Token: 0x06002063 RID: 8291 RVA: 0x00111FE0 File Offset: 0x001101E0
	private void DoSetCompleted()
	{
		this.state = MindHatTakeOffSimple.State.Completed;
	}

	// Token: 0x06002064 RID: 8292 RVA: 0x00111FEC File Offset: 0x001101EC
	private void CompletedState()
	{
	}

	// Token: 0x06002065 RID: 8293 RVA: 0x00111FF0 File Offset: 0x001101F0
	private void Update()
	{
		switch (this.state)
		{
		case MindHatTakeOffSimple.State.Intro:
			this.IntroState();
			break;
		case MindHatTakeOffSimple.State.Wait:
			this.WaitState();
			break;
		case MindHatTakeOffSimple.State.Drop:
			this.DropState();
			break;
		case MindHatTakeOffSimple.State.WaitForBlast:
			this.WaitForBlastState();
			break;
		case MindHatTakeOffSimple.State.Complete:
			this.CompleteState();
			break;
		case MindHatTakeOffSimple.State.Completed:
			this.CompletedState();
			break;
		}
	}

	// Token: 0x06002066 RID: 8294 RVA: 0x0011206C File Offset: 0x0011026C
	private void OnTriggerEnter(Collider collider)
	{
		if (this.state == MindHatTakeOffSimple.State.Complete || this.state == MindHatTakeOffSimple.State.Completed)
		{
			return;
		}
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component)
		{
			this.mindHat = LevelGlobals.mindHatOnHead;
			if (this.mindHat)
			{
				this.boy = component.boy;
				this.mindHatTransform = this.mindHat.transform;
				this.state = MindHatTakeOffSimple.State.WaitForBlast;
			}
		}
	}

	// Token: 0x06002067 RID: 8295 RVA: 0x001120E4 File Offset: 0x001102E4
	private void OnTriggerExit(Collider collider)
	{
		if (this.state == MindHatTakeOffSimple.State.Complete || this.state == MindHatTakeOffSimple.State.Completed)
		{
			return;
		}
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component)
		{
			this.mindHat = LevelGlobals.mindHatOnHead;
			if (!this.startTakingHatOff && collider.transform.position.x > this.trigger.transform.position.x)
			{
				this.SetIntroState();
			}
			if (this.mindHat && this.state == MindHatTakeOffSimple.State.WaitForBlast)
			{
				this.state = MindHatTakeOffSimple.State.None;
			}
		}
	}

	// Token: 0x06002068 RID: 8296 RVA: 0x0011218C File Offset: 0x0011038C
	private void MoveHat()
	{
		Vector3 position = this.visuals.position;
		Debug.DrawLine(ScriptGlobals.boy.pos3, ScriptGlobals.boy.pos3 + Vector3.right * 10f, Color.red);
		position.y = ScriptGlobals.boy.pos.y - ScriptGlobals.boy.properties.height / 2f;
		this.visuals.position = position;
	}

	// Token: 0x04003BE8 RID: 15336
	public AnimClipNode animDropHat;

	// Token: 0x04003BE9 RID: 15337
	public CollisionEvents trigger;

	// Token: 0x04003BEA RID: 15338
	public Transform holderSparkFX;

	// Token: 0x04003BEB RID: 15339
	public ParticleSystem sparkFX;

	// Token: 0x04003BEC RID: 15340
	public Transform visuals;

	// Token: 0x04003BED RID: 15341
	public Animation animDevice;

	// Token: 0x04003BEE RID: 15342
	public AnimationClip animDeviceDrop;

	// Token: 0x04003BEF RID: 15343
	public Transform targetPos;

	// Token: 0x04003BF0 RID: 15344
	public Transform shadowDecal;

	// Token: 0x04003BF1 RID: 15345
	public float sparkFrame = 3f;

	// Token: 0x04003BF2 RID: 15346
	public float dropFrame = 43f;

	// Token: 0x04003BF3 RID: 15347
	public float rotateBlendSpeed = 1f;

	// Token: 0x04003BF4 RID: 15348
	public float posBlendSpeed = 1f;

	// Token: 0x04003BF5 RID: 15349
	public Collider[] groundColliders;

	// Token: 0x04003BF6 RID: 15350
	public float groundOffsetY = 0.25f;

	// Token: 0x04003BF7 RID: 15351
	public bool debug;

	// Token: 0x04003BF8 RID: 15352
	private SignalOut disableAlbinos;

	// Token: 0x04003BF9 RID: 15353
	private SignalOut startBlowOff;

	// Token: 0x04003BFA RID: 15354
	private SignalIn loadCompleted;

	// Token: 0x04003BFB RID: 15355
	private MindHatTakeOffSimple.State state;

	// Token: 0x04003BFC RID: 15356
	private Boy boy;

	// Token: 0x04003BFD RID: 15357
	private MindHatOnHead mindHat;

	// Token: 0x04003BFE RID: 15358
	private Transform mindHatTransform;

	// Token: 0x04003BFF RID: 15359
	private AnimationState animDeviceDropState;

	// Token: 0x04003C00 RID: 15360
	private bool startTakingHatOff;

	// Token: 0x04003C01 RID: 15361
	private int warningHandle = -1;

	// Token: 0x04003C02 RID: 15362
	private int triggerEnterHandle = -1;

	// Token: 0x04003C03 RID: 15363
	private int triggerExitHandle = -1;

	// Token: 0x04003C04 RID: 15364
	[SerializeField]
	[HideInInspector]
	private AudioEventSimple audioHatTakeOff;

	// Token: 0x04003C05 RID: 15365
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x020004D3 RID: 1235
	private enum State
	{
		// Token: 0x04003C07 RID: 15367
		None,
		// Token: 0x04003C08 RID: 15368
		Intro,
		// Token: 0x04003C09 RID: 15369
		Wait,
		// Token: 0x04003C0A RID: 15370
		Drop,
		// Token: 0x04003C0B RID: 15371
		WaitForBlast,
		// Token: 0x04003C0C RID: 15372
		Complete,
		// Token: 0x04003C0D RID: 15373
		Completed
	}
}