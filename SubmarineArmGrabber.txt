using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

// Token: 0x020005B6 RID: 1462
internal class SubmarineArmGrabber : MonoBehaviour
{
	// Token: 0x06002537 RID: 9527 RVA: 0x00131670 File Offset: 0x0012F870
	private void Start()
	{
		this.handTarget = new GameObject("handTarget").transform;
		this.handTarget.transform.parent = base.transform;
		this.handTarget.transform.position = this.grabArmHand.position;
		this.shoulderElbowDist = this.grabArmElbow.localPosition.magnitude;
		this.elbowHandDist = this.grabArmHand.localPosition.magnitude;
		this.EnterVehicle();
	}

	// Token: 0x06002538 RID: 9528 RVA: 0x001316FC File Offset: 0x0012F8FC
	private void FixedUpdate()
	{
		float length = GameInput.stick.GetLength();
		if (GameInput.rawAction && this.mReachableBodies.Count > 0 && this.mGrabbedObject == null)
		{
			this.HandleGrabbing();
		}
		else
		{
			this.handTarget.position = this.idealHandPlacement.position;
		}
		if (!GameInput.rawAction && this.mGrabbedObject != null)
		{
			FixedJoint fixedJoint = this.mGrabbedObject.GetComponents<FixedJoint>().FirstOrDefault((FixedJoint o) => o.connectedBody == this.grabArmElbow.GetComponent<Rigidbody>());
			Object.Destroy(fixedJoint);
			this.mGrabbedObject = null;
		}
		if (length > 0f)
		{
			if (Mathf.Abs(GameInput.stick.x) > 0.4f)
			{
				float num = this.facing;
				this.facing = Mathf.Clamp(this.facing + Time.deltaTime / this.timeToChangeFacing * Mathf.Sign(GameInput.stick.x), -1f, 1f);
				if (Mathf.Sign(this.facing) != Mathf.Sign(num))
				{
					this.facing = Mathf.Sign(this.facing);
				}
			}
			Vector3 vector;
			vector..ctor(GameInput.stick.x, GameInput.stick.y);
			float num2 = length * this.moveForce * base.GetComponent<Rigidbody>().mass;
			base.GetComponent<Rigidbody>().AddForce(vector * num2);
		}
		else
		{
			this.facing = Mathf.Sign(this.facing);
			Vector3 vector;
			vector..ctor(Mathf.Sign(this.facing), 0f);
		}
		Quaternion quaternion = Quaternion.AngleAxis(base.GetComponent<Rigidbody>().angularVelocity.magnitude * 57.29578f * this.stability / this.stabilizationSpeed, base.GetComponent<Rigidbody>().angularVelocity);
		Vector3 vector2 = quaternion * base.transform.up;
		Vector3 vector3 = quaternion * base.transform.right;
		Vector3 vector4 = Vector3.Cross(vector2, Vector3.up);
		Vector3 vector5 = Vector3.Cross(vector3, Vector3.back * this.facing);
		vector5 = Vector3.Project(vector5, base.transform.up);
		vector4 += vector5;
		Quaternion quaternion2 = Quaternion.LookRotation(Vector3.right * this.facing);
		float num3 = Quaternion.Angle(base.GetComponent<Rigidbody>().rotation, quaternion2);
		vector4 = vector4.normalized * (num3 / 180f);
		vector4 *= this.stabilizationSpeed * this.stabilizationSpeed * base.GetComponent<Rigidbody>().mass;
		base.GetComponent<Rigidbody>().AddTorque(vector4);
	}

	// Token: 0x06002539 RID: 9529 RVA: 0x001319D0 File Offset: 0x0012FBD0
	private void HandleGrabbing()
	{
		Rigidbody rigidbody = this.mReachableBodies.MinElement((Rigidbody o) => Vector3.Distance(o.position, base.GetComponent<Rigidbody>().position));
		Vector3 localPosition = this.handTarget.parent.InverseTransformPoint(rigidbody.position);
		localPosition.x = this.handTarget.localPosition.x;
		this.handTarget.localPosition = localPosition;
		Vector3 vector = this.handTarget.localPosition - base.transform.InverseTransformPoint(this.grabArmShoulder.position);
		float magnitude = vector.magnitude;
		if (magnitude > this.elbowHandDist + this.shoulderElbowDist)
		{
			Vector3 localPosition2 = base.transform.InverseTransformPoint(this.grabArmShoulder.position) + vector.normalized * (this.elbowHandDist + this.shoulderElbowDist);
			localPosition2.x = this.handTarget.localPosition.x;
			this.handTarget.localPosition = localPosition2;
		}
		if (Vector3.Distance(this.grabArmHand.position, this.handTarget.position) < 0.1f)
		{
			this.mGrabbedObject = rigidbody;
			FixedJoint fixedJoint = this.mGrabbedObject.gameObject.AddComponent<FixedJoint>();
			fixedJoint.connectedBody = this.grabArmElbow.GetComponent<Rigidbody>();
		}
	}

	// Token: 0x0600253A RID: 9530 RVA: 0x00131B24 File Offset: 0x0012FD24
	private void UpdateIK()
	{
		Vector3 vector = this.handTarget.localPosition - base.transform.InverseTransformPoint(this.grabArmShoulder.position);
		float num = Mathf.Min(vector.magnitude, this.elbowHandDist + this.shoulderElbowDist);
		float num2 = this.elbowHandDist;
		float num3 = this.shoulderElbowDist;
		float num4 = num;
		float num5 = Mathf.Acos((num4 * num4 + num2 * num2 - num3 * num3) / (2f * num4 * num2)) * 57.29578f;
		Vector3 vector2 = Quaternion.AngleAxis(num5, Vector3.right) * vector;
		vector2.x = 0f;
		Vector3 vector3 = base.transform.TransformDirection(vector2.normalized);
		Vector3 vector4 = Vector3.Cross(vector3, base.transform.right);
		Quaternion quaternion = Quaternion.LookRotation(vector3, vector4);
		this.grabArmShoulder.GetComponent<Rigidbody>().MoveRotation(Quaternion.RotateTowards(this.grabArmShoulder.rotation, quaternion, this.maxLimbTurnSpeed * Time.deltaTime));
		JointSpring spring = this.grabArmShoulder.GetComponent<HingeJoint>().spring;
		spring.targetPosition = this.grabArmShoulder.GetComponent<HingeJoint>().angle;
		this.grabArmShoulder.GetComponent<HingeJoint>().spring = spring;
		Vector3 vector5 = this.handTarget.position - this.grabArmElbow.position;
		Vector3 vector6 = Vector3.Cross(vector5.normalized, base.transform.right);
		Quaternion quaternion2 = Quaternion.LookRotation(vector5, vector6);
		this.grabArmElbow.GetComponent<Rigidbody>().MoveRotation(Quaternion.RotateTowards(this.grabArmElbow.rotation, quaternion2, this.maxLimbTurnSpeed * Time.deltaTime));
		JointSpring spring2 = this.grabArmElbow.GetComponent<HingeJoint>().spring;
		spring2.targetPosition = this.grabArmElbow.GetComponent<HingeJoint>().angle;
		this.grabArmElbow.GetComponent<HingeJoint>().spring = spring2;
	}

	// Token: 0x0600253B RID: 9531 RVA: 0x00131D10 File Offset: 0x0012FF10
	public void EnterVehicle()
	{
		BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.drivingAnimation, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		ScriptGlobals.boy.input = this.boyInput;
	}

	// Token: 0x0600253C RID: 9532 RVA: 0x00131D48 File Offset: 0x0012FF48
	private void OnTriggerEnter(Collider aCollider)
	{
		if (aCollider.GetComponent<Rigidbody>() && aCollider.GetComponent<NoGrab>() == null)
		{
			Debug.Log("Adding body!");
			this.mReachableBodies.Add(aCollider.GetComponent<Rigidbody>());
		}
	}

	// Token: 0x0600253D RID: 9533 RVA: 0x00131D94 File Offset: 0x0012FF94
	private void OnTriggerExit(Collider aCollider)
	{
		if (aCollider.GetComponent<Rigidbody>() && aCollider.GetComponent<NoGrab>() == null)
		{
			Debug.Log("Removing body!");
			this.mReachableBodies.Remove(aCollider.GetComponent<Rigidbody>());
		}
	}

	// Token: 0x0400442E RID: 17454
	public float moveForce = 10f;

	// Token: 0x0400442F RID: 17455
	public float stability = 0.3f;

	// Token: 0x04004430 RID: 17456
	public float stabilizationSpeed = 2f;

	// Token: 0x04004431 RID: 17457
	public float maxLimbTurnSpeed = 360f;

	// Token: 0x04004432 RID: 17458
	public float cameraDistance = -20f;

	// Token: 0x04004433 RID: 17459
	public float timeToChangeFacing = 0.5f;

	// Token: 0x04004434 RID: 17460
	public Vector2 minTargetPos;

	// Token: 0x04004435 RID: 17461
	public Vector2 maxTargetPos;

	// Token: 0x04004436 RID: 17462
	public Transform grabArmShoulder;

	// Token: 0x04004437 RID: 17463
	public Transform grabArmElbow;

	// Token: 0x04004438 RID: 17464
	public Transform grabArmHand;

	// Token: 0x04004439 RID: 17465
	public Transform idealHandPlacement;

	// Token: 0x0400443A RID: 17466
	public AnimClipNode drivingAnimation;

	// Token: 0x0400443B RID: 17467
	private CustomBoyInput boyInput;

	// Token: 0x0400443C RID: 17468
	private float shoulderElbowDist;

	// Token: 0x0400443D RID: 17469
	private float elbowHandDist;

	// Token: 0x0400443E RID: 17470
	private Transform handTarget;

	// Token: 0x0400443F RID: 17471
	private List<Rigidbody> mReachableBodies = new List<Rigidbody>();

	// Token: 0x04004440 RID: 17472
	private Rigidbody mGrabbedObject;

	// Token: 0x04004441 RID: 17473
	private float mPrevCameraDistance;

	// Token: 0x04004442 RID: 17474
	private float facing;
}
