using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020001C0 RID: 448
public class JetCrateAimTrigger : MonoBehaviour
{
	// Token: 0x06000D4C RID: 3404 RVA: 0x00080170 File Offset: 0x0007E370
	private void Start()
	{
	}

	// Token: 0x06000D4D RID: 3405 RVA: 0x00080174 File Offset: 0x0007E374
	private void OnTriggerEnter(Collider coll)
	{
		if (coll.attachedRigidbody != null)
		{
			JetCrate component = coll.attachedRigidbody.GetComponent<JetCrate>();
			if (component != null && !this.cratesInside.Contains(component))
			{
				this.cratesInside.Add(component);
			}
		}
	}

	// Token: 0x06000D4E RID: 3406 RVA: 0x000801C8 File Offset: 0x0007E3C8
	private void OnTriggerExit(Collider coll)
	{
		if (coll.attachedRigidbody != null)
		{
			JetCrate component = coll.attachedRigidbody.GetComponent<JetCrate>();
			if (component != null && this.cratesInside.Contains(component))
			{
				this.cratesInside.Remove(component);
			}
		}
	}

	// Token: 0x06000D4F RID: 3407 RVA: 0x0008021C File Offset: 0x0007E41C
	private void UpdateSpeedForCrate(JetCrate crate)
	{
		float jetRemainingTime = crate.GetJetRemainingTime();
		if (jetRemainingTime > 0.5f)
		{
			float num = this.target.transform.position.x - crate.transform.position.x;
			float x = crate.GetComponent<Rigidbody>().velocity.x;
			float num2 = num / jetRemainingTime;
			this.lastPos = crate.transform.position;
			Vector3 vector = (num2 - x) * Time.deltaTime * this.speedStrictness * Vector3.right;
			crate.GetComponent<Rigidbody>().AddForce(vector, 2);
		}
	}

	// Token: 0x06000D50 RID: 3408 RVA: 0x000802C0 File Offset: 0x0007E4C0
	private void FixedUpdate()
	{
		if (this.target == null)
		{
			return;
		}
		int i = 0;
		int count = this.cratesInside.Count;
		while (i < count)
		{
			JetCrate jetCrate = this.cratesInside[i];
			if (jetCrate.IsJetting() && !this.cratesJetting.Contains(jetCrate))
			{
				float jetRemainingTime = jetCrate.GetJetRemainingTime();
				if (jetRemainingTime > 0.5f)
				{
					float num = this.target.transform.position.x - jetCrate.transform.position.x;
					float x = jetCrate.GetComponent<Rigidbody>().velocity.x;
					float num2 = num / jetRemainingTime;
					if (num * x > 0f && Mathf.Abs(x) > 1f && Mathf.Abs(num2 - x) < this.maxSpeedModification)
					{
						this.lastPos = jetCrate.transform.position;
						this.cratesJetting.Add(jetCrate);
					}
				}
			}
			i++;
		}
		for (int j = this.cratesJetting.Count - 1; j >= 0; j--)
		{
			JetCrate jetCrate2 = this.cratesJetting[j];
			if (this.debugTracePath)
			{
				Vector3 position = jetCrate2.transform.position;
				Debug.DrawLine(this.lastPos, position, Color.red, 1000f);
				this.lastPos = position;
			}
			this.UpdateSpeedForCrate(jetCrate2);
			if (!jetCrate2.IsJetting())
			{
				this.cratesJetting.RemoveAt(j);
			}
		}
	}

	// Token: 0x04001774 RID: 6004
	public GameObject target;

	// Token: 0x04001775 RID: 6005
	public float minSpeedRequired = 0.5f;

	// Token: 0x04001776 RID: 6006
	public float maxSpeedModification = 4f;

	// Token: 0x04001777 RID: 6007
	public float speedStrictness = 3f;

	// Token: 0x04001778 RID: 6008
	public bool debugTracePath;

	// Token: 0x04001779 RID: 6009
	private List<JetCrate> cratesInside = new List<JetCrate>();

	// Token: 0x0400177A RID: 6010
	private List<JetCrate> cratesJetting = new List<JetCrate>();

	// Token: 0x0400177B RID: 6011
	private Vector3 lastPos;
}