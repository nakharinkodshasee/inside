using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020000B6 RID: 182
public class MindHatCompanionController : MonoBehaviour
{
	// Token: 0x060005E8 RID: 1512 RVA: 0x00045F20 File Offset: 0x00044120
	private void Awake()
	{
		MindHatCompanionController.instance = this;
		this.spawnStates.PreAllocate(this.companionList.Count);
		int i = 0;
		int count = this.companionList.Count;
		while (i < count)
		{
			Boy boy = this.companionList[i];
			boy.visualBoy.actor.CacheSkinnedMesh();
			boy.transform.parent.gameObject.SetActive(false);
			MindHatCompanionController.DeferredState deferredState = new MindHatCompanionController.DeferredState();
			deferredState.boy = boy;
			deferredState.currSpawn = null;
			deferredState.nextSpawn = null;
			deferredState.nextPosition = null;
			this.spawnStates.raw[i] = deferredState;
			i++;
		}
	}

	// Token: 0x060005E9 RID: 1513 RVA: 0x00045FD4 File Offset: 0x000441D4
	private void FixedUpdate()
	{
		MindHatCompanionController.DeferredState deferredState = null;
		int num = int.MinValue;
		if (this.ignoreNextUpdates > 0)
		{
			this.ignoreNextUpdates--;
			return;
		}
		for (int num2 = 0; num2 != this.spawnStates.size; num2++)
		{
			MindHatCompanionController.DeferredState deferredState2 = this.spawnStates.raw[num2];
			if (deferredState2.WillCommit())
			{
				if (deferredState2.nextSpawn == null)
				{
					num = 1000;
					deferredState = deferredState2;
					break;
				}
				if (deferredState2.nextSpawn.priority > num)
				{
					num = deferredState2.nextSpawn.priority;
					deferredState = deferredState2;
				}
			}
		}
		if (num > -2147483648)
		{
			deferredState.Commit();
		}
	}

	// Token: 0x060005EA RID: 1514 RVA: 0x00046088 File Offset: 0x00044288
	public MindHatCompanionController.DeferredState BeginSpawn(MindHatDudeSpawner spawn, Vector3? position = null)
	{
		for (int num = 0; num != this.spawnStates.size; num++)
		{
			MindHatCompanionController.DeferredState deferredState = this.spawnStates.raw[this.spawnIndex];
			if (deferredState.currSpawn == null && deferredState.nextSpawn == null)
			{
				deferredState.nextSpawn = spawn;
				deferredState.nextPosition = position;
				deferredState.nextPositionAwake = false;
				if (!deferredState.CommitIfLoading())
				{
					this.ignoreNextUpdates = 5;
				}
				this.spawnIndex = (this.spawnIndex + 1) % this.spawnStates.size;
				return deferredState;
			}
			this.spawnIndex = (this.spawnIndex + 1) % this.spawnStates.size;
		}
		return null;
	}

	// Token: 0x060005EB RID: 1515 RVA: 0x00046144 File Offset: 0x00044344
	public MindHatCompanionController.DeferredState BeginSpawnForced(MindHatDudeSpawner spawn)
	{
		MindHatCompanionController.DeferredState deferredState = this.spawnStates.raw[this.spawnIndex];
		deferredState.nextSpawn = spawn;
		deferredState.nextPosition = null;
		deferredState.nextPositionAwake = false;
		deferredState.CommitIfLoading();
		this.spawnIndex = (this.spawnIndex + 1) % this.spawnStates.size;
		return deferredState;
	}

	// Token: 0x04000A57 RID: 2647
	public static MindHatCompanionController instance;

	// Token: 0x04000A58 RID: 2648
	public List<Boy> companionList = new List<Boy>();

	// Token: 0x04000A59 RID: 2649
	private int ignoreNextUpdates;

	// Token: 0x04000A5A RID: 2650
	private FastList<MindHatCompanionController.DeferredState> spawnStates = new FastList<MindHatCompanionController.DeferredState>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04000A5B RID: 2651
	private int spawnIndex;

	// Token: 0x020000B7 RID: 183
	public class DeferredState
	{
		// Token: 0x060005ED RID: 1517 RVA: 0x000461AC File Offset: 0x000443AC
		public void BeginUnspawn(MindHatDudeSpawner spawn)
		{
			if (this.nextSpawn == spawn)
			{
				this.nextSpawn = null;
				this.nextSpawnClears = (this.currSpawn != null);
				this.nextPosition = null;
				this.nextPositionAwake = false;
				this.CommitIfLoading();
			}
		}

		// Token: 0x060005EE RID: 1518 RVA: 0x00046200 File Offset: 0x00044400
		public void BeginPosition(MindHatDudeSpawner spawn, Vector3 position, bool awake)
		{
			if (this.nextSpawn == spawn)
			{
				this.nextPosition = new Vector3?(position);
				this.nextPositionAwake = awake;
				this.CommitIfLoading();
			}
		}

		// Token: 0x060005EF RID: 1519 RVA: 0x00046230 File Offset: 0x00044430
		public bool IsActive(MindHatDudeSpawner spawn)
		{
			return this.currSpawn == spawn;
		}

		// Token: 0x060005F0 RID: 1520 RVA: 0x00046240 File Offset: 0x00044440
		public bool WillCommit()
		{
			bool result;
			if (!(this.currSpawn != this.nextSpawn) && !this.nextSpawnClears)
			{
				Vector3? vector = this.nextPosition;
				result = (vector != null);
			}
			else
			{
				result = true;
			}
			return result;
		}

		// Token: 0x060005F1 RID: 1521 RVA: 0x00046280 File Offset: 0x00044480
		public bool Commit()
		{
			if (this.currSpawn != this.nextSpawn || this.nextSpawnClears)
			{
				if (this.currSpawn != null || this.nextSpawnClears)
				{
					this.COMMIT_Spawn(null);
					return true;
				}
				this.COMMIT_Spawn(this.nextSpawn);
				return true;
			}
			else
			{
				Vector3? vector = this.nextPosition;
				if (vector != null)
				{
					if (!this.boy.gameObject.activeSelf)
					{
						this.boy.gameObject.SetActive(true);
						this.boy.visualBoy.gameObject.SetActive(true);
					}
					this.COMMIT_Position();
					return true;
				}
				return false;
			}
		}

		// Token: 0x060005F2 RID: 1522 RVA: 0x0004633C File Offset: 0x0004453C
		public bool CommitIfLoading()
		{
			if (GameManager.IsLoading())
			{
				while (this.Commit())
				{
				}
				return true;
			}
			return false;
		}

		// Token: 0x060005F3 RID: 1523 RVA: 0x0004635C File Offset: 0x0004455C
		private void COMMIT_Spawn(MindHatDudeSpawner spawn)
		{
			this.nextSpawnClears = false;
			if (spawn == null)
			{
				MindHatReceiver component = this.boy.gameObject.GetComponent<MindHatReceiver>();
				if (component != null)
				{
					component.Reset();
				}
				this.boy.transform.parent.gameObject.SetActive(false);
			}
			else
			{
				if (spawn.offsetUpdate)
				{
					this.boy.skipStepOffset = 1;
				}
				else
				{
					this.boy.skipStepOffset = 0;
				}
				Actor actor = this.boy.visualBoy.actor;
				SkinnedMeshRenderer skinnedMeshRenderer = actor.skinnedMeshRenderer;
				skinnedMeshRenderer.material = spawn.material;
				if (spawn.mesh != null)
				{
					skinnedMeshRenderer.sharedMesh = spawn.mesh;
				}
				this.boy.visualBoy.actor.scale = spawn.scale;
				this.boy.facing = (float)((spawn.facing != MindHatReceiver.Facing.Right) ? -1 : 1);
				this.boy.transform.parent.gameObject.SetActive(true);
				Vector3 position = spawn.transform.position;
				if (spawn.wantedZPlane != null)
				{
					this.boy.playfield.posz = spawn.wantedZPlane.transform.position.z;
				}
				else
				{
					this.boy.playfield.posz = position.z;
				}
				this.boy.Teleport(position, Vector3.zero);
				Transform themeArg = (spawn.initialTheme.Length <= 0) ? null : ThemeUtils.FindBoyTheme(this.boy.visualBoy, spawn.initialTheme);
				this.boy.visualBoy.SetTheme(themeArg, VisualBoy.ThemePriority.Low);
				MindHatReceiver component2 = this.boy.gameObject.GetComponent<MindHatReceiver>();
				if (component2 != null)
				{
					component2.useGoToSleepAnimation = spawn.useGoToSleepAnimation;
					component2.nextGoToSleepInstant = true;
					component2.StartUp(spawn);
				}
			}
			this.currSpawn = spawn;
		}

		// Token: 0x060005F4 RID: 1524 RVA: 0x00046578 File Offset: 0x00044778
		private void COMMIT_Position()
		{
			if (this.currSpawn != null)
			{
				Vector3? vector = this.nextPosition;
				if (vector != null)
				{
					this.boy.Teleport(this.nextPosition.Value);
					if (this.nextPositionAwake)
					{
						MindHatReceiver component = this.boy.gameObject.GetComponent<MindHatReceiver>();
						if (component != null)
						{
							component.SetIgnoreNextWakeUp();
						}
					}
				}
			}
			this.nextPosition = null;
			this.nextPositionAwake = false;
		}

		// Token: 0x04000A5C RID: 2652
		public Boy boy;

		// Token: 0x04000A5D RID: 2653
		public MindHatDudeSpawner currSpawn;

		// Token: 0x04000A5E RID: 2654
		public MindHatDudeSpawner nextSpawn;

		// Token: 0x04000A5F RID: 2655
		public bool nextSpawnClears;

		// Token: 0x04000A60 RID: 2656
		public Vector3? nextPosition;

		// Token: 0x04000A61 RID: 2657
		public bool nextPositionAwake;
	}
}
