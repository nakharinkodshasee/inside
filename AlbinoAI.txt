using System;
using System.Linq;
using ABHelper;
using UnityEngine;

// Token: 0x02000004 RID: 4
public class AlbinoAI : AnimcontrolledAI
{
	// Token: 0x17000001 RID: 1
	// (get) Token: 0x06000008 RID: 8 RVA: 0x0000252C File Offset: 0x0000072C
	// (set) Token: 0x06000009 RID: 9 RVA: 0x00002534 File Offset: 0x00000734
	public bool closeToBoy { get; set; }

	// Token: 0x17000002 RID: 2
	// (get) Token: 0x0600000A RID: 10 RVA: 0x00002540 File Offset: 0x00000740
	// (set) Token: 0x0600000B RID: 11 RVA: 0x00002548 File Offset: 0x00000748
	public bool almostCloseToBoy { get; set; }

	// Token: 0x0600000C RID: 12 RVA: 0x00002554 File Offset: 0x00000754
	public float GetLastMoveSpeed()
	{
		return this.lastMoveSpeed.x * this.lastMoveSpeed.x + this.lastMoveSpeed.y * this.lastMoveSpeed.y + this.lastMoveSpeed.z * this.lastMoveSpeed.z;
	}

	// Token: 0x0600000D RID: 13 RVA: 0x000025A8 File Offset: 0x000007A8
	public void SetWasOnGround(bool newVal)
	{
		this.character.SetFreefallMovement(false);
		this.character.ClearFreeFallSpeed();
		this.wasOnGround = newVal;
	}

	// Token: 0x0600000E RID: 14 RVA: 0x000025C8 File Offset: 0x000007C8
	public void SetFrozenInsideWaitTrigger()
	{
		this.frozenInsideWaitTrigger = true;
	}

	// Token: 0x0600000F RID: 15 RVA: 0x000025D4 File Offset: 0x000007D4
	public bool IsCloseToClutterRestriction()
	{
		return this.curPosPushAway;
	}

	// Token: 0x06000010 RID: 16 RVA: 0x000025DC File Offset: 0x000007DC
	private void UpdateTargetData()
	{
		this.curPosModified = false;
		this.curPosPushAway = false;
		if (ScriptGlobals.mainCharacter is Huddle)
		{
			this.currentExtraDist = HuddleUtils.GetWidth(ScriptGlobals.mainCharacter as Huddle) - 0.2f;
			if (AlbinoGroupManager.mInstance.IsInAlbinoJumpState())
			{
				this.currentExtraDist -= 0.3f;
			}
			this.currentTargetIsHuddle = true;
			this.currentTargetPos = ScriptGlobals.huddle.pos3;
			HuddleGround.Status ground = ScriptGlobals.huddle.status.ground;
			if (ground != null)
			{
				this.currentTargetPos.y = ground.pos.y + 0.7f;
			}
			else
			{
				this.currentTargetPos.y = this.currentTargetPos.y - 1.7f;
			}
			this.currentTargetVelocity = ScriptGlobals.huddle.velocity3;
			this.currentTargetOnGround = (ScriptGlobals.huddle.status.ground.bottomCollision != null);
			this.currentPlayField = ScriptGlobals.huddle.playfield.posz;
			this.currentTargetFacing = Mathf.Sign(this.currentTargetVelocity.x);
		}
		else
		{
			this.currentExtraDist = 0f;
			this.currentTargetIsHuddle = false;
			this.currentTargetPos = ScriptGlobals.boy.pos3;
			if (!AlbinoGroupManager.mInstance.allowAlbinoClutterAround && !AlbinoGroupManager.mInstance.IsBoyBeingLifted() && this.aiMode != AlbinoAI.AIMode.ThrowBoy)
			{
				this.curPosModified = true;
				Vector3 localPosition = this._characterTransform.localPosition;
				localPosition.y += 0.75f;
				Vector3 position = AlbinoGroupManager.mInstance.noClutterTrans.position;
				float num = position.z - localPosition.z;
				if (num > -0.4f)
				{
					float num2;
					if (num < 0.15f)
					{
						num2 = (num + 0.4f) * 3f;
					}
					else
					{
						num2 = Mathf.Min((num + 0.4f) * 3f, 1.2f);
					}
					num2 = Mathf.Max(num2, 0.5f);
					if (Mathf.Abs(this.currentTargetPos.x - position.x) < num2)
					{
						if (FastMath.Abs(localPosition.x - position.x) < num2)
						{
							this.curPosPushAway = true;
						}
						this.currentTargetPos.x = position.x + Mathf.Sign(localPosition.x - position.x) * num2;
					}
				}
			}
			this.currentTargetVelocity = ScriptGlobals.boy.velocity3;
			this.currentTargetOnGround = (ScriptGlobals.boy.status.groundPlateau != null);
			this.currentPlayField = ScriptGlobals.boy.playfield.posz;
			this.currentTargetFacing = ScriptGlobals.boy.facing;
		}
	}

	// Token: 0x06000011 RID: 17 RVA: 0x000028B0 File Offset: 0x00000AB0
	public override void Start()
	{
		base.Start();
		this.updateCount = AlbinoAI.masterUpdateCount;
		AlbinoAI.masterUpdateCount = (AlbinoAI.masterUpdateCount + 1) % 5;
	}

	// Token: 0x06000012 RID: 18 RVA: 0x000028D4 File Offset: 0x00000AD4
	public override void InitAnimcontrolledAI(AnimcontrolledCharacter character)
	{
		this.animCharAnim = character.animChar.GetComponent<Animation>();
		this.followBoySpeedScalePhaseFactor = Random.Range(0.3f, 2.3f);
		if (this.colorBlendProbe != null && this.colorBlendProbe.probeType == ColorBlendProbe.ProbeType.Albino)
		{
			this.colorBlendProbe.materialInstances.Clear();
			int num = LayerMask.NameToLayer("TransparentFX");
			SkinnedMeshRenderer[] componentsInChildren = character.animChar.GetComponentsInChildren<SkinnedMeshRenderer>();
			int i = 0;
			int num2 = componentsInChildren.Length;
			while (i < num2)
			{
				MaterialInstance materialInstance = componentsInChildren[i].gameObject.AddComponent<MaterialInstance>();
				this.colorBlendProbe.materialInstances.Add(materialInstance);
				PDReflectionCharacterColor pdreflectionCharacterColor = componentsInChildren[i].gameObject.AddComponent<PDReflectionCharacterColor>();
				pdreflectionCharacterColor.matinstance = materialInstance;
				i++;
			}
			MeshRenderer[] componentsInChildren2 = character.animChar.GetComponentsInChildren<MeshRenderer>();
			int j = 0;
			int num3 = componentsInChildren2.Length;
			while (j < num3)
			{
				if (componentsInChildren2[j].gameObject.layer != num)
				{
					MaterialInstance materialInstance2 = componentsInChildren2[j].gameObject.GetComponent<MaterialInstance>();
					if (!(materialInstance2 != null))
					{
						materialInstance2 = componentsInChildren2[j].gameObject.AddComponent<MaterialInstance>();
						this.colorBlendProbe.materialInstances.Add(materialInstance2);
						PDReflectionCharacterColor pdreflectionCharacterColor2 = componentsInChildren2[j].gameObject.AddComponent<PDReflectionCharacterColor>();
						pdreflectionCharacterColor2.matinstance = materialInstance2;
					}
				}
				j++;
			}
			this.colorBlendProbe.UpdateProperties();
		}
		base.InitAnimcontrolledAI(character);
		AnimationBlendHelper blendHelper = character.GetBlendHelper();
		this.fallBDef = blendHelper.GetDefinition("PushedBackB_Fall", true);
		this.fallCDef = blendHelper.GetDefinition("PushedBackC_Fall", true);
		this.pushLDef = blendHelper.GetDefinition("PushedSideL", true);
		this.pushRDef = blendHelper.GetDefinition("PushedSideR", true);
		this.landHardForwardDef = blendHelper.GetDefinition("LandForwardHard", true);
		this.landHardDef = blendHelper.GetDefinition("LandUpState", true);
		this.landForwardMediumDef = blendHelper.GetDefinition("LandForwardMedium", true);
		this.idleCloseToBoyDef = blendHelper.GetDefinition("IdleCloseBlendState", true);
		this.idleElevatorLookDef = blendHelper.GetDefinition("IdleAElevatorLookC", true);
		this.idleLookUpDef = blendHelper.GetDefinition("IdleLookUpBlendState", true);
		this.idleDef = blendHelper.GetDefinition("IdleA", true);
		this.nudgeRightDef = blendHelper.GetDefinition("NudgeRight", true);
		this.nudgeLeftDef = blendHelper.GetDefinition("NudgeLeft", true);
		this.aidBoyCatch = blendHelper.GetDefinition("AidBoyCatch", true);
		this.aidBoyCatchCritical = blendHelper.GetDefinition("AidBoyCatchCritical", true);
		this.aidBoyCatchPrep = blendHelper.GetDefinition("AidBoyCatchPrepA", true);
		this.aidBoyCarry = blendHelper.GetDefinition("AidBoyCarry", true);
		this.aidBoyClimbable = blendHelper.GetDefinition("AidBoyClimbable", true);
		this.aidBoyClimbableFast = blendHelper.GetDefinition("AidBoyClimbableFast", true);
		this.aidBoyHuddleCarry = blendHelper.GetDefinition("AidBoyHuddleCarry", true);
		this.aidBoyHuddleClimbable = blendHelper.GetDefinition("AidBoyHuddleClimbable", true);
		this.aidHuddleLiftReadyA = blendHelper.GetDefinition("AidHuddleLiftReadyA", true);
		this.aidHuddleTryLift = blendHelper.GetDefinition("AidHuddleTryLift", true);
		this.aidHuddleCarryStepLA = blendHelper.GetDefinition("AidHuddleCarryStepLA", true);
		this.aidHuddleCarryStepRA = blendHelper.GetDefinition("AidHuddleCarryStepRA", true);
		this.leftElbow = character.animChar.transform.Find("bones/Logic/Root/SpineA/SpineB/SpineC/LeftClavicle/LeftArm/LeftElbow");
		this.leftHand = this.leftElbow.Find("LeftWrist");
		this.rightElbow = character.animChar.transform.Find("bones/Logic/Root/SpineA/SpineB/SpineC/RightClavicle/RightArm/RightElbow");
		this.rightHand = this.rightElbow.Find("RightWrist");
	}

	// Token: 0x06000013 RID: 19 RVA: 0x00002CA0 File Offset: 0x00000EA0
	public override void DoLateUpdate()
	{
		if (Time.deltaTime == 0f)
		{
			return;
		}
		if (this.handIKBlendin > 0f)
		{
			Vector3 position = this.leftHand.transform.position;
			Vector3 position2 = this.rightHand.transform.position;
			this.originalCenterPos.x = (position.x + position2.x) * 0.5f;
			this.originalCenterPos.y = (position.y + position2.y) * 0.5f;
			this.originalCenterPos.z = (position.z + position2.z) * 0.5f;
			float num = 0f;
			Vector3 vector = this.boyFootPos;
			if (!this.currentTargetIsHuddle)
			{
				Vector3 vector2 = this.boyFootPos;
				vector2.x -= this.cachedWantedPos.x;
				vector2.z -= this.cachedWantedPos.z;
				vector2.y = 0f;
				vector2.Normalize();
				vector.x -= vector2.x * 0.15f;
				vector.z -= vector2.z * 0.15f;
				vector.y -= 0.06f;
			}
			else
			{
				vector = this.huddleCarryVisualBone.TransformPoint(this.huddleCarryLocalPos);
				Vector3 vector3 = this._transform.InverseTransformPoint(vector);
				if (this.aiMode == AlbinoAI.AIMode.ThrowBoy)
				{
					ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
					if (topDefinition != this.aidHuddleTryLift && topDefinition != this.aidHuddleLiftReadyA)
					{
						this.currentAllowedYOffset += (0.2f - this.currentAllowedYOffset) * Time.deltaTime;
						this.currentAllowedZOffset += (0.4f - this.currentAllowedZOffset) * Time.deltaTime;
					}
					else
					{
						this.currentAllowedYOffset = 0.6f;
						this.currentAllowedZOffset = 0.2f;
					}
					if (topDefinition != this.aidHuddleTryLift && topDefinition != this.aidHuddleLiftReadyA && topDefinition != this.aidBoyHuddleClimbable)
					{
						if (vector3.x > 0.1f * this.scaleFactor)
						{
							if (topDefinition != this.aidHuddleCarryStepRA)
							{
								this.character.ForceToAnimation(this.aidHuddleCarryStepRA, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
							}
						}
						else if ((double)vector3.x < -0.1 * (double)this.scaleFactor)
						{
							if (topDefinition != this.aidHuddleCarryStepLA)
							{
								this.character.ForceToAnimation(this.aidHuddleCarryStepLA, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
							}
						}
						else if (FastMath.Abs(vector3.x) < 0.1f && topDefinition != this.aidBoyHuddleCarry)
						{
							this.character.ForceToAnimation(this.aidBoyHuddleCarry, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
						}
					}
				}
				Vector3 vector4 = this.originalCenterPos;
				Vector3 vector5 = vector3 - this._transform.InverseTransformPoint(vector4);
				if (FastMath.Abs(vector5.y) > 0.15f || FastMath.Abs(vector5.x) > 0.2f || FastMath.Abs(vector5.z) > 0.3f)
				{
					Transform closestBone = this.GetClosestBone(ref this.originalCenterPos);
					if (closestBone != this.huddleCarryVisualBone)
					{
						Vector3 vector6 = this.huddleCarryVisualBone.TransformPoint(this.huddleCarryLocalPos);
						this.huddleCarryVisualBone = closestBone;
						this.huddleCarryLocalPos = this.huddleCarryVisualBone.InverseTransformPoint(vector6);
						this.interpolateHandPosition = true;
					}
				}
				vector5.z = Mathf.Clamp(vector5.z, this.currentAllowedZOffset * 0.5f, this.currentAllowedZOffset);
				vector5.y = Mathf.Clamp(vector5.y, -this.currentAllowedYOffset, this.currentAllowedYOffset * 0.4f);
				vector5.x = Mathf.Clamp(vector5.x, -0.2f, 0.2f);
				if (vector5.z > 0f)
				{
					num = vector5.z * 100f + 10f;
				}
				else
				{
					num = 10f;
				}
				vector = vector4 + this._transform.TransformDirection(vector5);
			}
			Vector3 vector7 = this._transform.TransformDirection(Vector3.right) * 0.3f;
			float num2 = MathUtils.SmoothFraction(this.handIKBlendin);
			Vector3 vector8 = position * (1f - num2) + (vector - vector7 * 0.5f) * num2;
			Vector3 vector9 = position2 * (1f - num2) + (vector + vector7 * 0.5f) * num2;
			Transform parent = this.leftElbow.transform.parent;
			Vector3 vector10 = (vector8 - position) * 0.5f;
			if (this.currentTargetIsHuddle)
			{
				vector10.y *= 0.5f;
			}
			else
			{
				vector10.y = 0f;
			}
			Vector3 vector11 = this.leftElbow.transform.position + vector10;
			Vector3 vector12 = vector8 - vector11;
			float magnitude = vector12.magnitude;
			if (magnitude < 0.25f)
			{
				vector11 = vector8 - vector12 * 0.25f / magnitude;
			}
			Vector3 normalized = (vector11 - parent.transform.position).normalized;
			Vector3 vector13 = Vector3.Cross(parent.transform.right, normalized);
			Vector3 right = this.leftElbow.transform.right;
			Quaternion rotation = this.leftHand.transform.rotation * Quaternion.Euler(0f, 0f, num * this.handIKBlendin);
			parent.transform.rotation = Quaternion.LookRotation(vector13, normalized);
			Vector3 normalized2 = (vector8 - vector11).normalized;
			vector13 = Vector3.Cross(right, normalized2);
			this.leftElbow.transform.rotation = Quaternion.LookRotation(vector13, normalized2);
			this.leftElbow.transform.position = vector11;
			Transform parent2 = this.rightElbow.transform.parent;
			Vector3 vector14 = (vector9 - position2) * 0.5f;
			if (this.currentTargetIsHuddle)
			{
				vector14.y *= 0.5f;
			}
			else
			{
				vector14.y = 0f;
			}
			Vector3 vector15 = this.rightElbow.transform.position + vector14;
			normalized = (vector15 - parent2.transform.position).normalized;
			vector13 = Vector3.Cross(parent2.transform.right, normalized);
			right = this.rightElbow.transform.right;
			Quaternion rotation2 = this.rightHand.transform.rotation * Quaternion.Euler(0f, 0f, -num * this.handIKBlendin);
			parent2.transform.rotation = Quaternion.LookRotation(vector13, normalized);
			Vector3 normalized3 = (vector9 - vector15).normalized;
			vector13 = Vector3.Cross(right, normalized3);
			this.rightElbow.transform.rotation = Quaternion.LookRotation(vector13, normalized3);
			this.rightElbow.transform.position = vector15;
			this.leftHand.transform.rotation = rotation;
			this.leftHand.transform.position = vector8;
			this.rightHand.transform.rotation = rotation2;
			this.rightHand.transform.position = vector9;
		}
	}

	// Token: 0x06000014 RID: 20 RVA: 0x000034B8 File Offset: 0x000016B8
	public void FollowWaypoint(GameObject wayPointToFollow, bool setFollowMode = false)
	{
		base.FollowWaypoint(wayPointToFollow);
		if (setFollowMode)
		{
			this.aiMode = AlbinoAI.AIMode.FollowWaypoint;
		}
		if (wayPointToFollow == null && this.aiMode == AlbinoAI.AIMode.FollowWaypoint)
		{
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
		}
		this.initAnimPlaying = false;
	}

	// Token: 0x06000015 RID: 21 RVA: 0x000034F4 File Offset: 0x000016F4
	public AlbinoMineCartTrigger GetCurrentMineCartTrigger()
	{
		return this.currentMineCartTrigger;
	}

	// Token: 0x06000016 RID: 22 RVA: 0x000034FC File Offset: 0x000016FC
	public AlbinoNarrowPathTrigger GetCurrentNarrowPath()
	{
		return this.currentNarrowPath;
	}

	// Token: 0x06000017 RID: 23 RVA: 0x00003504 File Offset: 0x00001704
	public bool IsInsideABlocker()
	{
		for (int i = this.currentAlbinoBlockers.size - 1; i >= 0; i--)
		{
			AlbinoBlocker albinoBlocker = this.currentAlbinoBlockers.raw[i];
			if (albinoBlocker == null)
			{
				this.currentAlbinoBlockers.RemoveAt(i);
			}
			else if (albinoBlocker.gameObject.activeInHierarchy)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x06000018 RID: 24 RVA: 0x00003570 File Offset: 0x00001770
	public bool IsMovingTowardABlocker(float wantedPosX, float targetX)
	{
		int i = 0;
		int size = this.currentAlbinoBlockers.size;
		while (i < size)
		{
			AlbinoBlocker albinoBlocker = this.currentAlbinoBlockers.raw[i];
			if (albinoBlocker != null && albinoBlocker.gameObject.activeInHierarchy && (albinoBlocker.transform.position.x - wantedPosX) * (targetX - wantedPosX) > 0f && !albinoBlocker.IsOneWayDir(targetX - wantedPosX))
			{
				return true;
			}
			i++;
		}
		return false;
	}

	// Token: 0x06000019 RID: 25 RVA: 0x000035FC File Offset: 0x000017FC
	public AnimcontrolledCharacter GetCharacter()
	{
		return this.character;
	}

	// Token: 0x0600001A RID: 26 RVA: 0x00003604 File Offset: 0x00001804
	public GameObject GetRootNode()
	{
		if (this._characterTransform == null)
		{
			this._characterTransform = this.character.transform;
		}
		return this._characterTransform.parent.gameObject;
	}

	// Token: 0x0600001B RID: 27 RVA: 0x00003644 File Offset: 0x00001844
	public override void Reset(bool keepTriggers = false)
	{
		base.Reset(false);
		this._characterTransform = this.character.transform;
		this.lastControls.stick = Vector2.zero;
		this.grabState = AlbinoAI.GrabState.grabUndefined;
		this.remotePuppet = false;
		this.currentSpawner = null;
		this.isAwake = false;
		this.offset = 0f;
		this.followBoySpeedFactor = 1f;
		this.headHasBeenLow = false;
		this.albinoCompleted = false;
		this.overrideTarget = null;
		this.allowMoveClose = true;
		this.closeToBoy = false;
		this.almostCloseToBoy = false;
		this.lastPos = Vector3Fast.zero;
		this.justSpawned = true;
		this.freezeDueToCulling = false;
		this.leash = this.orgLeash;
		this.startupTimer = 0.5f + Random.Range(0f, 0.5f);
		this.animCharAnim.cullingType = 0;
		this.jumpTrigger = null;
		this.wasJustGrabbing = false;
		this.grabbing = false;
		this.boyXWhileGrabbing = 0f;
		this.bStandingStill = false;
		this.standStillDeadzone = 0f;
		this.narrowPaths.Clear();
		this.currentNarrowPath = null;
		if (!keepTriggers)
		{
			for (int i = this.currentAlbinoBlockers.size - 1; i >= 0; i--)
			{
				if (this.currentAlbinoBlockers.raw[i] != null)
				{
					this.currentAlbinoBlockers.raw[i].SafetyRemoveAlbinoAI(this);
				}
			}
			for (int j = this.currentWaitTriggers.size - 1; j >= 0; j--)
			{
				if (this.currentWaitTriggers.raw[j] != null)
				{
					this.currentWaitTriggers.raw[j].SafetyRemoveAlbinoAI(this);
				}
			}
			for (int k = this.narrowPaths.size - 1; k >= 0; k--)
			{
				if (this.narrowPaths.raw[k] != null)
				{
					this.narrowPaths.raw[k].SafetyRemoveAlbinoAI(this);
				}
			}
			this.albinoDetector.albinosInside.Clear();
		}
		this.currentMineCartTrigger = null;
		this.initAnimPlaying = false;
		this.aiMode = AlbinoAI.AIMode.FollowWaypoint;
		this.pushBackCountdown = 0f;
		this.pushBackTime = 0f;
		this.pushbackObject = null;
		this.safeMode = false;
		this.rescueX = 0f;
	}

	// Token: 0x0600001C RID: 28 RVA: 0x000038A0 File Offset: 0x00001AA0
	public void SetRemotePuppet(bool doRemote)
	{
		if (this.remotePuppet && !doRemote)
		{
			this.character.onGround = true;
		}
		if (!doRemote)
		{
			AlbinoGroupManager.mInstance.doNewOffsetNextTime = true;
		}
		this.remotePuppet = doRemote;
	}

	// Token: 0x0600001D RID: 29 RVA: 0x000038D8 File Offset: 0x00001AD8
	public override bool AllowGroundCollision(Collider collider)
	{
		return collider.gameObject.GetComponent<HuddleLegIgnoreCollision>() == null;
	}

	// Token: 0x0600001E RID: 30 RVA: 0x000038EC File Offset: 0x00001AEC
	public void SetNewLeashLength(float newLength)
	{
		this.leash = newLength;
	}

	// Token: 0x0600001F RID: 31 RVA: 0x000038F8 File Offset: 0x00001AF8
	public bool CloseToMainCharacter()
	{
		Vector3 vector = this.cachedWantedPos;
		float num;
		float num2;
		if (ScriptGlobals.mainCharacter is Huddle)
		{
			Vector3 pos = ScriptGlobals.huddle.pos;
			num = pos.x - vector.x;
			num2 = pos.y - vector.y;
		}
		else
		{
			vector2f pos2 = ScriptGlobals.boy.pos;
			num = pos2.x - vector.x;
			num2 = pos2.y - vector.y;
		}
		float num3 = num * num + num2 * num2;
		return num3 <= this.leash * this.leash;
	}

	// Token: 0x06000020 RID: 32 RVA: 0x000039A4 File Offset: 0x00001BA4
	public void ForceFreeze()
	{
		this.freezeDueToCulling = true;
	}

	// Token: 0x06000021 RID: 33 RVA: 0x000039B0 File Offset: 0x00001BB0
	public override bool AllowUpdate()
	{
		bool flag = this.CloseToMainCharacter();
		if (flag && this.freezeDueToCulling)
		{
			this.cullers.size = SubsceneCullingManager.instance.GetSubsceneCullersContainingPointPreAlloc(this.cullers.raw, base.transform.position, FolderTypes.Gameplay);
			int i = 0;
			int size = this.cullers.size;
			while (i < size)
			{
				SubsceneCuller subsceneCuller = this.cullers.raw[i];
				if (!subsceneCuller.IsActive)
				{
					if (this.animCharAnim.enabled)
					{
						this.animCharAnim.enabled = false;
					}
					return false;
				}
				i++;
			}
		}
		if (this.freezeDueToCulling && flag)
		{
			this.frozenInsideWaitTrigger = false;
		}
		else if (!this.freezeDueToCulling && !flag)
		{
			AlbinoWaitTrigger currentWaitTrigger = this.GetCurrentWaitTrigger();
			if (currentWaitTrigger != null)
			{
				this.frozenInsideWaitTrigger = true;
				if (currentWaitTrigger.waitPosition != null)
				{
					this.frozenWaitTriggerPos = currentWaitTrigger.waitPosition.transform.position;
				}
				else
				{
					this.frozenWaitTriggerPos = currentWaitTrigger.transform.position;
				}
			}
			else
			{
				this.frozenInsideWaitTrigger = false;
			}
		}
		this.freezeDueToCulling = !flag;
		if (!flag)
		{
			this.freezeDueToCulling = true;
			if (this.animCharAnim.enabled)
			{
				this.animCharAnim.enabled = false;
			}
			return false;
		}
		if (this.animCharAnim.enabled != this.isAwake)
		{
			if (this.isAwake)
			{
				this.justWoken = true;
			}
			this.animCharAnim.enabled = this.isAwake;
		}
		return this.isAwake;
	}

	// Token: 0x06000022 RID: 34 RVA: 0x00003B60 File Offset: 0x00001D60
	public override bool HandleHighGroundCollision(ColInfo3 colInfo)
	{
		return true;
	}

	// Token: 0x06000023 RID: 35 RVA: 0x00003B64 File Offset: 0x00001D64
	private void DoLongDeltaTimeSpecialTriggerDetection(Vector3 wantedPos, Vector3 movement)
	{
		float magnitude = movement.magnitude;
		if (magnitude > 0.001f)
		{
			Vector3 vector = wantedPos + Vector3.up;
			Vector3 vector2 = movement / magnitude;
			int num = Physics.RaycastAllMasking(AlbinoAI.rayhitBuffer, vector, vector2, magnitude + 0.2f);
			for (int i = 0; i < num; i++)
			{
				Collider collider = AlbinoAI.rayhitBuffer[i].collider;
				if (collider != null)
				{
					AlbinoTrigger component = collider.gameObject.GetComponent<AlbinoTrigger>();
					if (component != null && component.GetIsEnabled())
					{
						this.TriggerEntered(component);
					}
				}
			}
		}
	}

	// Token: 0x06000024 RID: 36 RVA: 0x00003C14 File Offset: 0x00001E14
	public override Vector3 AIUpdateFinalMoveVector(Vector3 moveVector, float deltaTime, ref Vector3 wantedPos)
	{
		if (this.simpleAvoidance)
		{
			this.cachedWantedPos = wantedPos;
			this.cachedWantedPos.y = this.cachedWantedPos.y + 0.75f;
			return moveVector;
		}
		if (Time.deltaTime > 0.1f)
		{
			this.DoLongDeltaTimeSpecialTriggerDetection(wantedPos, moveVector);
		}
		Vector3 result = AlbinoGroupManager.mInstance.GetOffsetToAllBoys(this, moveVector, deltaTime, ref wantedPos);
		if (this.currentNarrowPath != null)
		{
			float num = wantedPos.z + result.z;
			float num2 = num - this.currentNarrowPath.cachedZ;
			if (FastMath.Abs(num2) > this.currentNarrowPath.width * 0.5f && result.z * num2 > 0f)
			{
				result.z = 0f;
			}
		}
		else
		{
			float num3 = wantedPos.z + result.z;
			float num4 = num3 - this.currentPlayField;
			if (FastMath.Abs(num4) > 5f && result.z * num4 > 0f)
			{
				result.z = 0f;
			}
		}
		Vector3 vector = wantedPos;
		if (this.aiMode != AlbinoAI.AIMode.FollowWaypoint)
		{
			this.UpdatePosFromCurrentAlbinoBlocker(result.x, deltaTime, ref wantedPos, FastMath.Abs(moveVector.x) / deltaTime > 0.01f);
			if (wantedPos.x != vector.x || wantedPos.y != vector.y || wantedPos.z != vector.z)
			{
				result = Vector3Fast.zero;
			}
		}
		this.cachedWantedPos = wantedPos;
		this.cachedWantedPos.y = this.cachedWantedPos.y + 0.75f;
		return result;
	}

	// Token: 0x06000025 RID: 37 RVA: 0x00003DCC File Offset: 0x00001FCC
	public bool GetDisplaceNegative()
	{
		return this.zDisplaceNegative;
	}

	// Token: 0x06000026 RID: 38 RVA: 0x00003DD4 File Offset: 0x00001FD4
	public Transform GetTransform()
	{
		return this._transform;
	}

	// Token: 0x06000027 RID: 39 RVA: 0x00003DDC File Offset: 0x00001FDC
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.akGameObjAudio = AudioUtils.EnsureAkGameObj(this.audioGameObject, this);
	}

	// Token: 0x06000028 RID: 40 RVA: 0x00003E04 File Offset: 0x00002004
	private void Awake()
	{
		this.OnPreProcess();
		this._transform = base.transform;
		if (this.character != null)
		{
			this._characterTransform = this.character.transform;
		}
		this.zDisplaceNegative = AlbinoAI.globalAlbinoDisplaceNegative;
		AlbinoAI.globalAlbinoDisplaceNegative = !AlbinoAI.globalAlbinoDisplaceNegative;
		this.nextGrabRandom = Random.Range(-0.1f, 0.2f);
		if (this.albinoDetector)
		{
			this.albinoDetector.ownerAI = this;
		}
	}

	// Token: 0x06000029 RID: 41 RVA: 0x00003E90 File Offset: 0x00002090
	private AlbinoNarrowPathTrigger GetTightestNarrowPath()
	{
		AlbinoNarrowPathTrigger result = null;
		float num = float.MaxValue;
		int i = 0;
		int size = this.narrowPaths.size;
		while (i < size)
		{
			AlbinoNarrowPathTrigger albinoNarrowPathTrigger = this.narrowPaths.raw[i];
			if (albinoNarrowPathTrigger.width < num)
			{
				num = albinoNarrowPathTrigger.width;
				result = albinoNarrowPathTrigger;
			}
			i++;
		}
		return result;
	}

	// Token: 0x0600002A RID: 42 RVA: 0x00003EEC File Offset: 0x000020EC
	public void TriggerEntered(AlbinoTrigger trigger)
	{
		AlbinoJumpTrigger albinoJumpTrigger = trigger as AlbinoJumpTrigger;
		if (albinoJumpTrigger != null)
		{
			this.jumpTrigger = albinoJumpTrigger;
		}
		AlbinoNarrowPathTrigger albinoNarrowPathTrigger = trigger as AlbinoNarrowPathTrigger;
		if (albinoNarrowPathTrigger != null)
		{
			if (!this.narrowPaths.Contains(albinoNarrowPathTrigger))
			{
				this.narrowPaths.Add(albinoNarrowPathTrigger);
			}
			this.currentNarrowPath = this.GetTightestNarrowPath();
		}
		AlbinoBlocker albinoBlocker = trigger as AlbinoBlocker;
		if (albinoBlocker != null && !this.currentAlbinoBlockers.Contains(albinoBlocker))
		{
			this.currentAlbinoBlockers.Add(albinoBlocker);
		}
		AlbinoWaitTrigger albinoWaitTrigger = trigger as AlbinoWaitTrigger;
		if (albinoWaitTrigger != null && !this.currentWaitTriggers.Contains(albinoWaitTrigger))
		{
			this.currentWaitTriggers.Add(albinoWaitTrigger);
		}
		AlbinoMineCartTrigger albinoMineCartTrigger = trigger as AlbinoMineCartTrigger;
		if (albinoMineCartTrigger != null)
		{
			this.currentMineCartTrigger = albinoMineCartTrigger;
		}
	}

	// Token: 0x0600002B RID: 43 RVA: 0x00003FCC File Offset: 0x000021CC
	public void TriggerExited(AlbinoTrigger trigger)
	{
		if (this.jumpTrigger == trigger)
		{
			this.jumpTrigger = null;
		}
		AlbinoNarrowPathTrigger albinoNarrowPathTrigger = trigger as AlbinoNarrowPathTrigger;
		if (albinoNarrowPathTrigger != null)
		{
			this.narrowPaths.Remove(albinoNarrowPathTrigger);
			this.currentNarrowPath = this.GetTightestNarrowPath();
		}
		for (int i = this.currentAlbinoBlockers.size - 1; i >= 0; i--)
		{
			if (this.currentAlbinoBlockers.raw[i] == null)
			{
				this.currentAlbinoBlockers.RemoveAt(i);
			}
		}
		AlbinoBlocker albinoBlocker = trigger as AlbinoBlocker;
		if (albinoBlocker != null && this.currentAlbinoBlockers.Contains(albinoBlocker))
		{
			this.currentAlbinoBlockers.Remove(albinoBlocker);
		}
		for (int j = this.currentWaitTriggers.size - 1; j >= 0; j--)
		{
			if (this.currentWaitTriggers.raw[j] == null)
			{
				this.currentWaitTriggers.RemoveAt(j);
			}
		}
		AlbinoWaitTrigger albinoWaitTrigger = trigger as AlbinoWaitTrigger;
		if (albinoWaitTrigger != null && this.currentWaitTriggers.Contains(albinoWaitTrigger) && !this.albinoCompleted)
		{
			this.currentWaitTriggers.Remove(albinoWaitTrigger);
		}
		if (this.currentMineCartTrigger == trigger)
		{
			this.currentMineCartTrigger = null;
		}
	}

	// Token: 0x0600002C RID: 44 RVA: 0x0000412C File Offset: 0x0000232C
	public bool IsInsideWaitTrigger(ref Vector3 pos)
	{
		if (this.frozenInsideWaitTrigger)
		{
			pos = this.frozenWaitTriggerPos;
			return true;
		}
		AlbinoWaitTrigger currentWaitTrigger = this.GetCurrentWaitTrigger();
		if (currentWaitTrigger != null)
		{
			pos = currentWaitTrigger.waitTriggerPos;
			return true;
		}
		return false;
	}

	// Token: 0x0600002D RID: 45 RVA: 0x00004174 File Offset: 0x00002374
	private AlbinoWaitTrigger GetCurrentWaitTrigger()
	{
		AlbinoWaitTrigger result = null;
		int num = int.MinValue;
		int i = 0;
		int size = this.currentWaitTriggers.size;
		while (i < size)
		{
			AlbinoWaitTrigger albinoWaitTrigger = this.currentWaitTriggers.raw[i];
			if (albinoWaitTrigger.priority > num)
			{
				result = albinoWaitTrigger;
				num = albinoWaitTrigger.priority;
			}
			i++;
		}
		return result;
	}

	// Token: 0x0600002E RID: 46 RVA: 0x000041D0 File Offset: 0x000023D0
	public void unspawnAlbino()
	{
		this.character.ForceToAnimation("IdleA", null, 0f, 0f, false);
		this.GetRootNode().SetActive(false);
		AlbinoGroupManager.mInstance.RemoveAlbino(this);
		this.Reset(false);
	}

	// Token: 0x0600002F RID: 47 RVA: 0x00004218 File Offset: 0x00002418
	public void CompleteAlbino()
	{
		this.albinoCompleted = true;
		this.completedPos = this._characterTransform.position;
	}

	// Token: 0x06000030 RID: 48 RVA: 0x00004234 File Offset: 0x00002434
	private void AddAlbinoToMainSystem()
	{
		if (AlbinoGroupManager.mInstance && AlbinoGroupManager.mStarted)
		{
			AlbinoGroupManager.mInstance.AddAlbino(this);
			this.isAwake = true;
		}
	}

	// Token: 0x06000031 RID: 49 RVA: 0x00004264 File Offset: 0x00002464
	public void SetNewOffset(float newOffset, float delay)
	{
		this.offset = newOffset;
	}

	// Token: 0x06000032 RID: 50 RVA: 0x00004270 File Offset: 0x00002470
	public void SetFollowBoy()
	{
		this.aiMode = AlbinoAI.AIMode.FollowBoy;
		this.initAnimPlaying = false;
		int count = AlbinoGroupManager.mInstance.GetActiveAlbinos().Count((AlbinoAI x) => x.aiMode != AlbinoAI.AIMode.SpawnedButWaiting);
		AlbinoGroupManager.mInstance.AlbinoAwakeAudioEvent(count, this.akGameObjAudio);
	}

	// Token: 0x06000033 RID: 51 RVA: 0x000042CC File Offset: 0x000024CC
	public void PushedBackByThis(GameObject pusher)
	{
		if (this.aiMode != AlbinoAI.AIMode.PushBack)
		{
			this.aiMode = AlbinoAI.AIMode.PushBack;
			this.pushBackCountdown = Random.Range(3f, 5f);
			this.pushbackObject = pusher;
			this.pushBackTime = 0f;
			Vector3 vector = this._transform.InverseTransformPoint(pusher.transform.position);
			this.startupTimer = 0f;
			if (vector.z > 0f)
			{
				switch (Random.Range(0, 4))
				{
				case 0:
					this.character.ForceToAnimation("RandomPushBackState", null, 0.1f, 0f, false);
					break;
				case 1:
					if (vector.x <= 0f)
					{
						this.character.ForceToAnimation(this.pushRDef, false, Vector3Fast.zero, Vector3Fast.zero, 0.2f, 0f, false);
					}
					else
					{
						this.character.ForceToAnimation(this.pushLDef, false, Vector3Fast.zero, Vector3Fast.zero, 0.2f, 0f, false);
					}
					break;
				case 2:
					this.character.ForceToAnimation(this.fallBDef, false, Vector3Fast.zero, Vector3Fast.zero, 0.2f, 0f, false);
					break;
				case 3:
					this.character.ForceToAnimation(this.fallCDef, false, Vector3Fast.zero, Vector3Fast.zero, 0.2f, 0f, false);
					break;
				}
				float num = this.character.GetBlendHelper().GetTopDefinition().speedScale = Random.Range(0.85f, 1.1f);
			}
			else
			{
				this.character.ForceToAnimation("RandomStumbleState", null, 0.1f, 0f, false);
				float num = this.character.GetBlendHelper().GetTopDefinition().speedScale = Random.Range(0.9f, 1.1f);
			}
		}
	}

	// Token: 0x06000034 RID: 52 RVA: 0x000044C8 File Offset: 0x000026C8
	private bool ShouldIAvoidMainBoy()
	{
		if (this.remotePuppet)
		{
			return false;
		}
		if (ScriptGlobals.boy.state is BoyGrabState && !this.currentTargetIsHuddle)
		{
			return false;
		}
		Vector3 localPosition = this._characterTransform.localPosition;
		Vector3 pos = this.currentTargetPos;
		if (this.curPosModified)
		{
			pos = ScriptGlobals.mainCharacter.pos3;
		}
		localPosition.x -= pos.x;
		localPosition.y -= pos.y;
		localPosition.z -= pos.z;
		float num = this.currentTargetVelocity.x - this.character.GetMovableGroundVelocity().x;
		if (FastMath.Abs(localPosition.y + 0.7f) > 0.8f || (double)FastMath.Abs(num) <= 0.7 || FastMath.Abs(localPosition.z) > this.currentAvoidRadius + this.currentExtraDist || FastMath.Abs(localPosition.x) > this.currentAvoidRadius + this.currentExtraDist)
		{
			return false;
		}
		float x = localPosition.x;
		if (num * x <= 0f)
		{
			return false;
		}
		if (!this.currentTargetIsHuddle)
		{
			AlbinoGroupManager.mInstance.BoyRunningThroughAlbinos();
		}
		return true;
	}

	// Token: 0x06000035 RID: 53 RVA: 0x00004628 File Offset: 0x00002828
	public void SetNudgeTimer(float timer = 0.3f)
	{
		this.nudgeTimer = timer;
	}

	// Token: 0x06000036 RID: 54 RVA: 0x00004634 File Offset: 0x00002834
	private bool MoveCloseToBoy(AnimcontrolledCharacter.AnimControl controls, float deltaTime, Vector3 boyPos, bool isBoy, ref Vector3 wantedPos)
	{
		if (AlbinoGroupManager.mInstance.multiInteraction != null && !AlbinoGroupManager.mInstance.RoomLeftForMultiInteractionWhileFarAway(this))
		{
			return false;
		}
		ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
		Vector3 vector = boyPos;
		vector.x -= wantedPos.x;
		vector.y -= wantedPos.y;
		vector.z -= wantedPos.z;
		if (vector.x < -1f || vector.x > 1f)
		{
			vector.z -= Mathf.Sign(vector.z);
		}
		float y = vector.y;
		vector.y = 0f;
		float magnitude = vector.magnitude;
		bool flag = this.bStandingStill && magnitude < 4f + this.currentExtraDist;
		if (!flag && magnitude < 2f + this.currentExtraDist && (this.IsInsideABlocker() || Vector3.Dot(this._transform.localRotation * Vector3Fast.forward, vector) < 0f))
		{
			flag = true;
		}
		float val = this.currentTargetVelocity.x - this.character.GetMovableGroundVelocity().x;
		float num = this.ShouldICatchBoy(ref wantedPos);
		if ((!flag || (isBoy && FastMath.Abs(val) > 0.6f)) && num <= 0f)
		{
			return false;
		}
		if ((topDefinition == this.landHardForwardDef || topDefinition == this.landHardDef || topDefinition == this.landForwardMediumDef) && num <= 0f)
		{
			return false;
		}
		float num2 = 0.35f + this.currentExtraDist - this.huddleDimDist;
		float num3 = 0.55f + this.currentExtraDist - this.huddleDimDist;
		if (isBoy && y > -0.3f && (y < 1f || (y < 2.5f && AlbinoGroupManager.mInstance.IsBoyBeingLifted())))
		{
			float num4 = FastMath.Abs(vector.x);
			float num5 = FastMath.Abs(vector.z);
			if (num4 < 0.65f + this.currentExtraDist && num5 < 0.9f)
			{
				this.closeToBoy = true;
			}
			if (num4 < 0.9f + this.currentExtraDist && num5 < 1.1f)
			{
				this.almostCloseToBoy = true;
			}
		}
		float num6 = 1f / magnitude;
		vector.x *= num6;
		vector.y *= num6;
		vector.z *= num6;
		AnimationBlendHelper blendHelper = this.character.GetBlendHelper();
		if (!isBoy)
		{
			num2 = 0.45f;
			num3 = 0.75f;
		}
		if (this.safeMode && !topDefinition.debugName.StartsWith("Minecart"))
		{
			this.safeMode = false;
		}
		if (topDefinition != this.fallBDef && topDefinition != this.fallCDef && topDefinition != this.aidBoyCatchCritical)
		{
			bool flag2 = false;
			float num7 = 0f;
			bool flag3 = true;
			int i = 0;
			int size = this.currentAlbinoBlockers.size;
			while (i < size)
			{
				AlbinoBlocker albinoBlocker = this.currentAlbinoBlockers.raw[i];
				if (albinoBlocker.gameObject.activeInHierarchy)
				{
					flag2 = true;
					if (this.currentAlbinoBlockers.raw[i].BlockedByWall(wantedPos.x, Mathf.Sign(vector.x), -0.1f, out num7))
					{
						flag3 = false;
						break;
					}
				}
				i++;
			}
			if (flag2 && !flag3)
			{
				controls.stick = Vector2.zero;
				if (isBoy)
				{
					this.HandlePushAndOvershoot(deltaTime, num2, this.currentTargetPos, ref wantedPos, false, false);
				}
				else
				{
					this.HandlePushAndOvershoot(deltaTime, num2, boyPos, ref wantedPos, false, false);
				}
			}
			else
			{
				GameObject gameObject = null;
				if (magnitude > num3)
				{
					bool flag4 = false;
					gameObject = AlbinoGroupManager.mInstance.GetObstructor(this, vector, magnitude + 0.35f, 0.6f, out flag4);
					if (gameObject != null)
					{
						Vector3 vector2 = vector;
						if (!flag4)
						{
							vector.z -= Mathf.Sign(vector.z) * 0.5f;
							vector.Normalize();
						}
						else
						{
							Vector3 position = gameObject.transform.position;
							position.x -= wantedPos.x;
							position.y -= wantedPos.y;
							position.z -= wantedPos.z;
							Vector3 vector3 = this._transform.InverseTransformDirection(position);
							Vector3 zero = Vector3Fast.zero;
							zero.x *= Mathf.Sign(vector3.x);
							Vector3 vector4 = this._transform.TransformDirection(zero);
							vector.x += vector4.x * 0.5f;
							vector.y += vector4.y * 0.5f;
							vector.z += vector4.z * 0.5f;
							vector.Normalize();
						}
						gameObject = AlbinoGroupManager.mInstance.GetObstructor(this, vector, magnitude + 0.35f, 0.6f, out flag4);
						if (gameObject != null)
						{
							vector = vector2;
						}
					}
				}
				if (isBoy && !this.safeMode && this.character.onGround)
				{
					Vector3 vector5 = this._transform.localRotation * Vector3Fast.left;
					float num8;
					if (this.lastMoveSpeed.sqrMagnitude < 0.005f && !AlbinoGroupManager.mInstance.allowAlbinoClutterAround && !AlbinoGroupManager.mInstance.IsBoyBeingLifted())
					{
						Vector3 zero2 = Vector3Fast.zero;
						zero2.x = ScriptGlobals.boy.pos.x - wantedPos.x;
						zero2.z = ScriptGlobals.boy.pos3.z - wantedPos.z;
						zero2.y = 0f;
						zero2.Normalize();
						num8 = Vector3.Angle(zero2, vector5) - 90f;
					}
					else
					{
						num8 = Vector3.Angle(vector, vector5) - 90f;
					}
					if (FastMath.Abs(num8) > 0.1f)
					{
						Vector3 localEulerAngles = this._characterTransform.localEulerAngles;
						localEulerAngles.y += num8 * Mathf.Min(deltaTime * 2.5f, 1f);
						this.character.FastSetRotation(Quaternion.Euler(localEulerAngles));
						this.forceUpdate = true;
					}
				}
				bool flag5 = false;
				if (AlbinoGroupManager.mInstance.restrictAlbinoLiftTrigger != null && flag2 && this.bStandingStill)
				{
					Vector3 vector6 = wantedPos;
					vector6.z -= ScriptGlobals.boy.pos3.z;
					vector6.x -= ScriptGlobals.boy.pos.x;
					if (vector6.z < 0.1f && FastMath.Abs(vector6.x) < 0.5f)
					{
						flag5 = true;
					}
				}
				if (((magnitude > num3 && gameObject == null) || flag5) && topDefinition != this.aidBoyCatchPrep)
				{
					float num9 = Mathf.Min((magnitude - num3) * 2f, 1f);
					num9 = 0.7f * num9 + 0.1f * (1f - num9);
					controls.stick.x = vector.x * num9;
					controls.stick.y = vector.z * num9;
					if (magnitude < num3 + 0.5f)
					{
						if (isBoy)
						{
							this.HandlePushAndOvershoot(deltaTime, num2, this.currentTargetPos, ref wantedPos, false, false);
						}
						else
						{
							this.HandlePushAndOvershoot(deltaTime, num2, boyPos, ref wantedPos, false, false);
						}
					}
				}
				else
				{
					Vector3 vector7 = Vector3Fast.zero;
					if (isBoy)
					{
						vector7 = this.HandlePushAndOvershoot(deltaTime, num2, this.currentTargetPos, ref wantedPos, false, false);
						if (y > -0.3f && (y < 1f || (y < 2.5f && AlbinoGroupManager.mInstance.IsBoyBeingLifted())))
						{
							if (magnitude < 0.7f + this.currentExtraDist)
							{
								this.closeToBoy = true;
							}
							if (magnitude < 1f + this.currentExtraDist)
							{
								this.almostCloseToBoy = true;
							}
						}
					}
					if (this.character.onGround && this.wasOnGround)
					{
						bool flag6 = false;
						if (num > 0f && ((ScriptGlobals.boy.velocity.y > -6f && num < 0.52f) || num < 0.15f))
						{
							float startPos = 0f;
							if (num < 0.52f)
							{
								startPos = (0.52f - num) * 0.5f;
							}
							if (num < 0.28f && ScriptGlobals.boy.velocity.y > -2f)
							{
								startPos = 0.25f;
								num = 0.3f;
							}
							if (ScriptGlobals.boy.velocity.y < -6f)
							{
								this.character.ForceToAnimation(this.aidBoyCatchCritical, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
								this.aidBoyCatchCritical.speedScale = Random.Range(0.85f, 1.25f);
							}
							else
							{
								this.character.ForceToAnimation(this.aidBoyCatch, false, Vector3Fast.zero, Vector3Fast.zero, Mathf.Max(num, 0.2f), startPos, false);
								this.aidBoyCatch.speedScale = Random.Range(0.85f, 1.25f);
							}
							this.headHasBeenLow = false;
							this.aiMode = AlbinoAI.AIMode.ThrowBoy;
							this.allowExtraReposition = true;
							flag6 = true;
						}
						else if (num > 0f && num < 0.5f && ScriptGlobals.boy.velocity.y < 0f && ScriptGlobals.boy.pos.y - wantedPos.y > 5f && this.character.GetBlendHelper().GetTopDefinition() != this.aidBoyCatchPrep)
						{
							this.character.ForceToAnimation(this.aidBoyCatchPrep, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
						}
						if (blendHelper.GetTopDefinition() == this.aidBoyCatchPrep)
						{
							flag6 = true;
							if (this.currentTargetPos.y <= wantedPos.y + 1f)
							{
								this.character.ForceToAnimation("IdleA", null, -1f, 0f, false);
							}
						}
						if (!flag6)
						{
							bool flag7 = false;
							float num10 = vector7.z * 5f + wantedPos.z;
							for (int j = this.narrowPaths.size - 1; j >= 0; j--)
							{
								AlbinoNarrowPathTrigger albinoNarrowPathTrigger = this.narrowPaths.raw[j];
								if (albinoNarrowPathTrigger != null)
								{
									float cachedZ = albinoNarrowPathTrigger.cachedZ;
									if (num10 < cachedZ - albinoNarrowPathTrigger.width * 0.5f || num10 > cachedZ + albinoNarrowPathTrigger.width * 0.5f)
									{
										flag7 = true;
										break;
									}
								}
								else
								{
									this.narrowPaths.RemoveAt(j);
								}
							}
							if ((isBoy && this.nudgeTimer > 0f && this.nudgeTimer < 0.5f) || (vector7.magnitude > 0.15f * deltaTime && !flag7))
							{
								if (this.nudgeTimer <= 0f && this.startupTimer <= 0f)
								{
									bool flag8 = this._transform.InverseTransformDirection(vector7).x > 0f;
									if (topDefinition != this.nudgeRightDef && flag8)
									{
										this.nudgeTimer = 0.3f;
										this.character.ForceToAnimation(this.nudgeRightDef, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
									}
									else if (topDefinition != this.nudgeLeftDef && !flag8)
									{
										this.nudgeTimer = 0.3f;
										this.character.ForceToAnimation(this.nudgeLeftDef, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
									}
								}
							}
							else if ((double)y < 1.5)
							{
								if (topDefinition != this.idleCloseToBoyDef && topDefinition != this.idleElevatorLookDef)
								{
									float num11 = magnitude;
									if (!AlbinoGroupManager.mInstance.allowAlbinoClutterAround)
									{
										Vector3 vector8 = ScriptGlobals.boy.pos3 - wantedPos;
										vector8.y = 0f;
										num11 = vector8.magnitude;
									}
									if (isBoy && num11 < num2 + 0.05f)
									{
										this.character.ForceToAnimation(this.idleElevatorLookDef, false, Vector3Fast.zero, Vector3Fast.zero, -1f, 0f, false);
									}
									else
									{
										this.character.ForceToAnimation(this.idleCloseToBoyDef, false, Vector3Fast.zero, Vector3Fast.zero, Random.Range(0.4f, 0.7f), 0f, false);
									}
								}
							}
							else if (topDefinition != this.idleLookUpDef)
							{
								this.character.ForceToAnimation(this.idleLookUpDef, false, Vector3Fast.zero, Vector3Fast.zero, Random.Range(0.7f, 1f), 0f, false);
							}
						}
					}
					controls.stick = Vector2.zero;
				}
				this.DoRescueXUpdate(controls, ref wantedPos);
			}
		}
		return true;
	}

	// Token: 0x06000037 RID: 55 RVA: 0x00005464 File Offset: 0x00003664
	private Vector3 HandlePushAndOvershoot(float deltaTime, float veryCloseDist, Vector3 boyPos, ref Vector3 wantedPos, bool onlyBoyAlignZ = false, bool ignoreOtherBoys = false)
	{
		Vector3 zero = Vector3Fast.zero;
		Vector3 vector = wantedPos;
		if (!ignoreOtherBoys)
		{
			int i = 0;
			int size = this.albinoDetector.albinosInside.size;
			while (i < size)
			{
				AlbinoAI albinoAI = this.albinoDetector.albinosInside.raw[i];
				Vector3 vector2;
				vector2.x = albinoAI.lastPos.x - wantedPos.x;
				vector2.y = 0f;
				vector2.z = albinoAI.lastPos.z - wantedPos.z;
				float num = vector2.x * vector2.x + vector2.z * vector2.z;
				if (num < 0.16f)
				{
					float num2 = Mathf.Sqrt(num);
					this.forceUpdate = true;
					float num3 = (0.4f - num2) * 2.5f;
					Quaternion localRotation = this._transform.localRotation;
					Quaternion quaternion = localRotation;
					QuaternionFast.InverseReplace(ref quaternion);
					Vector3 vector3 = vector2;
					QuaternionFast.RotateReplaceRhs(ref quaternion, ref vector3);
					vector3.y = 0f;
					float num4 = 3f;
					vector3.z *= num4;
					Vector3 vector4 = vector3;
					QuaternionFast.RotateReplaceRhs(ref localRotation, ref vector4);
					vector4.x *= num3;
					vector4.y *= num3;
					vector4.z *= num3;
					zero.x -= vector4.x;
					zero.y -= vector4.y;
					zero.z -= vector4.z;
				}
				i++;
			}
		}
		if (zero.x * this.dontPushDir <= 0f)
		{
			float num5 = 8f * deltaTime;
			wantedPos.x += num5 * zero.x;
			wantedPos.y += num5 * zero.y;
			wantedPos.z += num5 * zero.z;
		}
		Vector3 vector5;
		vector5.x = boyPos.x - wantedPos.x;
		vector5.y = 0f;
		vector5.z = boyPos.z - wantedPos.z;
		if (vector5.x * this.dontPushDir >= 0f)
		{
			float num6 = vector5.x * vector5.x + vector5.z * vector5.z;
			if (num6 < veryCloseDist * veryCloseDist)
			{
				float num7 = Mathf.Sqrt(num6);
				vector5.x /= num7;
				vector5.z /= num7;
				Vector3 vector6;
				vector6.x = boyPos.x - vector5.x * veryCloseDist;
				vector6.y = wantedPos.y;
				vector6.z = boyPos.z - vector5.z * veryCloseDist;
				if (onlyBoyAlignZ)
				{
					vector6.x = wantedPos.x;
				}
				float num8 = Mathf.Min((veryCloseDist - num7) * 3f, 1f) * 2f + 1f;
				num8 = Mathf.Min(deltaTime * 8f * num8, 0.5f);
				wantedPos.x = vector6.x * num8 + wantedPos.x * (1f - num8);
				wantedPos.y = vector6.y * num8 + wantedPos.y * (1f - num8);
				wantedPos.z = vector6.z * num8 + wantedPos.z * (1f - num8);
				this.forceUpdate = true;
			}
		}
		Vector3 result;
		result.x = wantedPos.x - vector.x;
		result.y = wantedPos.y - vector.y;
		result.z = wantedPos.z - vector.z;
		return result;
	}

	// Token: 0x06000038 RID: 56 RVA: 0x0000585C File Offset: 0x00003A5C
	private void DoRescueXUpdate(AnimcontrolledCharacter.AnimControl controls, ref Vector3 wantedPos)
	{
		if (this.rescueX != 0f)
		{
			float num = this.currentTargetPos.x - wantedPos.x;
			if (this.overrideTarget != null)
			{
				num = this.overrideTarget.transform.position.x - wantedPos.x;
			}
			if (controls.stick.x * this.rescueX < 0f && this.rescueX * num < 0f && FastMath.Abs(num) < 1f)
			{
				controls.stick = Vector2.zero;
			}
			else if (controls.stick.x != 0f)
			{
				this.rescueX = 0f;
			}
		}
	}

	// Token: 0x06000039 RID: 57 RVA: 0x0000592C File Offset: 0x00003B2C
	public void AvoidBoy(Vector3 obstPos, float blendTime = 0.2f)
	{
		ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
		if (topDefinition == this.fallBDef || topDefinition == this.fallCDef || topDefinition == this.pushLDef || topDefinition == this.pushRDef || topDefinition == this.aidBoyCatchCritical || topDefinition == this.landHardForwardDef || topDefinition == this.landHardDef || topDefinition == this.landForwardMediumDef)
		{
			return;
		}
		this.headHasBeenLow = false;
		float num = 0.02f;
		if (!this.currentTargetOnGround)
		{
			num = 0.2f;
		}
		if (this.currentTargetIsHuddle)
		{
			float albinoWeakened = ScriptGlobals.huddle.GetAlbinoWeakened();
			ScriptGlobals.huddle.SetAlbinoWeakened(albinoWeakened + 0.14f, 5f);
			if (FastMath.Abs(this.currentTargetVelocity.x) > 1.5f)
			{
				if (FastMath.Abs(this.cachedWantedPos.z - this.currentTargetPos.z) < 1f)
				{
					num = 0.75f;
				}
				else
				{
					num = 0.35f;
				}
			}
			else if (FastMath.Abs(this.cachedWantedPos.z - this.currentTargetPos.z) < 1f)
			{
				num = 0.35f;
			}
			else
			{
				num = 0.05f;
			}
		}
		if (Random.Range(0f, 1f) < num)
		{
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightThenLeft, Random.Range(0.3f, 0.4f), 0.2f, 0, 0f);
			RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftSpike, Random.Range(0.6f, 0.7f), 0.2f, 0, 0.5f);
			if (Random.Range(0f, 1f) <= 0.5f)
			{
				this.character.ForceToAnimation(this.fallBDef, false, Vector3Fast.zero, Vector3Fast.zero, 0.2f, 0f, false);
			}
			else
			{
				this.character.ForceToAnimation(this.fallCDef, false, Vector3Fast.zero, Vector3Fast.zero, 0.2f, 0f, false);
			}
		}
		else
		{
			if (Random.Range(0f, 1f) < 0.5f)
			{
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.RightSpike, Random.Range(0.2f, 0.3f), 0.15f, 0, 0f);
			}
			else
			{
				RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.LeftSpike, Random.Range(0.2f, 0.3f), 0.15f, 0, 0f);
			}
			float z = obstPos.z;
			float z2 = this.cachedWantedPos.z;
			Vector3 zero = Vector3Fast.zero;
			zero.z = z2 - z;
			if (this._transform.InverseTransformDirection(zero).x > 0f)
			{
				this.character.ForceToAnimation(this.pushRDef, false, Vector3Fast.zero, Vector3Fast.zero, blendTime, 0f, false);
			}
			else
			{
				this.character.ForceToAnimation(this.pushLDef, false, Vector3Fast.zero, Vector3Fast.zero, blendTime, 0f, false);
			}
		}
	}

	// Token: 0x0600003A RID: 58 RVA: 0x00005C4C File Offset: 0x00003E4C
	public bool IsStandingStill()
	{
		return this.bStandingStill;
	}

	// Token: 0x0600003B RID: 59 RVA: 0x00005C54 File Offset: 0x00003E54
	public void SetNewStandStillDeadzone(float newDeadZone)
	{
		this.standStillDeadzone = newDeadZone;
	}

	// Token: 0x0600003C RID: 60 RVA: 0x00005C60 File Offset: 0x00003E60
	private bool DoJumpTriggerUpdate(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos, Vector3 targetPos, bool boyOnGround = true)
	{
		if (this.jumpTrigger == null)
		{
			return false;
		}
		if (!this.jumpTrigger.LogicEnabled())
		{
			this.jumpTrigger.SafetyRemoveAlbinoAI(this);
			this.jumpTrigger = null;
			return false;
		}
		if (this.jumpTrigger.allowFallDown && targetPos.y < wantedPos.y - 1f)
		{
			return false;
		}
		float x = wantedPos.x;
		float x2 = targetPos.x;
		float x3 = this.jumpTrigger.transform.position.x;
		float num = Mathf.Sign(x - x3);
		float num2 = x2 - x;
		if (num2 * num >= 0f)
		{
			return false;
		}
		float num3 = Mathf.Sign(x2 - x3);
		if (num3 == num)
		{
			if (boyOnGround)
			{
				return false;
			}
		}
		else
		{
			if ((num > 0f && this.jumpTrigger.JumpLeftWaypoints.Count == 0) || (num <= 0f && this.jumpTrigger.JumpRightWaypoints.Count == 0))
			{
				return false;
			}
			if (FastMath.Abs(x2 - x3) > this.jumpTrigger.GetComponent<Collider>().bounds.extents.x || FastMath.Abs(targetPos.z - wantedPos.z) > 0.6f)
			{
				AnimcontrolWaypoint animcontrolWaypoint;
				if (num > 0f)
				{
					animcontrolWaypoint = this.jumpTrigger.SelectLeftWaypoint(this);
				}
				else
				{
					animcontrolWaypoint = this.jumpTrigger.SelectRightWaypoint(this);
				}
				if (animcontrolWaypoint != null)
				{
					this.bStandingStill = false;
					this.FollowWaypoint(animcontrolWaypoint.gameObject, false);
					base.UpdateInput(controls, deltaTime, ref wantedPos);
					this.aiMode = AlbinoAI.AIMode.FollowWaypoint;
					this.rescueX = 0f;
					return true;
				}
			}
		}
		controls.stick = Vector2.zero;
		this.bStandingStill = true;
		this.rescueX = 0f;
		return true;
	}

	// Token: 0x0600003D RID: 61 RVA: 0x00005E50 File Offset: 0x00004050
	private void UpdateGotoMultiInteraction(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		this.doMultiMoveBlockTest = false;
		Vector3 multiInteractGrabSlotTarget = AlbinoGroupManager.mInstance.GetMultiInteractGrabSlotTarget(this);
		float num = multiInteractGrabSlotTarget.x - this.lastPos.x;
		float num2 = multiInteractGrabSlotTarget.x - wantedPos.x;
		if (num2 * num <= 0f)
		{
			wantedPos.x = multiInteractGrabSlotTarget.x + (this.lastPos.x - multiInteractGrabSlotTarget.x) * 0.01f;
		}
		float num3 = this.character.blendHelper.blendParameters[3];
		if (FastMath.Abs(num3) > 0.1f)
		{
			Vector3 localEulerAngles = this._characterTransform.localEulerAngles;
			localEulerAngles.y += num3 * Mathf.Min(deltaTime * 4.5f, 1f);
			this.character.FastSetRotation(Quaternion.Euler(localEulerAngles));
			this.forceUpdate = true;
		}
		if (AlbinoGroupManager.mInstance.grabBody != null)
		{
			this.EdgeSafetyCode(deltaTime, ref wantedPos, multiInteractGrabSlotTarget, false, false);
		}
		this.DoFreefallHandling(deltaTime, true);
		if (this.DoJumpTriggerUpdate(controls, deltaTime, ref wantedPos, multiInteractGrabSlotTarget, true))
		{
			return;
		}
		Vector3 vector = multiInteractGrabSlotTarget - wantedPos;
		float y = vector.y;
		vector.y = 0f;
		float magnitude = vector.magnitude;
		if (magnitude < 0.3f && FastMath.Abs(y - 0.5f) < 1f)
		{
			if (AlbinoGroupManager.mInstance.multiInteraction != null && this.character.onGround)
			{
				AlbinoGroupManager.mInstance.multiInteraction.ControlMe(this, multiInteractGrabSlotTarget.z);
			}
			controls.stick = Vector2.zero;
		}
		else
		{
			if (magnitude > 2f && this.IsMovingTowardABlocker(wantedPos.x, multiInteractGrabSlotTarget.x))
			{
				controls.stick = Vector2.zero;
			}
			else
			{
				vector = vector.normalized;
				if (magnitude < 8f)
				{
					vector *= 0.6f + Mathf.Max(0f, magnitude - 4f) * 0.1f;
				}
				controls.stick.x = vector.x;
				controls.stick.y = vector.z;
			}
			if (magnitude > 2f)
			{
				this.doMultiMoveBlockTest = true;
			}
		}
		if (AlbinoGroupManager.mInstance.multiInteraction == null && this.character.GetBlendHelper().GetTopDefinition().debugName.CompareTo("GateSucceed") != 0)
		{
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
		}
	}

	// Token: 0x0600003E RID: 62 RVA: 0x000060F4 File Offset: 0x000042F4
	private bool UpdateGrabbing(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		bool flag = false;
		if (ScriptGlobals.boy != null && ScriptGlobals.boy.state is BoyGrabState)
		{
			Rigidbody grabBody = AlbinoGroupManager.mInstance.grabBody;
			float x = grabBody.transform.position.x;
			float num = ScriptGlobals.boy.pos.x - x;
			float num2 = wantedPos.x - x;
			if (num * num2 < 0f && AlbinoGroupManager.mInstance.GetOverrideGrabBodyCollider() == null && !BoyUtils.IsDepthGrab(ScriptGlobals.boy))
			{
				flag = true;
			}
		}
		if (AlbinoGroupManager.mInstance.grabBody != null)
		{
			this.EdgeSafetyCode(deltaTime, ref wantedPos, AlbinoGroupManager.mInstance.grabBody.position, false, flag);
		}
		this.DoFreefallHandling(deltaTime, true);
		if (AlbinoGroupManager.mInstance.grabBody == null)
		{
			this.character.GoToDefaultAnimation();
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
			this.grabbing = false;
			this.grabState = AlbinoAI.GrabState.grabUndefined;
			return false;
		}
		if (this.DoJumpTriggerUpdate(controls, deltaTime, ref wantedPos, AlbinoGroupManager.mInstance.grabBody.position, true))
		{
			return true;
		}
		float num3 = Mathf.Sign(AlbinoGroupManager.mInstance.grabBody.position.x - wantedPos.x);
		if (AlbinoGroupManager.mInstance.GetOverrideGrabBodyCollider() != null)
		{
			float num4 = this.currentTargetPos.x - wantedPos.x;
			if (FastMath.Abs(num4) > 0.3f && num3 * num4 < 0f)
			{
				this.character.GoToDefaultAnimation();
				this.aiMode = AlbinoAI.AIMode.FollowBoy;
				this.grabbing = false;
				this.grabState = AlbinoAI.GrabState.grabUndefined;
				AlbinoGroupManager.mInstance.SetOverrideGrabBodyCollider(null);
				return false;
			}
		}
		if (flag)
		{
			controls.stick = Vector2.zero;
			return !this.character.onGround;
		}
		bool flag2 = AlbinoGroupManager.mInstance.AmIGrabbing(this);
		Vector3 grabSlotTarget = AlbinoGroupManager.mInstance.GetGrabSlotTarget(this, ref wantedPos);
		Vector3 vector = grabSlotTarget - wantedPos;
		vector.y = 0f;
		float num5 = FastMath.Abs(vector.x);
		bool flag3 = false;
		bool flag4 = false;
		float num6 = float.MaxValue;
		if (!flag2)
		{
			int i = 0;
			int count = this.albinoDetector.albinosInside.Count;
			while (i < count)
			{
				AlbinoAI albinoAI = this.albinoDetector.albinosInside[i];
				if (albinoAI.isGrabbing())
				{
					Vector3 vector2 = albinoAI.cachedWantedPos - wantedPos;
					Vector3 vector3 = this._transform.InverseTransformDirection(vector2);
					if (vector3.z > 0f && vector3.z < num6)
					{
						num6 = vector3.z;
					}
					flag4 = (vector3.z < 0.4f && FastMath.Abs(vector3.x) < 0.55f);
					if ((vector3.z > 0f && vector3.z < 0.1f && FastMath.Abs(vector3.x) < 0.15f) || (!this.grabbing && flag4))
					{
						flag3 = true;
					}
				}
				i++;
			}
		}
		if (flag3 || (num5 < 0.3f && num5 > 0f) || this.grabbing || flag4)
		{
			bool flag5 = false;
			if (!this.grabbing)
			{
				this.initialGrabY = wantedPos.y;
				if (flag2)
				{
					this.initialGrabDist = 0f;
				}
				else if (num5 < 0.25f)
				{
					this.initialGrabDist = Random.Range(0f, 0.15f);
				}
				else
				{
					this.initialGrabDist = num5;
				}
			}
			else if (!flag2)
			{
				if (flag3)
				{
					this.initialGrabDist += Mathf.Min(Time.deltaTime * 1f, 0.1f);
					flag5 = true;
				}
				else if (num6 > 0.5f)
				{
					this.initialGrabDist -= Mathf.Min(Time.deltaTime * 0.8f, 0.1f);
					if (this.initialGrabDist < 0f)
					{
						this.initialGrabDist = 0f;
					}
				}
			}
			float num7 = AlbinoGroupManager.mInstance.grabBody.velocity.x;
			if (flag2)
			{
				Rigidbody grabBody2 = AlbinoGroupManager.mInstance.grabBody;
				float num8 = FastMath.Abs(grabBody2.transform.up.y);
				float num9 = FastMath.Abs(grabBody2.transform.right.y);
				if (num9 > num8)
				{
					num8 = num9;
				}
				num9 = FastMath.Abs(grabBody2.transform.forward.y);
				if (num9 > num8)
				{
					num8 = num9;
				}
				float num10 = 0f;
				if (num8 < 0.997f)
				{
					num10 = Mathf.Asin(0.997f - num8) * 10f;
				}
				float num11 = this.initialGrabDist;
				this.initialGrabDist = Mathf.Max(this.initialGrabDist - Time.deltaTime * 3f, num10);
				if (Mathf.Abs(this.initialGrabDist - num11) > 0.001f)
				{
					this.forceUpdate = true;
				}
				if (num10 != 0f)
				{
					num7 -= num3 * (this.initialGrabDist - num11) / deltaTime;
				}
			}
			this.grabbing = true;
			AlbinoGroupManager.mInstance.IAmGrabbing(this);
			AnimationBlendHelper blendHelper = this.character.GetBlendHelper();
			ABDefinition topDefinition = blendHelper.GetTopDefinition();
			grabSlotTarget.y = this.initialGrabY;
			grabSlotTarget.x += -num3 * 0.3f * (this.scaleFactor - 1f) - num3 * this.initialGrabDist;
			AlbinoAI.GrabState grabState = this.GetNextGrabState(num7, num3);
			if (flag5)
			{
				grabState = AlbinoAI.GrabState.grabPull;
				this.newStateTimer = 100f;
			}
			bool flag6 = false;
			if (grabState != this.grabState)
			{
				flag6 = true;
				this.newStateTimer += deltaTime;
				if (!flag2)
				{
					float magnitude = (this._transform.position - ScriptGlobals.boy.pos3).magnitude;
					flag6 = (this.newStateTimer > this.nextGrabRandom + Mathf.Min(magnitude * 0.05f, 0.2f) || this.grabState == AlbinoAI.GrabState.grabUndefined);
				}
			}
			if (flag6)
			{
				this.nextGrabRandom = Random.Range(-0.1f, 0.2f);
				this.newStateTimer = 0f;
				float startPos = 0f;
				string nextGrabAnim = this.GetNextGrabAnim(this.grabState, grabState, ref startPos);
				if (topDefinition.debugName.CompareTo(nextGrabAnim) != 0)
				{
					ABDefinition definition = blendHelper.GetDefinition(nextGrabAnim, true);
					if (definition != null)
					{
						if (grabState == AlbinoAI.GrabState.grabIdle)
						{
							definition.staticTopLayer = true;
						}
						if (blendHelper.CanTransitTo(definition))
						{
							this.grabState = grabState;
							float transitTime = -1f;
							if (!flag2)
							{
								transitTime = 0.4f;
							}
							this.character.ForceToAnimation(definition, true, grabSlotTarget, new Vector3(0f, num3 * 90f, 0f), transitTime, startPos, false);
							if (this.grabState != AlbinoAI.GrabState.grabIdle)
							{
								definition.speedScale = 0f;
							}
						}
					}
				}
			}
			AlbinoAI.GrabState grabState2 = this.grabState;
			if (grabState2 != AlbinoAI.GrabState.grabPush)
			{
				if (grabState2 == AlbinoAI.GrabState.grabPull)
				{
					if (flag5)
					{
						topDefinition.speedScale = 1.2f;
					}
					else
					{
						topDefinition.speedScale = -num7 * Mathf.Sign(this._transform.forward.x) * 1.2f / this.scaleFactor;
					}
				}
			}
			else
			{
				topDefinition.speedScale = num7 * Mathf.Sign(this._transform.forward.x) * 0.7f / this.scaleFactor;
			}
			this.character.SetStaticAnimWantedBasePos(grabSlotTarget, false);
			controls.stick = Vector2.zero;
			return true;
		}
		if (num5 == 0f)
		{
			float num12 = this.currentTargetPos.x - wantedPos.x;
			if (num12 * this.currentTargetFacing <= 0f || FastMath.Abs(num12) < 0.25f)
			{
				bool flag7 = false;
				float num13 = AlbinoGroupManager.mInstance.grabBody.transform.position.x - wantedPos.x;
				if (this.currentTargetFacing * num13 < 0f)
				{
					flag7 = true;
				}
				else
				{
					Collider component = AlbinoGroupManager.mInstance.grabBody.GetComponent<Collider>();
					if (component != null)
					{
						Bounds bounds = AlbinoGroupManager.mInstance.grabBody.GetComponent<Collider>().bounds;
						float z = wantedPos.z;
						if (z < bounds.min.z || z > bounds.max.z)
						{
							flag7 = true;
						}
					}
				}
				if (!flag7)
				{
					float num14 = this.currentTargetPos.x - this.currentTargetFacing * 0.25f;
					wantedPos.x += (num14 - wantedPos.x) * 5f * deltaTime;
				}
			}
			if (this.offset > -1f && this.overrideTarget == null)
			{
				this.offset = Random.Range(-4f, -1f);
			}
			this.FollowBoyCode(controls, deltaTime, ref wantedPos);
		}
		else if (num5 > 2f && this.IsMovingTowardABlocker(wantedPos.x, grabSlotTarget.x))
		{
			controls.stick = Vector2.zero;
		}
		else
		{
			vector = vector.normalized;
			if (num5 < 8f)
			{
				vector *= 0.6f + Mathf.Max(0f, num5 - 4f) * 0.1f;
			}
			controls.stick.x = vector.x;
			controls.stick.y = vector.z;
			this.DoRescueXUpdate(controls, ref wantedPos);
		}
		return false;
	}

	// Token: 0x0600003F RID: 63 RVA: 0x00006B48 File Offset: 0x00004D48
	public bool ReadyForHuddleLifting()
	{
		if (this.aiMode == AlbinoAI.AIMode.ThrowBoy)
		{
			ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
			return topDefinition != this.aidHuddleLiftReadyA || this.character.GetBlendHelper().GetLatestAnimData().normalizedAnimPos >= 0.3f;
		}
		return false;
	}

	// Token: 0x06000040 RID: 64 RVA: 0x00006BA4 File Offset: 0x00004DA4
	public bool isGrabbing()
	{
		return this.grabbing;
	}

	// Token: 0x06000041 RID: 65 RVA: 0x00006BAC File Offset: 0x00004DAC
	private AlbinoAI.GrabState GetNextGrabState(float vel, float facing)
	{
		float num = vel;
		if (AlbinoGroupManager.mInstance.GetOverrideGrabBodyCollider() == null)
		{
			float x = ScriptGlobals.boy.input.looseDir.x;
			if (x == 0f)
			{
				num = -vel;
			}
			else
			{
				num = x;
			}
		}
		if (FastMath.Abs(num) < 0.1f * this.scaleFactor)
		{
			return AlbinoAI.GrabState.grabIdle;
		}
		if (num * facing > 0f)
		{
			return AlbinoAI.GrabState.grabPush;
		}
		return AlbinoAI.GrabState.grabPull;
	}

	// Token: 0x06000042 RID: 66 RVA: 0x00006C28 File Offset: 0x00004E28
	public string GetNextGrabAnim(AlbinoAI.GrabState prevState, AlbinoAI.GrabState nextState, ref float startpos)
	{
		string result = string.Empty;
		AnimationBlendHelper blendHelper = this.character.GetBlendHelper();
		startpos = blendHelper.GetAnimPos();
		switch (nextState)
		{
		case AlbinoAI.GrabState.grabIdle:
		{
			float num = this.character.GetBlendHelper().GetAnimPos();
			if (prevState == AlbinoAI.GrabState.grabPull)
			{
				num = 1f - num;
			}
			if (num < 0.1f || num >= 0.92f)
			{
				result = "CrateIdleA";
			}
			else if (num < 0.28f || (double)num >= 0.74)
			{
				result = "CrateIdleB";
			}
			else if (num < 0.43f || (double)num >= 0.58)
			{
				result = "CrateIdleC";
			}
			else
			{
				result = "CrateIdleD";
			}
			break;
		}
		case AlbinoAI.GrabState.grabPush:
			result = "CratePush";
			if (prevState == AlbinoAI.GrabState.grabPull)
			{
				startpos = 1f - startpos;
			}
			else if (prevState == AlbinoAI.GrabState.grabIdle)
			{
				string debugName = blendHelper.GetTopDefinition().debugName;
				if (debugName.Contains("CrateIdle"))
				{
					char c = debugName[9];
					if (c == 'B')
					{
						startpos = ((Random.Range(0f, 1f) > 0.5f) ? 0.83f : 0.2f);
					}
					else if (c == 'C')
					{
						startpos = ((Random.Range(0f, 1f) > 0.5f) ? 0.66f : 0.36f);
					}
					else if (c == 'D')
					{
						startpos = 0.5f;
					}
				}
			}
			break;
		case AlbinoAI.GrabState.grabPull:
			result = "CratePull";
			startpos = 1f - startpos;
			if (prevState == AlbinoAI.GrabState.grabIdle)
			{
				string debugName2 = blendHelper.GetTopDefinition().debugName;
				if (debugName2.Contains("CrateIdle"))
				{
					char c2 = debugName2[9];
					if (c2 == 'A')
					{
						startpos = 0f;
					}
					if (c2 == 'B')
					{
						startpos = ((Random.Range(0f, 1f) > 0.5f) ? 0.83f : 0.2f);
					}
					else if (c2 == 'C')
					{
						startpos = ((Random.Range(0f, 1f) > 0.5f) ? 0.66f : 0.36f);
					}
					else if (c2 == 'D')
					{
						startpos = 0.5f;
					}
				}
			}
			break;
		}
		return result;
	}

	// Token: 0x06000043 RID: 67 RVA: 0x00006EB0 File Offset: 0x000050B0
	private void DoFreefallHandling(float deltaTime, bool allowAnimationChange = true)
	{
		if (!this.character.onGround)
		{
			if (!this.character.isFreefall())
			{
				if (allowAnimationChange && this.startupTimer <= 0f)
				{
					this.character.ForceToAnimation("FallState", null, -1f, 0f, false);
				}
				this.character.SetFreefallMovement(true);
			}
			if (this.freeFallSoundDeadzone > 0f)
			{
				this.freeFallSoundDeadzone -= deltaTime;
				if (this.freeFallSoundDeadzone <= 0f)
				{
					AlbinoGroupManager.mInstance.SetPlayAlbinoFallSound(true);
				}
			}
			this.rescueX = 0f;
			this.wasOnGround = false;
		}
		else
		{
			this.freeFallSoundDeadzone = 0.2f;
			if (!this.wasOnGround)
			{
				this.character.SetFreefallMovement(false);
				string animToSet = "LandForwardA";
				if (this.character.lastFallspeed > -2.2f)
				{
					animToSet = "IdleA";
				}
				float z = this._transform.InverseTransformDirection(this.character.GetFreefallSpeed()).z;
				bool flag = false;
				Vector3 vector = this.currentTargetPos + this.currentTargetVelocity * 1f;
				Vector3 vector2 = vector - this.cachedWantedPos;
				vector2.y -= 0.75f;
				if (FastMath.Abs(vector2.y) < 4f && FastMath.Abs(vector2.x) < 4f)
				{
					flag = true;
				}
				if (this.startupTimer > 0f)
				{
					this.character.lastFallspeed = 0f;
				}
				if ((z <= 1f && this.character.lastFallspeed > -10f) || flag)
				{
					if (this.character.lastFallspeed > -2.2f)
					{
						animToSet = "IdleA";
					}
					else
					{
						animToSet = "LandUpState";
					}
				}
				else if (this.character.lastFallspeed < -10.5f)
				{
					animToSet = "LandForwardHard";
				}
				else if (this.character.lastFallspeed < -7.5f)
				{
					animToSet = "LandForwardMedium";
				}
				if (allowAnimationChange)
				{
					this.character.ForceToAnimation(animToSet, null, -1f, 0f, false);
				}
			}
		}
	}

	// Token: 0x06000044 RID: 68 RVA: 0x0000710C File Offset: 0x0000530C
	private bool EdgeSafetyCode(float deltaTime, ref Vector3 wantedPos, Vector3 targetPos, bool alwaysStopAtEdge = false, bool allowDropClose = false)
	{
		if (this.justSpawned)
		{
			if (this.character.onGround)
			{
				this.justSpawned = false;
			}
			else
			{
				this.wasOnGround = false;
			}
			return false;
		}
		if (!this.character.onGround && this.wasOnGround)
		{
			this.cullers.size = SubsceneCullingManager.instance.GetSubsceneCullersContainingPointPreAlloc(this.cullers.raw, base.transform.position, FolderTypes.Gameplay);
			for (int i = 0; i < this.cullers.size; i++)
			{
				if (!this.cullers.raw[i].isActiveAndEnabled)
				{
					wantedPos = this.lastPos;
					this.character.fallspeed = 0f;
					this.character.onGround = true;
					this.freezeDueToCulling = true;
					return true;
				}
			}
			Vector3 vector = targetPos - wantedPos;
			float num = wantedPos.x - this.lastPos.x;
			bool flag = vector.y < 1.5f && vector.y > -0.3f;
			if (!flag && ScriptGlobals.mainCharacter is Boy && (ScriptGlobals.boy.state is BoyReachPlateauState || ScriptGlobals.boy.state is BoyGrabPlateauState) && vector.y > -2f && vector.y < 0.5f)
			{
				flag = true;
			}
			if (alwaysStopAtEdge || FastMath.Abs(num) < 0.001f || num * vector.x <= 0f || (FastMath.Abs(vector.x) < 1f && flag && !allowDropClose))
			{
				this.dontPushDir = Mathf.Sign(wantedPos.x - this.lastPos.x);
				wantedPos = this.lastPos + this.character.GetMovableGroundVelocity() * deltaTime;
				this.character.fallspeed = 0f;
				this.character.onGround = true;
				if (this.rescueX == 0f)
				{
					Vector3 vector2 = wantedPos;
					Vector3 vector3 = vector2 + Vector3.up * 0.8f + Vector3.right * 0.05f;
					CollisionUtils.Type type = CollisionUtils.Type.Solid;
					ColInfo3Buffer colInfo3Buffer = CollisionUtils.RayIsect(vector3, vector3 + Vector3.down, type, true);
					if (colInfo3Buffer.Length > 0 && colInfo3Buffer[0].distance <= 0.85f)
					{
						this.rescueX = 1f;
					}
					else
					{
						this.rescueX = -1f;
					}
					ColInfo3Buffer.Release(ref colInfo3Buffer);
				}
				return true;
			}
			this.rescueX = 0f;
		}
		return false;
	}

	// Token: 0x06000045 RID: 69 RVA: 0x000073F4 File Offset: 0x000055F4
	private void FollowBoyCode(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		if (!this.safeMode && this.ShouldIAvoidMainBoy())
		{
			this.AvoidBoy(this.currentTargetPos, 0.2f);
			controls.stick = Vector2.zero;
			this.rescueX = 0f;
			return;
		}
		if (this.DoJumpTriggerUpdate(controls, deltaTime, ref wantedPos, this.currentTargetPos, this.currentTargetOnGround))
		{
			return;
		}
		Vector3 vector = Vector3Fast.zero;
		bool flag = false;
		if (!this.currentTargetIsHuddle && this.FastMoveInToCatchBoy(controls, deltaTime, ref wantedPos))
		{
			return;
		}
		if (AlbinoGroupManager.mInstance.BoyJustGrabbed() && FastMath.Abs(this.currentTargetPos.x - wantedPos.x) < 1.2f + this.currentExtraDist)
		{
			if (FastMath.Abs(this.currentTargetPos.x - wantedPos.x) < 0.5f + this.currentExtraDist && FastMath.Abs(this.currentTargetPos.z - wantedPos.z) < 1.3f)
			{
				this.closeToBoy = true;
			}
			controls.stick = Vector2.zero;
			return;
		}
		bool flag2 = ScriptGlobals.boy.state is BoyGrabState && this.overrideTarget == null;
		if (this.albinoCompleted)
		{
			flag2 = false;
		}
		if (!flag2 && this.allowMoveClose)
		{
			bool isBoy = true;
			Vector3 position = this.currentTargetPos;
			if (this.overrideTarget != null)
			{
				position = this.overrideTarget.transform.position;
				isBoy = false;
			}
			if (this.albinoCompleted)
			{
				position = this.completedPos;
				this.closeToBoy = (FastMath.Abs(this.currentTargetPos.x - this.cachedWantedPos.x) < 1f);
				this.almostCloseToBoy = false;
				return;
			}
			if (this.currentTargetIsHuddle)
			{
				float liftingOffset = AlbinoGroupManager.mInstance.GetLiftingOffset();
				position.x -= liftingOffset;
			}
			if (this.MoveCloseToBoy(controls, deltaTime, position, isBoy, ref wantedPos))
			{
				return;
			}
		}
		if (this.IsInsideABlocker())
		{
			vector = AlbinoGroupManager.mInstance.GetFollowTarget(this, this.zDisplaceNegative);
			flag = true;
			int i = 0;
			int size = this.currentAlbinoBlockers.size;
			while (i < size)
			{
				AlbinoBlocker albinoBlocker = this.currentAlbinoBlockers.raw[i];
				if (albinoBlocker.gameObject.activeInHierarchy && albinoBlocker.BadMoveInBlocker(wantedPos.x, Mathf.Sign(vector.x - wantedPos.x)))
				{
					controls.stick = Vector2.zero;
					return;
				}
				i++;
			}
		}
		if (!flag)
		{
			vector = AlbinoGroupManager.mInstance.GetFollowTarget(this, this.zDisplaceNegative);
		}
		Vector3 vector2 = vector;
		vector2.x -= wantedPos.x;
		vector2.y = 0f;
		vector2.z -= wantedPos.z;
		float num = FastMath.Abs(vector2.x);
		float num2 = FastMath.Abs(wantedPos.x - this.currentTargetPos.x);
		if (FastMath.Abs(wantedPos.z - this.currentTargetPos.z) > 1.5f)
		{
			Vector3 vector3 = wantedPos;
			vector3.x -= this.currentTargetPos.x;
			vector3.y -= this.currentTargetPos.y;
			vector3.z -= this.currentTargetPos.z;
			num2 = vector3.magnitude;
			num = vector2.magnitude;
		}
		float num3 = 0.5f;
		if (this.bStandingStill && !flag2)
		{
			num3 = 1.2f;
		}
		if (this.overrideTarget == null)
		{
			num3 += this.currentExtraDist;
		}
		else if (this.offset > 0f)
		{
			num3 = 0.4f;
		}
		if (!(ScriptGlobals.mainCharacter is Huddle))
		{
			float x = ScriptGlobals.boy.velocity.x;
			if (FastMath.Abs(x) > 1f && x * (ScriptGlobals.boy.pos.x - wantedPos.x) > 0.1f)
			{
				float num4 = vector.x - wantedPos.x;
				if (x * num4 > 0f && FastMath.Abs(num4) > 0.2f)
				{
					bool flag3 = true;
					int j = 0;
					int size2 = this.albinoDetector.albinosInside.size;
					while (j < size2)
					{
						AlbinoAI albinoAI = this.albinoDetector.albinosInside.raw[j];
						float x2 = albinoAI.cachedWantedPos.x;
						if (num4 * (x2 - wantedPos.x) > 0f)
						{
							flag3 = false;
							break;
						}
						j++;
					}
					if (flag3)
					{
						num3 = 0.2f;
						this.standStillDeadzone -= deltaTime * 2f * (float)this.updateWaitCount;
					}
				}
			}
		}
		bool flag4 = false;
		if (this.currentTargetIsHuddle && this.lastMoveSpeed.x * vector2.x > 0f && !this.bStandingStill)
		{
			flag4 = true;
		}
		if (num > (num3 + 0.2f) * this.scaleFactor)
		{
			this.bStandingStill = false;
		}
		if (this.overrideTarget == null && !flag2 && (wantedPos.x - this.currentTargetPos.x) * this.currentTargetFacing < 0f && vector2.x * this.currentTargetFacing < 0f)
		{
			controls.stick = Vector2.zero;
			this.bStandingStill = true;
			this.standStillDeadzone = 0f;
		}
		else if (!flag4 && ((num < num3 * this.scaleFactor && (FastMath.Abs(this.currentTargetVelocity.x) < 0.5f || this.overrideTarget != null)) || this.bStandingStill || (this.overrideTarget == null && (wantedPos.x - this.currentTargetPos.x) * this.currentTargetFacing > 0f && num2 < (2f + this.currentExtraDist) * this.scaleFactor)))
		{
			controls.stick = Vector2.zero;
			this.bStandingStill = true;
			if (this.standStillDeadzone <= 0f)
			{
				this.standStillDeadzone = Random.Range(0f, 0.6f);
			}
		}
		else if (this.standStillDeadzone > 0f)
		{
			this.standStillDeadzone -= deltaTime * (float)this.updateWaitCount;
			controls.stick = Vector2.zero;
		}
		else
		{
			if (this.overrideTarget == null)
			{
				num = FastMath.Abs(this.currentTargetPos.x - wantedPos.x);
			}
			this.standStillDeadzone = 0f;
			this.bStandingStill = false;
			vector2 = vector2.normalized;
			float num5 = 1f;
			bool flag5 = num < 6f + this.currentExtraDist;
			if (num < 3f + this.currentExtraDist)
			{
				num5 *= 0.3f + 0.6f * (num / (3f + this.currentExtraDist));
			}
			if (FastMath.Abs(this.currentTargetVelocity.x) < 0.2f)
			{
				flag5 = false;
			}
			else if (FastMath.Abs(this.currentTargetVelocity.x) < 2f)
			{
				flag5 = true;
			}
			bool flag6 = num > 9f;
			if (flag6)
			{
				num5 = 1f;
			}
			else if (flag5)
			{
				num5 = Mathf.Max(num5 * this.followBoySpeedFactor / this.scaleFactor, 0.2f);
			}
			else
			{
				num5 = Mathf.Max(num5 * this.followBoySpeedFactor / this.scaleFactor, 0.7f);
			}
			vector2 *= num5;
			controls.stick.x = vector2.x;
			controls.stick.y = vector2.z;
		}
		this.DoRescueXUpdate(controls, ref wantedPos);
	}

	// Token: 0x06000046 RID: 70 RVA: 0x00007C54 File Offset: 0x00005E54
	private void UpdateFollowBoy(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		if (!this.albinoCompleted && this.character.onGround && this.overrideTarget == null)
		{
			if (AlbinoGroupManager.mInstance.ShouldMultiInteract(this))
			{
				this.aiMode = AlbinoAI.AIMode.GoToMultiInteraction;
				this.UpdateGotoMultiInteraction(controls, deltaTime, ref wantedPos);
				return;
			}
			Rigidbody grabBody = AlbinoGroupManager.mInstance.grabBody;
			if (grabBody != null && FastMath.Abs(this._characterTransform.localPosition.y - (grabBody.transform.position.y - 1f)) < 3f)
			{
				this.aiMode = AlbinoAI.AIMode.BoyGrabStateMode;
				this.UpdateGrabbing(controls, deltaTime, ref wantedPos);
				return;
			}
		}
		this.FollowBoyCode(controls, deltaTime, ref wantedPos);
		Vector3 position;
		if (this.overrideTarget != null)
		{
			position = this.overrideTarget.transform.position;
		}
		else
		{
			position = this.currentTargetPos;
			position.y -= 0.7f;
		}
		bool alwaysStopAtEdge = false;
		if (this.jumpTrigger != null && !this.jumpTrigger.allowFallDown)
		{
			alwaysStopAtEdge = true;
		}
		Vector3 vector = wantedPos;
		this.EdgeSafetyCode(deltaTime, ref wantedPos, position, alwaysStopAtEdge, false);
		this.DoFreefallHandling(deltaTime, true);
		if (!this.almostCloseToBoy)
		{
			float num = this.currentTargetPos.x - wantedPos.x;
			float x = this.lastMoveSpeed.x;
			if (num * x > 0f)
			{
				float num2 = (num >= 0f) ? num : (-num);
				float num3 = (x >= 0f) ? x : (-x);
				if (num2 < num3 * 0.8f + this.currentExtraDist || ((double)num3 > 0.5 && num2 < 1.2f + this.currentExtraDist))
				{
					float num4 = this.currentTargetPos.y - wantedPos.y;
					if (num4 > -0.3f && (num4 < 1f || (num4 < 2.5f && AlbinoGroupManager.mInstance.IsBoyBeingLifted())))
					{
						this.almostCloseToBoy = true;
					}
				}
			}
		}
		if (this.overrideTarget != null)
		{
			Vector3 vector2 = this.currentTargetPos - wantedPos;
			if (vector2.y > -0.3f && (vector2.y < 1f || (vector2.y < 2.5f && AlbinoGroupManager.mInstance.IsBoyBeingLifted())))
			{
				float num5 = (vector2.x >= 0f) ? vector2.x : (-vector2.x);
				float num6 = (vector2.z >= 0f) ? vector2.z : (-vector2.z);
				if (num5 < 0.9f + this.currentExtraDist && num6 < 1.1f + this.currentExtraDist)
				{
					this.closeToBoy = true;
				}
				if (num5 < 1.3f + this.currentExtraDist && num6 < 1.5f + this.currentExtraDist)
				{
					this.almostCloseToBoy = true;
				}
			}
		}
		if ((this._transform.localRotation * Vector3Fast.up).y < 1f)
		{
			Vector3 vector3 = MathUtils.FixAngles(this._transform.localEulerAngles);
			float num7 = 1f - deltaTime * 9f;
			vector3.x *= num7;
			vector3.z *= num7;
			this.character.FastSetRotation(Quaternion.Euler(vector3));
			this.forceUpdate = true;
		}
	}

	// Token: 0x06000047 RID: 71 RVA: 0x00008024 File Offset: 0x00006224
	private void UpdateSpawnedButWaiting(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
		if (!topDefinition.isStatic)
		{
			if (this.albinoCompleted)
			{
				this.currentTargetPos = ScriptGlobals.boy.pos3;
				this.currentTargetVelocity = ScriptGlobals.boy.velocity3;
				this.currentTargetIsHuddle = false;
			}
			if (this.ShouldIAvoidMainBoy())
			{
				this.AvoidBoy(this.currentTargetPos, 0.2f);
			}
			this.DoFreefallHandling(deltaTime, false);
			controls.stick.x = (controls.stick.y = 0f);
		}
	}

	// Token: 0x06000048 RID: 72 RVA: 0x000080C4 File Offset: 0x000062C4
	private void UpdatePushBack(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		if (this.pushBackTime < 1f && this.pushbackObject != null)
		{
			Vector3 vector = wantedPos - this.pushbackObject.transform.position;
			vector.y = 0f;
			float magnitude = vector.magnitude;
			if (magnitude < 2f)
			{
				Vector3 speed = 3f * (2f - magnitude) * vector / magnitude;
				this.character.PushCharacter(speed, deltaTime);
			}
		}
		if (this.pushBackCountdown <= 0f)
		{
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
		}
		if (this.pushBackTime > 1f && this.ShouldIAvoidMainBoy())
		{
			this.AvoidBoy(this.currentTargetPos, 0.2f);
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
		}
		controls.stick.x = 0f;
		controls.stick.y = 0f;
		Vector3 targetPos = this.currentTargetPos + 0.7f * Vector3.down;
		this.EdgeSafetyCode(deltaTime, ref wantedPos, targetPos, true, false);
	}

	// Token: 0x06000049 RID: 73 RVA: 0x000081E8 File Offset: 0x000063E8
	public bool IsCharacterVerticallyInFrame()
	{
		Camera main = Camera.main;
		float num = Mathf.Cos(main.fieldOfView * 1.15f * 0.5f * 0.017453292f);
		Vector3 forward = main.transform.forward;
		Vector3 localPosition = this._characterTransform.localPosition;
		localPosition.y += 0.75f;
		Vector3 normalized = (localPosition - main.transform.position).normalized;
		return Vector3.Dot(normalized, forward) >= num;
	}

	// Token: 0x0600004A RID: 74 RVA: 0x00008274 File Offset: 0x00006474
	private bool FastMoveInToCatchBoy(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		if (!AlbinoGroupManager.mInstance.allowAlbinoCatchRepositioning)
		{
			return false;
		}
		if (ScriptGlobals.boy.state is BoyJumpState && !this.IsCharacterVerticallyInFrame())
		{
			float y = ScriptGlobals.boy.velocity.y;
			if (y < -5f)
			{
				Vector3 vector = ScriptGlobals.boy.pos3;
				if (vector.y - wantedPos.y > 7f)
				{
					float num = vector.y - wantedPos.y - 1.5f;
					float num2 = Mathf.Sqrt(y * y + 20f * num);
					float num3 = (y + num2) * 0.1f;
					vector.x += ScriptGlobals.boy.velocity.x * 0.9f * num3;
					if (this.fastCatchOffset == Vector3Fast.zero)
					{
						this.fastCatchOffset = new Vector3(Random.Range(-0.75f, 0.75f), 0f, Random.Range(-0.75f, 0.75f));
					}
					Vector3 vector2 = vector - wantedPos;
					vector += this.fastCatchOffset;
					float num4 = FastMath.Abs(vector.x - wantedPos.x);
					if (num4 < 7f && num3 >= 0.54f)
					{
						Vector3 vector3 = vector - wantedPos;
						controls.stick.x = Mathf.Clamp(vector2.x, -1f, 1f);
						controls.stick.y = Mathf.Clamp(vector2.z, -1f, 1f);
						controls.stick.Normalize();
						vector3.y = 0f;
						float num5 = Mathf.Min((num - 5.5f) * 6f, 20f);
						wantedPos += vector3 * Mathf.Min(1f, deltaTime * num5);
						this.UpdatePosFromCurrentAlbinoBlocker(vector3.x, 3f * deltaTime, ref wantedPos, true);
						return true;
					}
				}
			}
		}
		this.fastCatchOffset = Vector3Fast.zero;
		return false;
	}

	// Token: 0x0600004B RID: 75 RVA: 0x000084A8 File Offset: 0x000066A8
	private float ShouldICatchBoy(ref Vector3 wantedPos)
	{
		if (AlbinoGroupManager.mInstance.GetDelayedBoyKill())
		{
			return -1f;
		}
		if (ScriptGlobals.boy.state is BoyJumpState)
		{
			float y = ScriptGlobals.boy.velocity.y;
			if (y < 0f)
			{
				float num = ScriptGlobals.boy.pos.y - wantedPos.y - 1.5f;
				if (num > 0f)
				{
					float num2 = Mathf.Sqrt(y * y + 20f * num);
					float num3 = (y + num2) * 0.1f;
					if (num3 > 0f)
					{
						float num4 = ScriptGlobals.boy.pos.x + ScriptGlobals.boy.velocity.x * num3;
						float num5 = 1.4f;
						ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
						if (topDefinition == this.aidBoyCatchPrep || topDefinition == this.landHardDef || topDefinition == this.landHardForwardDef)
						{
							num5 = 2.3f;
						}
						if (FastMath.Abs(num4 - wantedPos.x) < num5 && FastMath.Abs(ScriptGlobals.boy.pos3.z - wantedPos.z) < num5)
						{
							return num3;
						}
					}
				}
			}
		}
		return -1f;
	}

	// Token: 0x0600004C RID: 76 RVA: 0x00008608 File Offset: 0x00006808
	public void AllowReposition(bool allow = true)
	{
		this.allowExtraReposition = allow;
	}

	// Token: 0x0600004D RID: 77 RVA: 0x00008614 File Offset: 0x00006814
	private Transform GetClosestBone(ref Vector3 centerPos)
	{
		HuddleCloth.ClothBone closestBone = HuddleUtils.GetClosestBone(ScriptGlobals.huddle, centerPos);
		Vector3 vector = centerPos - closestBone.pos;
		float magnitude = vector.magnitude;
		if (magnitude > 0.2f)
		{
			centerPos = closestBone.pos + 0.65f / magnitude * vector;
		}
		return closestBone.visualTransform;
	}

	// Token: 0x0600004E RID: 78 RVA: 0x0000867C File Offset: 0x0000687C
	private void UpdateHandIK(float deltaTime)
	{
		ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
		bool flag = topDefinition == this.aidBoyCarry;
		if ((topDefinition == this.aidBoyClimbable || topDefinition == this.aidBoyClimbableFast) && this.character.GetBlendHelper().GetLatestAnimData().normalizedAnimPos > 0.8f)
		{
			flag = true;
		}
		if (this.currentTargetIsHuddle)
		{
			flag = this.ReadyForHuddleLifting();
			if (flag && this.handIKBlendin <= 0f)
			{
				this.huddleCarryVisualBone = this.GetClosestBone(ref this.originalCenterPos);
				this.huddleCarryLocalPos = this.huddleCarryVisualBone.InverseTransformPoint(this.originalCenterPos);
			}
		}
		flag = (flag && this.allowExtraReposition);
		if (flag && !this.currentTargetIsHuddle)
		{
			Vector3 vector = this._characterTransform.localPosition - ScriptGlobals.boy.pos3;
			vector.y = 0f;
			if (vector.magnitude > 0.8f)
			{
				flag = false;
			}
		}
		if (flag)
		{
			if (!this.currentTargetIsHuddle)
			{
				this.handIKBlendin = Mathf.Min(this.handIKBlendin + Time.deltaTime * 5f, 1f);
				RagdollSkeleton ragdoll = ScriptGlobals.boy.visualBoy.ragdoll;
				Transform bodyTransform = ragdoll.GetBodyTransform(ScriptGlobals.boy.visualBoy.actor.specificBones.knees[0]);
				this.boyFootPos = bodyTransform.TransformPoint(Vector3.up * 0.35f);
				bodyTransform = ragdoll.GetBodyTransform(ScriptGlobals.boy.visualBoy.actor.specificBones.knees[1]);
				this.boyFootPos = 0.5f * this.boyFootPos + 0.5f * bodyTransform.transform.TransformPoint(Vector3.up * 0.35f);
			}
			else
			{
				this.handIKBlendin = Mathf.Min(this.handIKBlendin + deltaTime * 2f, 1f);
				if (this.interpolateHandPosition)
				{
					Vector3 vector2 = this.huddleCarryVisualBone.InverseTransformPoint(this.originalCenterPos);
					if ((vector2 - this.huddleCarryLocalPos).sqrMagnitude > 0.004f)
					{
						float num = Mathf.Min(deltaTime * 4f, 1f);
						this.huddleCarryLocalPos = this.huddleCarryLocalPos * (1f - num) + vector2 * num;
						this.interpolateHandPosition = true;
					}
					else
					{
						this.interpolateHandPosition = false;
					}
				}
			}
		}
		else
		{
			this.handIKBlendin = Mathf.Max(this.handIKBlendin - Time.deltaTime * 9f, 0f);
		}
	}

	// Token: 0x0600004F RID: 79 RVA: 0x00008954 File Offset: 0x00006B54
	private void UpdateThrow(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		if (AlbinoGroupManager.mInstance.GetDelayedBoyKill())
		{
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
			this.character.GoToDefaultAnimation();
			return;
		}
		if (!this.currentTargetIsHuddle)
		{
			BoyCustomAnimState boyCustomAnimState = ScriptGlobals.boy.state as BoyCustomAnimState;
			if (boyCustomAnimState != null)
			{
				if ((ScriptGlobals.boy.pos.y - this._characterTransform.localPosition.y - 1.75f > 1f || !AlbinoGroupManager.mInstance.IsInAlbinoJumpState()) && !this.character.GetBlendHelper().GetTopDefinition().debugName.StartsWith("AidBoyJump"))
				{
					this.aiMode = AlbinoAI.AIMode.FollowBoy;
					this.character.GoToDefaultAnimation();
					return;
				}
			}
			else if (ScriptGlobals.boy.state is BoyRunState)
			{
				ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
				if (topDefinition != this.aidBoyCatch && topDefinition != this.aidBoyCatchCritical)
				{
					this.aiMode = AlbinoAI.AIMode.FollowBoy;
					this.character.GoToDefaultAnimation();
					return;
				}
			}
		}
		else if (!AlbinoGroupManager.mInstance.IsInAlbinoJumpState())
		{
			this.AvoidBoy(ScriptGlobals.huddle.pos3, 0.4f);
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
			return;
		}
		Vector3 vector = this.currentTargetPos - wantedPos;
		if (vector.y - 0.7f < 1.1f)
		{
			vector.y = 0f;
			if (vector.magnitude < 1.1f + this.currentExtraDist)
			{
				this.almostCloseToBoy = true;
				this.closeToBoy = true;
			}
		}
		ABDefinition topDefinition2 = this.character.GetBlendHelper().GetTopDefinition();
		if (!this.currentTargetIsHuddle)
		{
			if (topDefinition2 != this.aidBoyCatch && topDefinition2 != this.aidBoyCatchCritical)
			{
				float num = this.ShouldICatchBoy(ref wantedPos);
				if (num > 0f)
				{
					float startPos = 0f;
					if (num < 0.52f)
					{
						startPos = (0.52f - num) * 0.5f;
					}
					this.character.ForceToAnimation(this.aidBoyCatch, false, Vector3Fast.zero, Vector3Fast.zero, 0.3f, startPos, false);
					topDefinition2 = this.aidBoyCatch;
				}
			}
			else if (this.ShouldIAvoidMainBoy())
			{
				this.AvoidBoy(ScriptGlobals.boy.pos3, 0.2f);
				this.aiMode = AlbinoAI.AIMode.FollowBoy;
				return;
			}
		}
		else if (this.ShouldIAvoidMainBoy())
		{
			this.AvoidBoy(ScriptGlobals.huddle.pos3, 0.2f);
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
			return;
		}
		this.nudgeTimer = 0f;
		vector.y = 0f;
		float magnitude = vector.magnitude;
		vector /= magnitude;
		Quaternion localRotation = this._transform.localRotation;
		Quaternion quaternion = localRotation;
		QuaternionFast.InverseReplace(ref quaternion);
		Vector3 vector2 = vector;
		QuaternionFast.RotateReplaceRhs(ref quaternion, ref vector2);
		float num2;
		if (vector2.z >= 0f)
		{
			Vector3 left = Vector3Fast.left;
			QuaternionFast.RotateReplaceRhs(ref localRotation, ref left);
			num2 = Vector3.Angle(vector, left) - 90f;
		}
		else
		{
			Vector3 right = Vector3Fast.right;
			QuaternionFast.RotateReplaceRhs(ref localRotation, ref right);
			num2 = Vector3.Angle(vector, right);
			if (num2 <= 90f)
			{
				num2 += 90f;
			}
			else
			{
				num2 -= 270f;
			}
		}
		if (FastMath.Abs(num2) > 0.1f)
		{
			Vector3 localEulerAngles = this._characterTransform.localEulerAngles;
			localEulerAngles.y += num2 * Mathf.Min(deltaTime * 4.5f, 1f);
			this.character.FastSetRotation(Quaternion.Euler(localEulerAngles));
			this.forceUpdate = true;
		}
		bool flag = true;
		if (topDefinition2 == this.aidBoyCatch)
		{
			if (this.character.GetBlendHelper().GetLatestAnimData().normalizedAnimPos > 0.3f)
			{
				flag = false;
			}
		}
		else if (topDefinition2 == this.aidBoyCatchCritical && this.character.GetBlendHelper().GetLatestAnimData().normalizedAnimPos > 0.1f)
		{
			flag = false;
		}
		if (flag && !topDefinition2.debugName.StartsWith("AidBoyJump"))
		{
			if (!topDefinition2.debugName.StartsWith("AidBoy") && !topDefinition2.debugName.StartsWith("AidHuddle"))
			{
				this.aiMode = AlbinoAI.AIMode.FollowBoy;
			}
			else
			{
				if (topDefinition2 == this.aidBoyHuddleCarry || topDefinition2 == this.aidHuddleCarryStepLA || topDefinition2 == this.aidHuddleCarryStepRA)
				{
					this.huddleDimDist = this.currentExtraDist - 0.2f;
				}
				else if (topDefinition2 == this.aidBoyHuddleClimbable)
				{
					float normalizedAnimPos = this.character.GetBlendHelper().GetLatestAnimData().normalizedAnimPos;
					if (normalizedAnimPos > 0.3f)
					{
						this.huddleDimDist = Mathf.Min((normalizedAnimPos - 0.3f) * 2f, this.currentExtraDist - 0.2f);
					}
				}
				else
				{
					this.huddleDimDist = Mathf.Max(this.huddleDimDist - Time.deltaTime * 2f, 0f);
				}
				if (this.allowExtraReposition && magnitude > 0.5f + this.currentExtraDist - this.huddleDimDist)
				{
					Vector3 vector3 = vector;
					Vector3 vector4 = vector3 * Mathf.Min((magnitude - (0.5f + this.currentExtraDist - this.huddleDimDist)) * 1.3f, 0.5f);
					int count = this.albinoDetector.albinosInside.Count;
					float num3 = 0.1f;
					if (count > 3)
					{
						num3 = 0.003f;
					}
					else if (count > 1)
					{
						num3 = ((!this.currentTargetIsHuddle) ? 0.05f : 0.02f);
					}
					else if (count == 1)
					{
						num3 = ((!this.currentTargetIsHuddle) ? 0.1f : 0.04f);
					}
					wantedPos += num3 * vector4;
				}
				Vector3 vector5 = this.HandlePushAndOvershoot(0.04f, 0.5f + this.currentExtraDist - this.huddleDimDist, this.currentTargetPos, ref wantedPos, !AlbinoGroupManager.mInstance.AllowAlbinoClimbAlignment(), false);
			}
		}
	}

	// Token: 0x06000050 RID: 80 RVA: 0x00008FA4 File Offset: 0x000071A4
	public void SetThrowMode()
	{
		this.headHasBeenLow = false;
		this.aiMode = AlbinoAI.AIMode.ThrowBoy;
		this.allowExtraReposition = true;
	}

	// Token: 0x06000051 RID: 81 RVA: 0x00008FBC File Offset: 0x000071BC
	private void DoHeadHeightTest()
	{
		if (!this.albinoCompleted && this.character.headBone != null)
		{
			float num = this.character.headBone.transform.position.y - this._characterTransform.localPosition.y;
			if (num < 0.85f)
			{
				this.closeToBoy = false;
				this.almostCloseToBoy = false;
				this.headHasBeenLow = true;
			}
		}
	}

	// Token: 0x06000052 RID: 82 RVA: 0x0000903C File Offset: 0x0000723C
	public bool RoundRobinUpdating()
	{
		return AlbinoAI.masterUpdateCount == this.updateCount;
	}

	// Token: 0x06000053 RID: 83 RVA: 0x0000904C File Offset: 0x0000724C
	public override void UpdateInput(AnimcontrolledCharacter.AnimControl controls, float deltaTime, ref Vector3 wantedPos)
	{
		if (this.nudgeTimer > 0f)
		{
			this.nudgeTimer -= deltaTime;
		}
		if (this.startupTimer > 0f)
		{
			this.startupTimer -= deltaTime;
		}
		this.lastMoveSpeed = this.character.GetLastMoveSpeed();
		this.groundVel = this.character.GetMovableGroundVelocity();
		this.cachedWantedPos = wantedPos;
		this.cachedWantedPos.y = this.cachedWantedPos.y + 0.75f;
		if (this.remotePuppet)
		{
			return;
		}
		if (this.aiMode == AlbinoAI.AIMode.PushBack)
		{
			this.pushBackCountdown -= deltaTime;
			if (this.character.blendHelper.GetTopDefinition() == this.idleDef)
			{
				this.pushBackCountdown -= deltaTime * 3f;
			}
			this.pushBackTime += deltaTime;
		}
		if (this.albinoDetector.albinosInside.size != this.lastAlbinosInside)
		{
			if (this.albinoDetector.albinosInside.size > this.lastAlbinosInside)
			{
				this.forceUpdate = true;
			}
			this.lastAlbinosInside = this.albinoDetector.albinosInside.size;
		}
		this.updateWaitCount++;
		if (AlbinoAI.masterUpdateCount != this.updateCount && !this.forceUpdate && Time.deltaTime <= 0.12f)
		{
			bool flag = false;
			if (this.aiMode == AlbinoAI.AIMode.BoyGrabStateMode)
			{
				if (this.grabbing && AlbinoGroupManager.mInstance.grabBody != null)
				{
					Vector3 grabSlotTarget = AlbinoGroupManager.mInstance.GetGrabSlotTarget(this, ref wantedPos);
					float num = Mathf.Sign(AlbinoGroupManager.mInstance.grabBody.position.x - wantedPos.x);
					grabSlotTarget.y = this.initialGrabY;
					grabSlotTarget.x += -num * 0.3f * (this.scaleFactor - 1f) - num * this.initialGrabDist;
					this.character.SetStaticAnimWantedBasePos(grabSlotTarget, false);
				}
				else
				{
					flag = true;
				}
			}
			else if (this.aiMode == AlbinoAI.AIMode.GoToMultiInteraction || this.character.isFreefall())
			{
				flag = true;
			}
			else if (Time.deltaTime > 0.06f)
			{
				flag = true;
			}
			if (!flag)
			{
				bool isStatic = this.character.GetBlendHelper().GetTopDefinition().isStatic;
				if (isStatic)
				{
					this.lastPos = wantedPos;
				}
				else if (this.groundVel.y < -0.4f)
				{
					this.UpdateTargetData();
					if (this.character.onGround && this.aiMode != AlbinoAI.AIMode.BoyGrabStateMode && this.aiMode != AlbinoAI.AIMode.GoToMultiInteraction)
					{
						this.lastPos = wantedPos;
					}
				}
				if (this.jumpTrigger != null && this.aiMode != AlbinoAI.AIMode.FollowWaypoint)
				{
					this.DoJumpTriggerUpdate(controls, deltaTime, ref wantedPos, wantedPos + this.lastControls.stick.x * Vector3.right, this.wasOnGround);
				}
				else
				{
					controls.stick = this.lastControls.stick;
				}
				this.UpdateHandIK(deltaTime);
				float moved = this.lastMoveSpeed.x * deltaTime;
				if (this.character.isFreefall())
				{
					moved = this.character.GetFreefallSpeed().x;
				}
				if (this.aiMode != AlbinoAI.AIMode.FollowWaypoint)
				{
					this.UpdatePosFromCurrentAlbinoBlocker(moved, deltaTime, ref wantedPos, false);
				}
				this.EdgeSafetyCode(deltaTime, ref wantedPos, this.currentTargetPos, false, false);
				this.DoRescueXUpdate(controls, ref wantedPos);
				this.wasOnGround = this.character.onGround;
				return;
			}
		}
		this.forceUpdate = false;
		for (int i = this.currentAlbinoBlockers.size - 1; i >= 0; i--)
		{
			AlbinoBlocker albinoBlocker = this.currentAlbinoBlockers.raw[i];
			if (albinoBlocker == null)
			{
				this.currentAlbinoBlockers.RemoveAt(i);
			}
			else
			{
				Collider component = albinoBlocker.GetComponent<Collider>();
				if (component != null && FastMath.Abs(albinoBlocker.transform.position.x - wantedPos.x) > component.bounds.extents.x + 4f)
				{
					this.currentAlbinoBlockers.RemoveAt(i);
				}
			}
		}
		this.UpdateTargetData();
		this.closeToBoy = false;
		this.almostCloseToBoy = false;
		if (this.aiMode == AlbinoAI.AIMode.FollowWaypoint && !this.isFollowingAWaypoint())
		{
			this.aiMode = AlbinoAI.AIMode.FollowBoy;
		}
		if ((this.character.onGround && this.aiMode != AlbinoAI.AIMode.BoyGrabStateMode && this.aiMode != AlbinoAI.AIMode.GoToMultiInteraction) || this.character.GetBlendHelper().GetTopDefinition().isStatic)
		{
			this.lastPos = wantedPos;
		}
		Vector3 vector = wantedPos;
		AlbinoAI.AIMode aimode = this.aiMode;
		switch (this.aiMode)
		{
		case AlbinoAI.AIMode.FollowWaypoint:
			this.DoFreefallHandling(deltaTime, true);
			base.UpdateInput(controls, deltaTime, ref wantedPos);
			break;
		case AlbinoAI.AIMode.FollowBoy:
		{
			this.UpdateFollowBoy(controls, deltaTime, ref wantedPos);
			if (this.currentTargetIsHuddle)
			{
				this.huddleDimDist = Mathf.Max(0f, this.huddleDimDist - Time.deltaTime * 3f);
				this.HandlePushAndOvershoot(0.02f, 0.4f + this.currentExtraDist - this.huddleDimDist, this.currentTargetPos, ref wantedPos, true, true);
				if (!this.closeToBoy && !AlbinoGroupManager.mInstance.IsBoyBeingLifted() && !this.bStandingStill)
				{
					float num2 = this.currentExtraDist + 2.2f;
					if ((wantedPos - ScriptGlobals.huddle.pos3).sqrMagnitude < num2 * num2)
					{
						this.closeToBoy = true;
					}
				}
			}
			this.followBoySpeedScalePhase += Time.deltaTime * this.followBoySpeedScalePhaseFactor * 5f;
			if (this.followBoySpeedScalePhase > 6.2831855f)
			{
				this.followBoySpeedScalePhase -= 6.2831855f;
			}
			float num3 = 1f + Mathf.Sin(this.followBoySpeedScalePhase) * this.followBoySpeedScaleFactor;
			controls.stick.x = controls.stick.x * num3;
			controls.stick.y = controls.stick.y * num3;
			ABDefinition topDefinition = this.character.GetBlendHelper().GetTopDefinition();
			if (topDefinition == this.fallBDef || topDefinition == this.fallCDef || topDefinition == this.pushLDef || topDefinition == this.pushRDef)
			{
				Vector3 vector2 = this.currentTargetPos - wantedPos;
				this.closeToBoy = false;
				this.almostCloseToBoy = false;
				if (vector2.y > -0.3f && vector2.y < 1f)
				{
					float num4 = FastMath.Abs(vector2.x);
					float num5 = FastMath.Abs(vector2.z);
					if (num4 < 0.65f + this.currentExtraDist && num5 < 0.9f + this.currentExtraDist)
					{
						this.closeToBoy = true;
					}
					if (num4 < 0.9f + this.currentExtraDist && num5 < 1.1f + this.currentExtraDist)
					{
						this.almostCloseToBoy = true;
					}
				}
			}
			this.DoHeadHeightTest();
			break;
		}
		case AlbinoAI.AIMode.SpawnedButWaiting:
			this.UpdateSpawnedButWaiting(controls, deltaTime, ref wantedPos);
			break;
		case AlbinoAI.AIMode.GoToMultiInteraction:
			this.UpdateGotoMultiInteraction(controls, deltaTime, ref wantedPos);
			this.lastPos = wantedPos;
			break;
		case AlbinoAI.AIMode.BoyGrabStateMode:
			if (!this.UpdateGrabbing(controls, deltaTime, ref wantedPos))
			{
				this.lastPos = wantedPos;
			}
			break;
		case AlbinoAI.AIMode.PushBack:
			this.UpdatePushBack(controls, deltaTime, ref wantedPos);
			break;
		case AlbinoAI.AIMode.ThrowBoy:
		{
			if (AlbinoGroupManager.mInstance.DoesHuddleWantToBeLifted())
			{
				this.HandlePushAndOvershoot(deltaTime, 0.5f, this.currentTargetPos, ref wantedPos, false, false);
			}
			this.UpdateThrow(controls, deltaTime, ref wantedPos);
			this.DoHeadHeightTest();
			Vector3 targetPos = this.currentTargetPos + 0.7f * Vector3.down;
			this.EdgeSafetyCode(deltaTime, ref wantedPos, targetPos, true, false);
			break;
		}
		}
		this.UpdateHandIK(deltaTime);
		if (this.startupTimer > 0f)
		{
			controls.stick = Vector2.zero;
		}
		if ((double)FastMath.Abs(wantedPos.x - vector.x) > 0.05)
		{
			ABDefinition topDefinition2 = this.character.GetBlendHelper().GetTopDefinition();
		}
		float moved2 = this.lastMoveSpeed.x * deltaTime + wantedPos.x - vector.x;
		if (this.character.isFreefall())
		{
			moved2 = this.character.GetFreefallSpeed().x;
		}
		if (this.aiMode != AlbinoAI.AIMode.FollowWaypoint)
		{
			this.UpdatePosFromCurrentAlbinoBlocker(moved2, deltaTime, ref wantedPos, false);
		}
		this.wasOnGround = this.character.onGround;
		if (controls.stick.x * this.dontPushDir < 0f)
		{
			this.dontPushDir = 0f;
		}
		this.cachedWantedPos = wantedPos;
		this.cachedWantedPos.y = this.cachedWantedPos.y + 0.75f;
		this.lastControls.stick = controls.stick;
		this.updateWaitCount = 0;
	}

	// Token: 0x06000054 RID: 84 RVA: 0x000099D4 File Offset: 0x00007BD4
	private bool UpdatePosFromCurrentAlbinoBlocker(float moved, float deltaTime, ref Vector3 wantedPos, bool alwaysPushOut = true)
	{
		bool flag = this.aiMode != AlbinoAI.AIMode.GoToMultiInteraction;
		if (!flag)
		{
			flag = this.doMultiMoveBlockTest;
		}
		if (flag)
		{
			int i = 0;
			int size = this.currentAlbinoBlockers.size;
			while (i < size)
			{
				AlbinoBlocker albinoBlocker = this.currentAlbinoBlockers.raw[i];
				if (albinoBlocker != null && albinoBlocker.gameObject.activeInHierarchy && (albinoBlocker.alwaysPushOut || alwaysPushOut))
				{
					float num = 0f;
					float direction = Mathf.Sign(moved);
					if (FastMath.Abs(moved) < 0.0001f)
					{
						direction = 0f;
					}
					bool flag2 = albinoBlocker.BlockedByWall(wantedPos.x, direction, -0.1f, out num);
					if (flag2)
					{
						if (albinoBlocker.GetComponent<Collider>().attachedRigidbody != null)
						{
							float x = albinoBlocker.GetComponent<Collider>().attachedRigidbody.velocity.x;
							if (x * moved < 0f)
							{
								wantedPos.x += x * deltaTime;
							}
						}
						float num2 = Mathf.Min(deltaTime * 7f, 1f);
						wantedPos.x = num * num2 + wantedPos.x * (1f - num2);
						Vector3 targetPos;
						targetPos..ctor(num, wantedPos.y, wantedPos.z);
						this.EdgeSafetyCode(deltaTime, ref wantedPos, targetPos, true, false);
						return true;
					}
				}
				i++;
			}
		}
		return false;
	}

	// Token: 0x06000055 RID: 85 RVA: 0x00009B44 File Offset: 0x00007D44
	public void Respawned()
	{
		this.lastControls.stick = Vector2.zero;
	}

	// Token: 0x06000056 RID: 86 RVA: 0x00009B58 File Offset: 0x00007D58
	private void Update()
	{
		if (!this.isAwake)
		{
			this.AddAlbinoToMainSystem();
		}
	}

	// Token: 0x06000057 RID: 87 RVA: 0x00009B6C File Offset: 0x00007D6C
	public void ActivateCullingControl(bool insideWaitTrigger = false)
	{
		this.freezeDueToCulling = true;
		this.frozenInsideWaitTrigger = insideWaitTrigger;
	}

	// Token: 0x0400000E RID: 14
	public const int updateTimeShare = 5;

	// Token: 0x0400000F RID: 15
	public bool albinoCompleted;

	// Token: 0x04000010 RID: 16
	public Vector3 completedPos = Vector3Fast.zero;

	// Token: 0x04000011 RID: 17
	public bool remotePuppet;

	// Token: 0x04000012 RID: 18
	public bool safeMode;

	// Token: 0x04000013 RID: 19
	public AlbinoDetector albinoDetector;

	// Token: 0x04000014 RID: 20
	public bool simpleAvoidance;

	// Token: 0x04000015 RID: 21
	public AlbinoAI.AIMode aiMode;

	// Token: 0x04000016 RID: 22
	private bool isAwake;

	// Token: 0x04000017 RID: 23
	public float offset;

	// Token: 0x04000018 RID: 24
	public float followBoySpeedFactor = 1f;

	// Token: 0x04000019 RID: 25
	public float scaleFactor = 1f;

	// Token: 0x0400001A RID: 26
	public GameObject overrideTarget;

	// Token: 0x0400001B RID: 27
	public bool allowMoveClose = true;

	// Token: 0x0400001C RID: 28
	public bool initAnimPlaying;

	// Token: 0x0400001D RID: 29
	public ColorBlendProbe colorBlendProbe;

	// Token: 0x0400001E RID: 30
	public AlbinoSpawner currentSpawner;

	// Token: 0x0400001F RID: 31
	public GameObject audioGameObject;

	// Token: 0x04000020 RID: 32
	private static bool globalAlbinoDisplaceNegative;

	// Token: 0x04000021 RID: 33
	private bool zDisplaceNegative;

	// Token: 0x04000022 RID: 34
	[NonSerialized]
	public Vector3 lastPos;

	// Token: 0x04000023 RID: 35
	[NonSerialized]
	public Vector3 groundVel = Vector3Fast.zero;

	// Token: 0x04000024 RID: 36
	private bool justSpawned = true;

	// Token: 0x04000025 RID: 37
	public Vector3 lastMoveSpeed = Vector3Fast.zero;

	// Token: 0x04000026 RID: 38
	private bool wasOnGround = true;

	// Token: 0x04000027 RID: 39
	public Vector3 cachedWantedPos = Vector3Fast.zero;

	// Token: 0x04000028 RID: 40
	private bool freezeDueToCulling;

	// Token: 0x04000029 RID: 41
	private bool frozenInsideWaitTrigger;

	// Token: 0x0400002A RID: 42
	public Vector3 frozenWaitTriggerPos = Vector3Fast.zero;

	// Token: 0x0400002B RID: 43
	private AlbinoJumpTrigger jumpTrigger;

	// Token: 0x0400002C RID: 44
	private bool wasJustGrabbing;

	// Token: 0x0400002D RID: 45
	private float boyXWhileGrabbing;

	// Token: 0x0400002E RID: 46
	private AlbinoNarrowPathTrigger currentNarrowPath;

	// Token: 0x0400002F RID: 47
	private FastList<AlbinoNarrowPathTrigger> narrowPaths = new FastList<AlbinoNarrowPathTrigger>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04000030 RID: 48
	private FastList<AlbinoBlocker> currentAlbinoBlockers = new FastList<AlbinoBlocker>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04000031 RID: 49
	private FastList<AlbinoWaitTrigger> currentWaitTriggers = new FastList<AlbinoWaitTrigger>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04000032 RID: 50
	private AlbinoMineCartTrigger currentMineCartTrigger;

	// Token: 0x04000033 RID: 51
	private ABDefinition fallBDef;

	// Token: 0x04000034 RID: 52
	private ABDefinition fallCDef;

	// Token: 0x04000035 RID: 53
	private ABDefinition pushLDef;

	// Token: 0x04000036 RID: 54
	private ABDefinition pushRDef;

	// Token: 0x04000037 RID: 55
	private ABDefinition landHardForwardDef;

	// Token: 0x04000038 RID: 56
	private ABDefinition landHardDef;

	// Token: 0x04000039 RID: 57
	private ABDefinition landForwardMediumDef;

	// Token: 0x0400003A RID: 58
	private ABDefinition idleCloseToBoyDef;

	// Token: 0x0400003B RID: 59
	private ABDefinition idleElevatorLookDef;

	// Token: 0x0400003C RID: 60
	private ABDefinition idleLookUpDef;

	// Token: 0x0400003D RID: 61
	private ABDefinition idleDef;

	// Token: 0x0400003E RID: 62
	private ABDefinition nudgeRightDef;

	// Token: 0x0400003F RID: 63
	private ABDefinition nudgeLeftDef;

	// Token: 0x04000040 RID: 64
	private ABDefinition aidBoyCatch;

	// Token: 0x04000041 RID: 65
	private ABDefinition aidBoyCatchCritical;

	// Token: 0x04000042 RID: 66
	private ABDefinition aidBoyCatchPrep;

	// Token: 0x04000043 RID: 67
	private ABDefinition aidBoyCarry;

	// Token: 0x04000044 RID: 68
	private ABDefinition aidBoyClimbable;

	// Token: 0x04000045 RID: 69
	private ABDefinition aidBoyClimbableFast;

	// Token: 0x04000046 RID: 70
	private ABDefinition aidBoyHuddleCarry;

	// Token: 0x04000047 RID: 71
	private ABDefinition aidBoyHuddleClimbable;

	// Token: 0x04000048 RID: 72
	private ABDefinition aidHuddleLiftReadyA;

	// Token: 0x04000049 RID: 73
	private ABDefinition aidHuddleTryLift;

	// Token: 0x0400004A RID: 74
	private ABDefinition aidHuddleCarryStepLA;

	// Token: 0x0400004B RID: 75
	private ABDefinition aidHuddleCarryStepRA;

	// Token: 0x0400004C RID: 76
	private Vector3 currentTargetPos;

	// Token: 0x0400004D RID: 77
	private Vector3 currentTargetVelocity;

	// Token: 0x0400004E RID: 78
	private bool currentTargetOnGround;

	// Token: 0x0400004F RID: 79
	private float currentPlayField;

	// Token: 0x04000050 RID: 80
	private float currentTargetFacing;

	// Token: 0x04000051 RID: 81
	private bool currentTargetIsHuddle;

	// Token: 0x04000052 RID: 82
	private float currentAvoidRadius = 0.6f;

	// Token: 0x04000053 RID: 83
	private float currentExtraDist;

	// Token: 0x04000054 RID: 84
	private Transform rightHand;

	// Token: 0x04000055 RID: 85
	private Transform rightElbow;

	// Token: 0x04000056 RID: 86
	private Transform leftHand;

	// Token: 0x04000057 RID: 87
	private Transform leftElbow;

	// Token: 0x04000058 RID: 88
	private float handIKBlendin;

	// Token: 0x04000059 RID: 89
	private Vector3 boyFootPos;

	// Token: 0x0400005A RID: 90
	private float followBoySpeedScaleFactor = 0.15f;

	// Token: 0x0400005B RID: 91
	private float followBoySpeedScalePhase;

	// Token: 0x0400005C RID: 92
	private float followBoySpeedScalePhaseFactor = 2f;

	// Token: 0x0400005D RID: 93
	public static int masterUpdateCount = 0;

	// Token: 0x0400005E RID: 94
	private int updateCount;

	// Token: 0x0400005F RID: 95
	private AnimationCullingType lastCullingType = 2;

	// Token: 0x04000060 RID: 96
	private bool curPosModified;

	// Token: 0x04000061 RID: 97
	private bool curPosPushAway;

	// Token: 0x04000062 RID: 98
	private Animation animCharAnim;

	// Token: 0x04000063 RID: 99
	private float currentAllowedYOffset = 0.2f;

	// Token: 0x04000064 RID: 100
	private float currentAllowedZOffset = 0.2f;

	// Token: 0x04000065 RID: 101
	private float orgLeash = 30f;

	// Token: 0x04000066 RID: 102
	private float leash = 30f;

	// Token: 0x04000067 RID: 103
	private FastList<SubsceneCuller> cullers = new FastList<SubsceneCuller>(20, FastListExpandMode.Exponential, 100);

	// Token: 0x04000068 RID: 104
	private static RaycastHit[] rayhitBuffer = new RaycastHit[128];

	// Token: 0x04000069 RID: 105
	private Transform _transform;

	// Token: 0x0400006A RID: 106
	private Transform _characterTransform;

	// Token: 0x0400006B RID: 107
	[SerializeField]
	[HideInInspector]
	private AkGameObj akGameObjAudio;

	// Token: 0x0400006C RID: 108
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x0400006D RID: 109
	private float nudgeTimer;

	// Token: 0x0400006E RID: 110
	private float startupTimer;

	// Token: 0x0400006F RID: 111
	private bool bStandingStill;

	// Token: 0x04000070 RID: 112
	private float standStillDeadzone;

	// Token: 0x04000071 RID: 113
	private bool doMultiMoveBlockTest = true;

	// Token: 0x04000072 RID: 114
	private AlbinoAI.GrabState grabState;

	// Token: 0x04000073 RID: 115
	private bool grabbing;

	// Token: 0x04000074 RID: 116
	private float initialGrabY;

	// Token: 0x04000075 RID: 117
	private float initialGrabDist;

	// Token: 0x04000076 RID: 118
	private float newStateTimer;

	// Token: 0x04000077 RID: 119
	private float nextGrabRandom;

	// Token: 0x04000078 RID: 120
	private float freeFallSoundDeadzone = 0.2f;

	// Token: 0x04000079 RID: 121
	private float rescueX;

	// Token: 0x0400007A RID: 122
	private float dontPushDir;

	// Token: 0x0400007B RID: 123
	private float pushBackCountdown;

	// Token: 0x0400007C RID: 124
	private float pushBackTime;

	// Token: 0x0400007D RID: 125
	private GameObject pushbackObject;

	// Token: 0x0400007E RID: 126
	private Vector3 fastCatchOffset = Vector3Fast.zero;

	// Token: 0x0400007F RID: 127
	private bool allowExtraReposition = true;

	// Token: 0x04000080 RID: 128
	private Transform huddleCarryVisualBone;

	// Token: 0x04000081 RID: 129
	private Vector3 huddleCarryLocalPos = Vector3Fast.zero;

	// Token: 0x04000082 RID: 130
	private Vector3 originalCenterPos = Vector3Fast.zero;

	// Token: 0x04000083 RID: 131
	private bool interpolateHandPosition;

	// Token: 0x04000084 RID: 132
	private float huddleDimDist;

	// Token: 0x04000085 RID: 133
	public bool headHasBeenLow;

	// Token: 0x04000086 RID: 134
	private AnimcontrolledCharacter.AnimControl lastControls = new AnimcontrolledCharacter.AnimControl();

	// Token: 0x04000087 RID: 135
	public bool forceUpdate;

	// Token: 0x04000088 RID: 136
	public bool justWoken = true;

	// Token: 0x04000089 RID: 137
	private int lastAlbinosInside;

	// Token: 0x0400008A RID: 138
	private int updateWaitCount;

	// Token: 0x02000005 RID: 5
	public enum AIMode
	{
		// Token: 0x0400008F RID: 143
		FollowWaypoint,
		// Token: 0x04000090 RID: 144
		FollowBoy,
		// Token: 0x04000091 RID: 145
		SpawnedButWaiting,
		// Token: 0x04000092 RID: 146
		GoToMultiInteraction,
		// Token: 0x04000093 RID: 147
		BoyGrabStateMode,
		// Token: 0x04000094 RID: 148
		PushBack,
		// Token: 0x04000095 RID: 149
		ThrowBoy
	}

	// Token: 0x02000006 RID: 6
	public enum GrabState
	{
		// Token: 0x04000097 RID: 151
		grabUndefined,
		// Token: 0x04000098 RID: 152
		grabIdle,
		// Token: 0x04000099 RID: 153
		grabPush,
		// Token: 0x0400009A RID: 154
		grabPull
	}
}
