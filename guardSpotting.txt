using System;
using UnityEngine;

// Token: 0x02000597 RID: 1431
public class guardSpotting : MonoBehaviour, IPreAwake
{
	// Token: 0x060024AE RID: 9390 RVA: 0x0012E28C File Offset: 0x0012C48C
	public bool PreAwake(int callcount)
	{
		this.left = SignalOut.Create("left", base.gameObject);
		this.right = SignalOut.Create("right", base.gameObject);
		this.noise = SignalIn.Create("noise", base.gameObject, new Action(this.Noise));
		this.enable = SignalIn.Create("enable", base.gameObject, new Action(this.Enable));
		this.disable = SignalIn.Create("disable", base.gameObject, new Action(this.Disable));
		return true;
	}

	// Token: 0x060024AF RID: 9391 RVA: 0x0012E32C File Offset: 0x0012C52C
	private void Start()
	{
		this.boy = ScriptGlobals.boy;
		if (this.followBoy)
		{
			this.followBoyReceiver = this.followBoy.GetComponent<MindHatReceiver>();
		}
	}

	// Token: 0x060024B0 RID: 9392 RVA: 0x0012E368 File Offset: 0x0012C568
	private void Noise()
	{
		float num = Mathf.Abs(this.boy.velocity.y);
		if (this.dist > this.listenRadius)
		{
			return;
		}
		if (num > this.maxNoise || (num > this.minNoise && (double)this.dist < (double)this.listenRadius * 0.75))
		{
			this.Spotted();
		}
	}

	// Token: 0x060024B1 RID: 9393 RVA: 0x0012E3DC File Offset: 0x0012C5DC
	private void FixedUpdate()
	{
		if (!this.activated)
		{
			return;
		}
		this.dist = Vector3.Distance(this.boy.transform.position, this.followBoy.transform.position);
		if (this.dist < this.sightRadius && Mathf.Abs(this.boy.transform.position.y - this.followBoy.transform.position.y) < this.sightHight)
		{
			if (this.boy.transform.position.x < this.followBoy.transform.position.x)
			{
				if (this.followBoy.facing == -1f)
				{
					this.Spotted();
				}
			}
			else if (this.followBoy.facing == 1f)
			{
				this.Spotted();
			}
		}
		if (this.dist < this.touchRadius)
		{
			this.Spotted();
		}
	}

	// Token: 0x060024B2 RID: 9394 RVA: 0x0012E4FC File Offset: 0x0012C6FC
	private void Spotted()
	{
		if (!this.activated || this.boy.isDead || this.boy.state.ToString() == "BoyCustomAnimState")
		{
			return;
		}
		if (this.followBoyReceiver && this.followBoyReceiver.ControlIsActive())
		{
			return;
		}
		if (this.boy.transform.position.x < this.followBoy.transform.position.x)
		{
			this.left.Signal();
		}
		else
		{
			this.right.Signal();
		}
		this.boy.Kill();
	}

	// Token: 0x060024B3 RID: 9395 RVA: 0x0012E5C0 File Offset: 0x0012C7C0
	private void OnDrawGizmosSelected()
	{
		if (!this.debug)
		{
			return;
		}
		this.SphereGizmo(this.touchRadius, Color.red, 0.2f);
		this.SphereGizmo(this.listenRadius, Color.blue, 0.05f);
		Color white = Color.white;
		white.a = 0.1f;
		Gizmos.color = white;
		Gizmos.DrawCube(this.followBoy.transform.position, new Vector3(this.sightRadius * 2f, this.sightHight * 2f, this.sightHight * 2f));
	}

	// Token: 0x060024B4 RID: 9396 RVA: 0x0012E65C File Offset: 0x0012C85C
	private void SphereGizmo(float size, Color c, float alpha)
	{
		Color color = c;
		color.a = alpha;
		Gizmos.color = color;
		Gizmos.DrawSphere(this.followBoy.transform.position, size);
	}

	// Token: 0x060024B5 RID: 9397 RVA: 0x0012E690 File Offset: 0x0012C890
	private void Enable()
	{
		this.activated = true;
	}

	// Token: 0x060024B6 RID: 9398 RVA: 0x0012E69C File Offset: 0x0012C89C
	private void Disable()
	{
		this.activated = false;
	}

	// Token: 0x04004358 RID: 17240
	public Boy followBoy;

	// Token: 0x04004359 RID: 17241
	public float touchRadius = 1.7f;

	// Token: 0x0400435A RID: 17242
	public float sightRadius = 5f;

	// Token: 0x0400435B RID: 17243
	public float sightHight = 2f;

	// Token: 0x0400435C RID: 17244
	public float listenRadius = 7f;

	// Token: 0x0400435D RID: 17245
	public bool debug;

	// Token: 0x0400435E RID: 17246
	private float minNoise = 2.7f;

	// Token: 0x0400435F RID: 17247
	private float maxNoise = 8f;

	// Token: 0x04004360 RID: 17248
	private Boy boy;

	// Token: 0x04004361 RID: 17249
	private MindHatReceiver followBoyReceiver;

	// Token: 0x04004362 RID: 17250
	private SignalOut right;

	// Token: 0x04004363 RID: 17251
	private SignalOut left;

	// Token: 0x04004364 RID: 17252
	private SignalIn noise;

	// Token: 0x04004365 RID: 17253
	private SignalIn enable;

	// Token: 0x04004366 RID: 17254
	private SignalIn disable;

	// Token: 0x04004367 RID: 17255
	private float dist;

	// Token: 0x04004368 RID: 17256
	public bool activated = true;
}