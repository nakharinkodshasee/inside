using System;
using System.Collections.Generic;
using ABHelper;
using UnityEngine;

// Token: 0x02000034 RID: 52
public class AnimcontrolTransitionManager : MonoBehaviour
{
	// Token: 0x06000188 RID: 392 RVA: 0x000159F4 File Offset: 0x00013BF4
	private void Start()
	{
	}

	// Token: 0x06000189 RID: 393 RVA: 0x000159F8 File Offset: 0x00013BF8
	public void SetDefaultAnimationDefinition(ABDefinition defToSet)
	{
		this.defaultAnimDefinition = defToSet;
		this.defaultAnimationState = this.GetState(defToSet);
	}

	// Token: 0x0600018A RID: 394 RVA: 0x00015A10 File Offset: 0x00013C10
	public ABDefinition GetDefaultAnimationDefinition()
	{
		return this.defaultAnimDefinition;
	}

	// Token: 0x0600018B RID: 395 RVA: 0x00015A18 File Offset: 0x00013C18
	public void AddState(int index, AnimcontrolStateInfo state)
	{
		while (this.stateList.Count <= index)
		{
			this.stateList.Add(null);
		}
		this.stateList[index] = state;
	}

	// Token: 0x0600018C RID: 396 RVA: 0x00015A4C File Offset: 0x00013C4C
	public void CreateCustomAnimDefinitions(AnimcontrolledCharacterBase acCharacter, GameObject character, AnimationBlendHelper blendHelper, AnimationMovementInfo animDB, AnimationMovementInfo animDBGeneric, List<string> manuallyCreatedAnims)
	{
		AnimcontrolStateInfo[] componentsInChildren = base.GetComponentsInChildren<AnimcontrolStateInfo>(true);
		int num = componentsInChildren.Length;
		for (int i = 0; i < num; i++)
		{
			AnimcontrolStateInfo animcontrolStateInfo = componentsInChildren[i];
			ABDefinition abdefinition = animcontrolStateInfo.CreateCustomAnimDefinitions(acCharacter, character, blendHelper, animDB, animDBGeneric, manuallyCreatedAnims);
			if (abdefinition != null)
			{
				this.AddState(abdefinition.definitionID, animcontrolStateInfo);
			}
		}
	}

	// Token: 0x0600018D RID: 397 RVA: 0x00015AA4 File Offset: 0x00013CA4
	public AnimcontrolStateInfo GetState(ABDefinition def)
	{
		if (def == this.currentDefinition && this.currentState != null)
		{
			return this.currentState;
		}
		if (def.definitionID >= this.stateList.Count)
		{
			return null;
		}
		return this.stateList[def.definitionID];
	}

	// Token: 0x0600018E RID: 398 RVA: 0x00015B00 File Offset: 0x00013D00
	public AnimcontrolStateInfo GetCurrentState()
	{
		return this.currentState;
	}

	// Token: 0x0600018F RID: 399 RVA: 0x00015B08 File Offset: 0x00013D08
	public void SetCurrentDefinition(ABDefinition newDef)
	{
		if (newDef != this.currentDefinition || this.currentState == null)
		{
			this.currentState = this.GetState(newDef);
			this.currentDefinition = newDef;
			if (this.currentState != null)
			{
				this.currentDefinition.speedScale = this.currentState.speedFactor;
				this.currentDefinition.alignmentRotateSpeed = this.currentState.alignmentRotateSpeed;
				this.currentDefinition.speedScaleRange = this.currentState.speedFactorRange;
			}
		}
	}

	// Token: 0x06000190 RID: 400 RVA: 0x00015B9C File Offset: 0x00013D9C
	public AnimcontrolStateInfo.TransitionData TestTransitions(ABDefinition activeDefinition, AnimationBlendHelper blendHelper)
	{
		this.SetCurrentDefinition(activeDefinition);
		if (this.currentState == null)
		{
			return null;
		}
		return this.currentState.GetTransition(blendHelper, this);
	}

	// Token: 0x04000249 RID: 585
	public AnimcontrolStateInfo defaultAnimationState;

	// Token: 0x0400024A RID: 586
	private ABDefinition defaultAnimDefinition;

	// Token: 0x0400024B RID: 587
	private List<AnimcontrolStateInfo> stateList = new List<AnimcontrolStateInfo>();

	// Token: 0x0400024C RID: 588
	private ABDefinition currentDefinition;

	// Token: 0x0400024D RID: 589
	private AnimcontrolStateInfo currentState;
}