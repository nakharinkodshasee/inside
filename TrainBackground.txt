using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x0200053D RID: 1341
public class TrainBackground : MonoBehaviour, IPreAwake
{
	// Token: 0x060022E7 RID: 8935 RVA: 0x001243A8 File Offset: 0x001225A8
	public bool PreAwake(int callcount)
	{
		this.makeRegularTrain = SignalIn.Create("makeRegularTrain", base.gameObject, new Action(this.OnStopInfnite));
		this.loadAtSave = SignalIn.Create("loadAtSave", base.gameObject, new Action(this.OnLoadAtSave));
		this.startTrainTwo = SignalIn.Create("startTrainTwo", base.gameObject, new Action(this.OnStartTrainTwo));
		this.loadAtSave2 = SignalIn.Create("loadAtSave2", base.gameObject, new Action(this.OnLoadAtSave2));
		return true;
	}

	// Token: 0x060022E8 RID: 8936 RVA: 0x00124440 File Offset: 0x00122640
	private void Awake()
	{
		this.trackStartPos = this.trackStart.position;
		this.trackEndPos = this.trackEnd.position;
		this.moveDir = (this.trackEndPos - this.trackStartPos).normalized;
		this.locomotive.SetActive(false);
		int i = 0;
		int num = this.carriages.Length;
		while (i < num)
		{
			this.carriages[i].SetActive(false);
			i++;
		}
		this.OnStartWithTrainRunning();
		this.isInfite = true;
	}

	// Token: 0x060022E9 RID: 8937 RVA: 0x001244D0 File Offset: 0x001226D0
	private void OnLoadAtSave2()
	{
		this.state = TrainBackground.State.None;
		this.movingCarriages.Clear();
		this.curNumbOfCarriages = 10;
		this.distanceToNextCarriage = 0f;
		this.carriageCount = 0;
		this.locomotive.SetActive(false);
		int i = 0;
		int num = this.carriages.Length;
		while (i < num)
		{
			this.carriages[i].SetActive(false);
			i++;
		}
		this.readyForTrainTwo = true;
	}

	// Token: 0x060022EA RID: 8938 RVA: 0x00124548 File Offset: 0x00122748
	private void OnStartTrainTwo()
	{
		if (this.readyForTrainTwo)
		{
			this.SetStartFakeTrain();
		}
		else
		{
			this.waitForTrainOne = true;
		}
	}

	// Token: 0x060022EB RID: 8939 RVA: 0x00124568 File Offset: 0x00122768
	private void OnStopInfnite()
	{
		this.audioLogic.EnableCap1();
		this.carriageCount = 15;
		this.curNumbOfCarriages = 20;
		this.isInfite = false;
	}

	// Token: 0x060022EC RID: 8940 RVA: 0x00124598 File Offset: 0x00122798
	private void OnLoadAtSave()
	{
		this.isInfite = false;
	}

	// Token: 0x060022ED RID: 8941 RVA: 0x001245A4 File Offset: 0x001227A4
	private void OnStartWithTrainRunning()
	{
		this.movingCarriages.Clear();
		this.curNumbOfCarriages = 10;
		this.distanceToNextCarriage = 0f;
		this.carriageCount = 0;
		int i = 0;
		int num = this.carriagesShown;
		while (i < num)
		{
			GameObject availableCarriage = this.GetAvailableCarriage();
			this.AddCarriage(availableCarriage);
			this.carriageCount++;
			availableCarriage.transform.position = this.trackStart.position + (this.trackEnd.position - this.trackStart.position).normalized * (float)(this.carriagesShown - i) * this.carriageLength;
			i++;
		}
		this.state = TrainBackground.State.Drive;
	}

	// Token: 0x060022EE RID: 8942 RVA: 0x0012466C File Offset: 0x0012286C
	private void SetDriveState()
	{
		this.movingCarriages.Clear();
		this.curNumbOfCarriages = Random.Range(this.carriagesMin, this.carriagesMax);
		this.distanceToNextCarriage = this.carriageLength - 0.5f;
		this.carriageCount = 1;
		this.AddCarriage(this.locomotive);
		this.state = TrainBackground.State.Drive;
	}

	// Token: 0x060022EF RID: 8943 RVA: 0x001246C8 File Offset: 0x001228C8
	private void DriveState()
	{
		float num = Time.deltaTime * this.moveSpeed;
		this.distanceToNextCarriage -= num;
		Vector3 vector = this.moveDir * num;
		if (this.fakeTrainRunning)
		{
			this.fakeTrain.position += vector;
		}
		int i = 0;
		int count = this.movingCarriages.Count;
		while (i < count)
		{
			this.movingCarriages[i].position += vector;
			i++;
		}
		if (this.distanceToNextCarriage < 0f)
		{
			if (this.isInfite || this.curNumbOfCarriages == 0 || this.carriageCount < this.curNumbOfCarriages)
			{
				GameObject availableCarriage = this.GetAvailableCarriage();
				this.AddCarriage(availableCarriage);
			}
			else
			{
				this.audioLogic.OnTrain_1_out(this.movingCarriages[this.movingCarriages.Count - 1]);
			}
			this.carriageCount++;
			this.distanceToNextCarriage = this.carriageLength;
			this.DisableFrontCarriage();
		}
		if (this.movingCarriages.Count <= 0)
		{
			this.SetWaitState();
		}
	}

	// Token: 0x060022F0 RID: 8944 RVA: 0x00124800 File Offset: 0x00122A00
	private void SetWaitState()
	{
		if (this.trainRepeatTimeMax == 0f)
		{
			this.state = TrainBackground.State.None;
		}
		else
		{
			this.trainTimer = Random.Range(this.trainRepeatTimeMin, this.trainRepeatTimeMax);
			this.state = TrainBackground.State.Wait;
		}
	}

	// Token: 0x060022F1 RID: 8945 RVA: 0x00124848 File Offset: 0x00122A48
	private void WaitState()
	{
	}

	// Token: 0x060022F2 RID: 8946 RVA: 0x0012484C File Offset: 0x00122A4C
	private void Update()
	{
		if (this.waitForTrainOne && this.readyForTrainTwo)
		{
			this.waitForTrainOne = false;
			this.SetStartFakeTrain();
		}
		switch (this.state)
		{
		case TrainBackground.State.Drive:
			this.DriveState();
			break;
		case TrainBackground.State.MoveFakeTrain:
			this.MoveFakeTrainState();
			break;
		case TrainBackground.State.Wait:
			this.WaitState();
			break;
		}
	}

	// Token: 0x060022F3 RID: 8947 RVA: 0x001248C0 File Offset: 0x00122AC0
	private GameObject GetAvailableCarriage()
	{
		int i = 0;
		int num = this.carriages.Length;
		while (i < num)
		{
			GameObject gameObject = this.carriages[i];
			if (!gameObject.activeSelf)
			{
				return gameObject;
			}
			i++;
		}
		return this.carriages[0];
	}

	// Token: 0x060022F4 RID: 8948 RVA: 0x00124908 File Offset: 0x00122B08
	private void DisableFrontCarriage()
	{
		if (this.movingCarriages.Count > this.carriagesShown || (!this.isInfite && this.carriageCount >= this.curNumbOfCarriages))
		{
			this.movingCarriages[0].gameObject.SetActive(false);
			this.movingCarriages.RemoveAt(0);
		}
		if (!this.readyForTrainTwo && this.movingCarriages.Count == 0)
		{
			this.readyForTrainTwo = true;
		}
	}

	// Token: 0x060022F5 RID: 8949 RVA: 0x0012498C File Offset: 0x00122B8C
	private void AddCarriage(GameObject obj)
	{
		obj.SetActive(true);
		Transform transform = obj.transform;
		transform.position = this.trackStartPos;
		this.movingCarriages.Add(transform);
	}

	// Token: 0x060022F6 RID: 8950 RVA: 0x001249C0 File Offset: 0x00122BC0
	private void SetStartFakeTrain()
	{
		this.fakeTrainRunning = true;
		this.isInfite = true;
		this.movingCarriages.Clear();
		this.carriageCount = 0;
		this.lastFrameDist = float.MaxValue;
		this.state = TrainBackground.State.MoveFakeTrain;
		this.fakeTrain.position = this.fakeTrainStart.position;
		this.audioLogic.OnTrain_2_in(this.fakeTrain);
	}

	// Token: 0x060022F7 RID: 8951 RVA: 0x00124A28 File Offset: 0x00122C28
	private void MoveFakeTrainState()
	{
		float num = Time.deltaTime * this.moveSpeed;
		this.distanceToNextCarriage -= num;
		Vector3 vector = this.moveDir * num;
		this.fakeTrain.position += vector;
		float magnitude = (this.fakeTrain.position - this.trackStart.position).magnitude;
		if (magnitude >= this.lastFrameDist)
		{
			this.SetDriveState();
		}
		this.lastFrameDist = magnitude;
	}

	// Token: 0x04004124 RID: 16676
	public GameObject locomotive;

	// Token: 0x04004125 RID: 16677
	public GameObject[] carriages;

	// Token: 0x04004126 RID: 16678
	public Transform trackStart;

	// Token: 0x04004127 RID: 16679
	public Transform trackEnd;

	// Token: 0x04004128 RID: 16680
	public float moveSpeed = 3f;

	// Token: 0x04004129 RID: 16681
	public int carriagesMin = 30;

	// Token: 0x0400412A RID: 16682
	public int carriagesMax = 60;

	// Token: 0x0400412B RID: 16683
	public int carriagesShown = 5;

	// Token: 0x0400412C RID: 16684
	public float trainRepeatTimeMin = 30f;

	// Token: 0x0400412D RID: 16685
	public float trainRepeatTimeMax = 60f;

	// Token: 0x0400412E RID: 16686
	public float carriageLength = 12.75f;

	// Token: 0x0400412F RID: 16687
	public Transform fakeTrain;

	// Token: 0x04004130 RID: 16688
	public Transform fakeTrainStart;

	// Token: 0x04004131 RID: 16689
	public AudioZombieTrain audioLogic;

	// Token: 0x04004132 RID: 16690
	private SignalIn makeRegularTrain;

	// Token: 0x04004133 RID: 16691
	private SignalIn loadAtSave;

	// Token: 0x04004134 RID: 16692
	private SignalIn startTrainTwo;

	// Token: 0x04004135 RID: 16693
	private SignalIn loadAtSave2;

	// Token: 0x04004136 RID: 16694
	private TrainBackground.State state;

	// Token: 0x04004137 RID: 16695
	private Vector3 trackStartPos;

	// Token: 0x04004138 RID: 16696
	private Vector3 trackEndPos;

	// Token: 0x04004139 RID: 16697
	private Vector3 moveDir;

	// Token: 0x0400413A RID: 16698
	private int carriageCount;

	// Token: 0x0400413B RID: 16699
	private int curNumbOfCarriages;

	// Token: 0x0400413C RID: 16700
	private float distanceToNextCarriage;

	// Token: 0x0400413D RID: 16701
	private bool fakeTrainRunning;

	// Token: 0x0400413E RID: 16702
	private bool readyForTrainTwo;

	// Token: 0x0400413F RID: 16703
	private bool waitForTrainOne;

	// Token: 0x04004140 RID: 16704
	private List<Transform> movingCarriages = new List<Transform>();

	// Token: 0x04004141 RID: 16705
	private float trainTimer;

	// Token: 0x04004142 RID: 16706
	private float lastFrameDist = float.MaxValue;

	// Token: 0x04004143 RID: 16707
	private bool isInfite = true;

	// Token: 0x0200053E RID: 1342
	private enum State
	{
		// Token: 0x04004145 RID: 16709
		None,
		// Token: 0x04004146 RID: 16710
		Drive,
		// Token: 0x04004147 RID: 16711
		MoveFakeTrain,
		// Token: 0x04004148 RID: 16712
		Wait
	}
}