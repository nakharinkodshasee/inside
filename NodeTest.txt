using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x0200056A RID: 1386
public class NodeTest : MonoBehaviour
{
	// Token: 0x06002402 RID: 9218 RVA: 0x0012A5A8 File Offset: 0x001287A8
	public static void SetFlag(ref NodeTest.VisibilityState state, NodeTest.VisibilityState flag, bool value)
	{
		if (value)
		{
			state |= flag;
		}
		else
		{
			state &= ~flag;
		}
	}

	// Token: 0x06002403 RID: 9219 RVA: 0x0012A5C4 File Offset: 0x001287C4
	public static bool HasFlagAny(NodeTest.VisibilityState state, NodeTest.VisibilityState flag)
	{
		return (state & flag) != NodeTest.VisibilityState.NotVisible;
	}

	// Token: 0x06002404 RID: 9220 RVA: 0x0012A5D0 File Offset: 0x001287D0
	public static bool HasFlagAll(NodeTest.VisibilityState state, NodeTest.VisibilityState flag)
	{
		return (state & flag) == flag;
	}

	// Token: 0x06002405 RID: 9221 RVA: 0x0012A5D8 File Offset: 0x001287D8
	private void Start()
	{
		Bounds bounds = default(Bounds);
		for (int i = 0; i < 1000; i++)
		{
			this.stateArray.Add(NodeTest.VisibilityState.InsideViewFrustum);
		}
		List<NodeTest.CullingNode> list = new List<NodeTest.CullingNode>();
		List<NodeTest.CullingNode> list2 = new List<NodeTest.CullingNode>();
		List<NodeTest.CullingNode> list3 = new List<NodeTest.CullingNode>();
		for (int j = 0; j < 10; j++)
		{
			list2.Clear();
			for (int k = 0; k < 10; k++)
			{
				list3.Clear();
				for (int l = 0; l < 10; l++)
				{
					list3.Add(new NodeTest.CullingNode(ref bounds, new NodeTest.VisualCullingInfo(base.gameObject), null));
				}
				list2.Add(new NodeTest.CullingNode(ref bounds, new NodeTest.VisualCullingInfo(base.gameObject), list3.ToArray()));
			}
			list.Add(new NodeTest.CullingNode(ref bounds, new NodeTest.VisualCullingInfo(base.gameObject), list2.ToArray()));
		}
		this.rootNode = new NodeTest.CullingNode(ref bounds, new NodeTest.VisualCullingInfo(base.gameObject), list.ToArray());
	}

	// Token: 0x06002406 RID: 9222 RVA: 0x0012A6EC File Offset: 0x001288EC
	private void Update()
	{
		this.stateArray[100] = NodeTest.VisibilityState.Occluded;
		this.stateArray.ResetAllToDefault();
		Debug.Log(this.stateArray[100]);
		NodeTest.SetStateRecursivly(ref this.rootNode, NodeTest.VisibilityState.NotVisible);
	}

	// Token: 0x06002407 RID: 9223 RVA: 0x0012A738 File Offset: 0x00128938
	private static void SetStateRecursivly(ref NodeTest.CullingNode rootNode, NodeTest.VisibilityState state)
	{
		if (rootNode.children != null)
		{
			for (int i = 0; i < rootNode.children.Length; i++)
			{
				NodeTest.SetStateRecursivly(ref rootNode.children[i], state);
			}
		}
		NodeTest.SetFlag(ref rootNode.visibilityState, state, true);
	}

	// Token: 0x04004256 RID: 16982
	private FastList<NodeTest.VisibilityState> stateArray = new FastList<NodeTest.VisibilityState>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04004257 RID: 16983
	private NodeTest.CullingNode rootNode;

	// Token: 0x0200056B RID: 1387
	[Flags]
	public enum VisibilityState
	{
		// Token: 0x04004259 RID: 16985
		NotVisible = 0,
		// Token: 0x0400425A RID: 16986
		Occluded = 1,
		// Token: 0x0400425B RID: 16987
		InsideViewFrustum = 2,
		// Token: 0x0400425C RID: 16988
		OctreeHit = 4,
		// Token: 0x0400425D RID: 16989
		RequiredByDependency = 8,
		// Token: 0x0400425E RID: 16990
		RequiredByOverlapBounds = 16,
		// Token: 0x0400425F RID: 16991
		VisibleSet = 32
	}

	// Token: 0x0200056C RID: 1388
	private abstract class CullingInfo
	{
		// Token: 0x06002409 RID: 9225 RVA: 0x0012A794 File Offset: 0x00128994
		public virtual void VisibilityChanged(bool visible)
		{
		}

		// Token: 0x0600240A RID: 9226 RVA: 0x0012A798 File Offset: 0x00128998
		public virtual void Update()
		{
		}

		// Token: 0x0600240B RID: 9227 RVA: 0x0012A79C File Offset: 0x0012899C
		public virtual NodeTest.VisibilityState RefineVisibilityState(NodeTest.VisibilityState state)
		{
			return state;
		}
	}

	// Token: 0x0200056D RID: 1389
	private class VisualCullingInfo : NodeTest.CullingInfo
	{
		// Token: 0x0600240C RID: 9228 RVA: 0x0012A7A0 File Offset: 0x001289A0
		public VisualCullingInfo(GameObject root)
		{
			this.gameObject = root;
		}

		// Token: 0x0600240D RID: 9229 RVA: 0x0012A7B0 File Offset: 0x001289B0
		public override void VisibilityChanged(bool visible)
		{
			this.gameObject.SetActive(visible);
		}

		// Token: 0x04004260 RID: 16992
		private GameObject gameObject;
	}

	// Token: 0x0200056E RID: 1390
	private class CullingNode
	{
		// Token: 0x0600240E RID: 9230 RVA: 0x0012A7C0 File Offset: 0x001289C0
		public CullingNode(ref Bounds bounds, NodeTest.CullingInfo info, NodeTest.CullingNode[] children)
		{
			this.bounds = bounds;
			this.info = info;
			this.children = children;
			this.visibilityState = NodeTest.VisibilityState.NotVisible;
		}

		// Token: 0x0600240F RID: 9231 RVA: 0x0012A7EC File Offset: 0x001289EC
		public bool IsVisible()
		{
			bool flag = NodeTest.HasFlagAll(this.visibilityState, NodeTest.VisibilityState.InsideViewFrustum | NodeTest.VisibilityState.OctreeHit);
			bool flag2 = NodeTest.HasFlagAny(this.visibilityState, NodeTest.VisibilityState.RequiredByDependency | NodeTest.VisibilityState.RequiredByOverlapBounds);
			return flag || flag2;
		}

		// Token: 0x04004261 RID: 16993
		public Bounds bounds;

		// Token: 0x04004262 RID: 16994
		public NodeTest.VisibilityState visibilityState;

		// Token: 0x04004263 RID: 16995
		public NodeTest.CullingNode[] children;

		// Token: 0x04004264 RID: 16996
		public NodeTest.CullingInfo info;
	}
}