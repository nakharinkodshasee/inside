using System;
using UnityEngine;

// Token: 0x02000118 RID: 280
public class CoverTrigger : MonoBehaviour, IPreAwake
{
	// Token: 0x06000882 RID: 2178 RVA: 0x0005ABB8 File Offset: 0x00058DB8
	public bool PreAwake(int callcount)
	{
		this.enableTrigger = SignalIn.Create("enableTrigger", base.gameObject, new Action(this.EnableTrigger));
		this.disableTrigger = SignalIn.Create("disableTrigger", base.gameObject, new Action(this.DisableTrigger));
		this.boyInCover = SignalOut.Create("boyInCover", base.gameObject);
		this.boyNotInCover = SignalOut.Create("boyNotInCover", base.gameObject);
		return true;
	}

	// Token: 0x06000883 RID: 2179 RVA: 0x0005AC38 File Offset: 0x00058E38
	private void Start()
	{
		this.isEnabled = this.startEnabled;
		this.state = CoverTrigger.State.Inactive;
		this.stateTimer = 0f;
	}

	// Token: 0x06000884 RID: 2180 RVA: 0x0005AC58 File Offset: 0x00058E58
	private void EnableTrigger()
	{
		this.isEnabled = true;
	}

	// Token: 0x06000885 RID: 2181 RVA: 0x0005AC64 File Offset: 0x00058E64
	private void DisableTrigger()
	{
		this.isEnabled = false;
	}

	// Token: 0x06000886 RID: 2182 RVA: 0x0005AC70 File Offset: 0x00058E70
	private void SetInactiveState()
	{
		this.state = CoverTrigger.State.Inactive;
		if (!ScriptGlobals.boy.isDead)
		{
			BoyUtils.ClearState(ScriptGlobals.boy, -1f);
		}
		this.stateTimer = 0f;
	}

	// Token: 0x06000887 RID: 2183 RVA: 0x0005ACB0 File Offset: 0x00058EB0
	private void InactiveState()
	{
		if (this.isEnabled && this.stateTimer > 0.1f && this.boyInsideTrigger && Mathf.Abs(ScriptGlobals.boy.input.stick.x) < 0.2f && ScriptGlobals.boy.status.groundCollider != null)
		{
			this.SetCoverState();
		}
	}

	// Token: 0x06000888 RID: 2184 RVA: 0x0005AD2C File Offset: 0x00058F2C
	private void SetCoverState()
	{
		this.animNode.transform.position = ScriptGlobals.boy.transform.position;
		this.animNode.transform.position = this.animNode.transform.position - Vector3.up * 0.7f;
		if (!(ScriptGlobals.boy.state is BoyCustomAnimState) && !ScriptGlobals.boy.isDead)
		{
			BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.animNode, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		}
		this.state = CoverTrigger.State.Cover;
		this.stateTimer = 0f;
	}

	// Token: 0x06000889 RID: 2185 RVA: 0x0005ADDC File Offset: 0x00058FDC
	private void CoverState()
	{
		if (!this.isEnabled || (this.stateTimer > 0.2f && (Mathf.Abs(ScriptGlobals.boy.input.stick.x) > 0.33f || ScriptGlobals.boy.input.jump)))
		{
			this.SetInactiveState();
		}
	}

	// Token: 0x0600088A RID: 2186 RVA: 0x0005AE44 File Offset: 0x00059044
	private void FixedUpdate()
	{
		if (this.state != CoverTrigger.State.None)
		{
			this.stateTimer += Time.deltaTime;
			if (this.state == CoverTrigger.State.Cover)
			{
				this.CoverState();
			}
			else if (this.state == CoverTrigger.State.Inactive)
			{
				this.InactiveState();
			}
		}
	}

	// Token: 0x0600088B RID: 2187 RVA: 0x0005AE98 File Offset: 0x00059098
	private void OnTriggerEnter(Collider coll)
	{
		if (coll.attachedRigidbody != null && coll.attachedRigidbody.GetComponent<Boy>())
		{
			this.boyInCover.Signal();
			this.boyInsideTrigger = true;
		}
	}

	// Token: 0x0600088C RID: 2188 RVA: 0x0005AEE0 File Offset: 0x000590E0
	private void OnTriggerExit(Collider coll)
	{
		if (coll.attachedRigidbody != null && coll.attachedRigidbody.GetComponent<Boy>())
		{
			this.boyNotInCover.Signal();
			this.boyInsideTrigger = false;
		}
	}

	// Token: 0x04000E72 RID: 3698
	public AnimClipNode animNode;

	// Token: 0x04000E73 RID: 3699
	public bool startEnabled = true;

	// Token: 0x04000E74 RID: 3700
	private CoverTrigger.State state;

	// Token: 0x04000E75 RID: 3701
	private float stateTimer;

	// Token: 0x04000E76 RID: 3702
	private bool isEnabled = true;

	// Token: 0x04000E77 RID: 3703
	private SignalIn enableTrigger;

	// Token: 0x04000E78 RID: 3704
	private SignalIn disableTrigger;

	// Token: 0x04000E79 RID: 3705
	private SignalOut boyInCover;

	// Token: 0x04000E7A RID: 3706
	private SignalOut boyNotInCover;

	// Token: 0x04000E7B RID: 3707
	private bool boyInsideTrigger;

	// Token: 0x02000119 RID: 281
	private enum State
	{
		// Token: 0x04000E7D RID: 3709
		None,
		// Token: 0x04000E7E RID: 3710
		Cover,
		// Token: 0x04000E7F RID: 3711
		Inactive
	}
}