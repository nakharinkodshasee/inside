using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x0200026E RID: 622
public class WaterSplashHulv : MonoBehaviour
{
	// Token: 0x06001322 RID: 4898 RVA: 0x000B49C8 File Offset: 0x000B2BC8
	public void Init(GameObject w, WaterQueueMaster wQM)
	{
		this.water = w;
		this.particles = base.GetComponentsInChildren<ParticleSystem>(true);
		this.SetupWaterToShader(wQM);
	}

	// Token: 0x06001323 RID: 4899 RVA: 0x000B49E8 File Offset: 0x000B2BE8
	public void Setup(Hulv h, GameObject w, Color splashColor, WaterQueueMaster wQM = null)
	{
		int i = 0;
		int num = this.particles.Length;
		while (i < num)
		{
			this.particles[i].ClearPosition();
			i++;
		}
		this.hulv = h;
		this.hulvSpeed = Mathf.Clamp01(this.hulv.velocity.magnitude / 1.8f);
		this.SetSplashColor(splashColor);
		this.SetImpactSwim();
		this.SetSwimState();
		if (this.waves)
		{
			if (wQM.reflectionAboveOutside)
			{
				PDPlanarReflection component = wQM.reflectionAboveOutside.GetComponent<PDPlanarReflection>();
				if (component)
				{
					component.SubscribeToReflectionTexture(this.waves.GetComponent<MaterialInstance>());
					this.waves.Play();
				}
				else
				{
					this.waves.gameObject.SetActive(false);
				}
			}
			else
			{
				this.waves.gameObject.SetActive(false);
			}
		}
	}

	// Token: 0x06001324 RID: 4900 RVA: 0x000B4ADC File Offset: 0x000B2CDC
	private void SetupWaterToShader(WaterQueueMaster wQM)
	{
		for (int i = 0; i < this.particles.Length; i++)
		{
			ParticleSystem particleSystem = this.particles[i];
			WaterToShader component = particleSystem.GetComponent<WaterToShader>();
			if (component)
			{
				component.SetWaterQueueMaster(wQM);
				component.Setup();
				component.RefreshSurface(false);
			}
		}
	}

	// Token: 0x06001325 RID: 4901 RVA: 0x000B4B34 File Offset: 0x000B2D34
	private void SetSwimState()
	{
		this.SetParticles(this.ripples, true);
		this.SetParticles(this.splashSwim, true);
		this.state = WaterSplashHulv.State.Swim;
	}

	// Token: 0x06001326 RID: 4902 RVA: 0x000B4B58 File Offset: 0x000B2D58
	private void SwimState()
	{
		Vector3 position = base.transform.position;
		if (this.ripples)
		{
			this.ripples.transform.position = position;
		}
		if (this.splashSwim)
		{
			this.splashSwim.transform.position = position;
		}
		if (this.ripplesFoam)
		{
			this.ripplesFoam.startSize = 4f;
			this.ripplesFoam.emissionRate = this.hulvSpeed * 3f + 1f;
		}
		if (this.splashSwimSpecs)
		{
			this.splashSwimSpecs.startSpeed = 4f;
			this.splashSwimSpecs.emissionRate = this.hulvSpeed * 48f + 16f;
		}
		if (this.splashSwimBig)
		{
			this.splashSwimBig.startSpeed = 4f;
			this.splashSwimBig.emissionRate = this.hulvSpeed * 48f + 16f;
		}
	}

	// Token: 0x06001327 RID: 4903 RVA: 0x000B4C6C File Offset: 0x000B2E6C
	private void SetImpactSwim()
	{
		Vector3 position = base.transform.position;
		position.z -= 0.5f;
		if (this.splashJump)
		{
			this.splashJump.transform.position = position;
		}
		this.SetParticles(this.splashJump, true);
	}

	// Token: 0x06001328 RID: 4904 RVA: 0x000B4CC8 File Offset: 0x000B2EC8
	private void SetEndState()
	{
		foreach (ParticleSystem p in this.particles)
		{
			this.SetParticles(p, false);
		}
		this.state = WaterSplashHulv.State.End;
	}

	// Token: 0x06001329 RID: 4905 RVA: 0x000B4D04 File Offset: 0x000B2F04
	private void EndState()
	{
	}

	// Token: 0x0600132A RID: 4906 RVA: 0x000B4D08 File Offset: 0x000B2F08
	private void Update()
	{
		this.hulvSpeed = Mathf.Clamp01(this.hulv.velocity.magnitude / 1.8f);
		this.SetHeight();
		this.SetPosition();
		if (this.state == WaterSplashHulv.State.End)
		{
			this.EndState();
		}
		else if (this.state == WaterSplashHulv.State.Swim)
		{
			this.SwimState();
		}
		if (this.waves)
		{
			if (this.state == WaterSplashHulv.State.Swim)
			{
				this.waves.emissionRate = this.hulvSpeed * 4f;
			}
			else
			{
				this.waves.emissionRate = 0f;
			}
		}
	}

	// Token: 0x0600132B RID: 4907 RVA: 0x000B4DB8 File Offset: 0x000B2FB8
	public void SetSplashColor(Color splashColor)
	{
		if (this.currentSplashColor != null && splashColor == this.currentSplashColor.Value)
		{
			return;
		}
		for (int i = 0; i < this.particles.Length; i++)
		{
			if (this.particles[i])
			{
				MaterialInstance component = this.particles[i].GetComponent<MaterialInstance>();
				if (component)
				{
					MaterialInstance.ColorProperty colorProperty = component.GetColorProperty("_TintColor");
					if (colorProperty == null)
					{
						colorProperty = component.GetColorProperty("_MainCol");
					}
					if (colorProperty == null)
					{
						colorProperty = component.GetColorProperty("_Color");
					}
					if (colorProperty != null)
					{
						splashColor.a = component.GetColorValue(colorProperty).a;
						component.SetColorProperty(colorProperty, splashColor);
					}
				}
			}
		}
		this.currentSplashColor = new Color?(splashColor);
	}

	// Token: 0x0600132C RID: 4908 RVA: 0x000B4EA0 File Offset: 0x000B30A0
	private void SetParticles(ParticleSystem p, bool v)
	{
		if (p == null)
		{
			return;
		}
		if (v)
		{
			p.Play(true);
		}
		else
		{
			p.Stop(true);
		}
	}

	// Token: 0x0600132D RID: 4909 RVA: 0x000B4ED4 File Offset: 0x000B30D4
	private void SetHeight()
	{
		this.waterHeight = this.water.transform.position.y + this.water.transform.localScale.y / 2f;
	}

	// Token: 0x0600132E RID: 4910 RVA: 0x000B4F20 File Offset: 0x000B3120
	private void SetPosition()
	{
		Vector3 position = this.hulv.headBone.transform.position;
		position.y = this.waterHeight;
		base.transform.position = position;
	}

	// Token: 0x0600132F RID: 4911 RVA: 0x000B4F5C File Offset: 0x000B315C
	public Hulv GetHulv()
	{
		return this.hulv;
	}

	// Token: 0x06001330 RID: 4912 RVA: 0x000B4F64 File Offset: 0x000B3164
	public void Remove()
	{
		this.SetEndState();
	}

	// Token: 0x04002355 RID: 9045
	public ParticleSystem ripples;

	// Token: 0x04002356 RID: 9046
	public ParticleSystem ripplesFoam;

	// Token: 0x04002357 RID: 9047
	public ParticleSystem splashJump;

	// Token: 0x04002358 RID: 9048
	public ParticleSystem splashSwim;

	// Token: 0x04002359 RID: 9049
	public ParticleSystem splashSwimBig;

	// Token: 0x0400235A RID: 9050
	public ParticleSystem splashSwimSpecs;

	// Token: 0x0400235B RID: 9051
	public ParticleSystem waves;

	// Token: 0x0400235C RID: 9052
	public List<ParticleSystem> rippleList;

	// Token: 0x0400235D RID: 9053
	private WaterSplashHulv.State state;

	// Token: 0x0400235E RID: 9054
	private Color? currentSplashColor;

	// Token: 0x0400235F RID: 9055
	private float hulvSpeed;

	// Token: 0x04002360 RID: 9056
	private float waterHeight;

	// Token: 0x04002361 RID: 9057
	private Hulv hulv;

	// Token: 0x04002362 RID: 9058
	[SerializeField]
	[HideInInspector]
	private GameObject water;

	// Token: 0x04002363 RID: 9059
	[HideInInspector]
	[SerializeField]
	private ParticleSystem[] particles;

	// Token: 0x0200026F RID: 623
	private enum State
	{
		// Token: 0x04002365 RID: 9061
		None,
		// Token: 0x04002366 RID: 9062
		Swim,
		// Token: 0x04002367 RID: 9063
		End
	}
}
