using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020004C3 RID: 1219
public class ForcePushMovingCover : MonoBehaviour, IFastEventExListener<Collider>, IPreAwake
{
	// Token: 0x06001FDD RID: 8157 RVA: 0x0010EF2C File Offset: 0x0010D12C
	public int GetColliderCount()
	{
		return this.currentColliders.Count;
	}

	// Token: 0x06001FDE RID: 8158 RVA: 0x0010EF3C File Offset: 0x0010D13C
	public bool PreAwake(int callcount)
	{
		this.blow = SignalIn.Create("blow", base.gameObject, new Action(this.OnBlow));
		this.loadComplete = SignalIn.Create("loadComplete", base.gameObject, new Action(this.OnLoadComplete));
		this.killingBoy = SignalOut.Create("killingBoy", base.gameObject);
		return true;
	}

	// Token: 0x06001FDF RID: 8159 RVA: 0x0010EFA4 File Offset: 0x0010D1A4
	private void Awake()
	{
		this.boy = ScriptGlobals.boy;
		if (this.boy)
		{
			CameraBlendProbe[] componentsInChildren = this.boy.GetComponentsInChildren<CameraBlendProbe>(true);
			if (componentsInChildren.Length > 0)
			{
				this.cameraProbe = componentsInChildren[0].transform;
			}
		}
	}

	// Token: 0x06001FE0 RID: 8160 RVA: 0x0010EFF0 File Offset: 0x0010D1F0
	private void Start()
	{
		this.coverProbe.enterTrigger.Register(this, ref this.coverTriggerEnterHandle);
		this.coverProbe.exitTrigger.Register(this, ref this.coverTriggerExitHandle);
		this.state = ForcePushMovingCover.State.None;
	}

	// Token: 0x06001FE1 RID: 8161 RVA: 0x0010F028 File Offset: 0x0010D228
	private void SetBlowState()
	{
		SingletonBehaviour<BoyAudio>.instance.KillBoyWithEmotion(VoiceConfigProbe.Emotion.DoNotSet, 0f, false, true);
		this.safetyCoverRail.SetActive(false);
		this.railColliders.SetActive(false);
		this.backBlocker.SetActive(false);
		this.boy.Kill();
		this.collidesWithCover.material.bounciness = 0.75f;
		this.collidesWithCover.transform.localPosition = this.collidesWithCoverKillTransform.transform.localPosition;
		this.collidesWithCover.transform.localRotation = this.collidesWithCoverKillTransform.transform.localRotation;
		this.collidesWithCover.transform.localScale = this.collidesWithCoverKillTransform.transform.localScale;
		this.boyKilled = true;
		if (this.cameraProbe)
		{
			this.cameraProbe.parent = base.transform;
		}
		this.coverBottom.AddForceAtPosition(this.coverForceFree, this.coverForcePos.position, 1);
		this.boyForceTimer = this.boyForceDelay;
		this.blowTimer = 0.33f;
		this.killingBoy.Signal();
		this.state = ForcePushMovingCover.State.Blow;
	}

	// Token: 0x06001FE2 RID: 8162 RVA: 0x0010F160 File Offset: 0x0010D360
	private void BlowState()
	{
		if (this.boyForceTimer > 0f)
		{
			this.boyForceTimer -= Time.deltaTime;
			if (this.boyForceTimer < 0f)
			{
				this.AddExplosionForce();
			}
		}
		this.blowTimer -= Time.deltaTime;
		if (this.blowTimer <= 0f)
		{
			this.SetPostBlowState();
		}
	}

	// Token: 0x06001FE3 RID: 8163 RVA: 0x0010F1D0 File Offset: 0x0010D3D0
	private void SetPostBlowState()
	{
		this.railColliders.SetActive(true);
		this.state = ForcePushMovingCover.State.PostBlow;
	}

	// Token: 0x06001FE4 RID: 8164 RVA: 0x0010F1E8 File Offset: 0x0010D3E8
	private void PostBlowState()
	{
		if (LevelGlobals.forcePushManager != null && ForcePushManager.getActiveZoneCount() == 0)
		{
			BoyUtils.StartCustomAnim(ScriptGlobals.boy, this.animStop, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
			this.state = ForcePushMovingCover.State.None;
		}
	}

	// Token: 0x06001FE5 RID: 8165 RVA: 0x0010F230 File Offset: 0x0010D430
	private void CheckIsLoadedTimer()
	{
		if (!this.hasLoaded)
		{
			this.loadTimer -= Time.deltaTime;
			if (this.loadTimer < 0f)
			{
				this.hasLoaded = true;
			}
		}
	}

	// Token: 0x06001FE6 RID: 8166 RVA: 0x0010F274 File Offset: 0x0010D474
	private void FixedUpdate()
	{
		this.CheckIsLoadedTimer();
		if (this.state == ForcePushMovingCover.State.Blow)
		{
			this.BlowState();
		}
		else if (this.state == ForcePushMovingCover.State.PostBlow)
		{
			this.PostBlowState();
		}
	}

	// Token: 0x06001FE7 RID: 8167 RVA: 0x0010F2A8 File Offset: 0x0010D4A8
	private void AddExplosionForce()
	{
		RagdollSkeleton ragdoll = this.boy.visualBoy.ragdoll;
		RagdollSkeleton.BodyIndex bodyIndex = ragdoll.begin;
		while (bodyIndex != ragdoll.end)
		{
			Rigidbody rigidbody = ragdoll[bodyIndex];
			string name = rigidbody.name;
			if (name == "Root" || name == "Head")
			{
				rigidbody.AddForce(this.force, 1);
			}
			bodyIndex = ++bodyIndex;
		}
	}

	// Token: 0x06001FE8 RID: 8168 RVA: 0x0010F328 File Offset: 0x0010D528
	public void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		if (sender == this.coverProbe.enterTrigger)
		{
			this.OnCoverEnter(collider);
		}
		else if (sender == this.coverProbe.exitTrigger)
		{
			this.OnCoverExit(collider);
		}
	}

	// Token: 0x06001FE9 RID: 8169 RVA: 0x0010F364 File Offset: 0x0010D564
	private void OnCoverEnter(Collider collider)
	{
		if ((collider == this.coverLeftCollider || collider == this.coverRightCollider) && !this.currentColliders.Contains(collider))
		{
			this.currentColliders.Add(collider);
		}
	}

	// Token: 0x06001FEA RID: 8170 RVA: 0x0010F3B0 File Offset: 0x0010D5B0
	private void OnCoverExit(Collider collider)
	{
		if (collider == this.coverLeftCollider || collider == this.coverRightCollider)
		{
			this.currentColliders.Remove(collider);
		}
	}

	// Token: 0x06001FEB RID: 8171 RVA: 0x0010F3E4 File Offset: 0x0010D5E4
	private void OnBlow()
	{
		if (this.hasLoaded && this.currentColliders.Count <= 0 && !this.boyKilled)
		{
			this.SetBlowState();
		}
		else if (LevelGlobals.forcePushManager != null && ForcePushManager.getActiveZoneCount() > 0)
		{
			this.coverBottom.AddForceAtPosition(this.coverForceBlocked, this.coverForcePos.position, 1);
		}
	}

	// Token: 0x06001FEC RID: 8172 RVA: 0x0010F45C File Offset: 0x0010D65C
	private void OnLoadComplete()
	{
		this.coverTop.transform.position = this.loadTopComplete.position;
		this.coverTop.transform.rotation = this.loadTopComplete.rotation;
		this.coverBottom.transform.position = this.loadBottomComplete.position;
		this.coverBottom.transform.rotation = this.loadBottomComplete.rotation;
		this.hasLoaded = false;
		this.loadTimer = 2f;
	}

	// Token: 0x04003B03 RID: 15107
	public Collider coverLeftCollider;

	// Token: 0x04003B04 RID: 15108
	public Collider coverRightCollider;

	// Token: 0x04003B05 RID: 15109
	public CollisionEvents coverProbe;

	// Token: 0x04003B06 RID: 15110
	public GameObject safetyCoverRail;

	// Token: 0x04003B07 RID: 15111
	public GameObject backBlocker;

	// Token: 0x04003B08 RID: 15112
	public GameObject railColliders;

	// Token: 0x04003B09 RID: 15113
	public float boyForceDelay = 0.05f;

	// Token: 0x04003B0A RID: 15114
	public Vector3 force;

	// Token: 0x04003B0B RID: 15115
	public Rigidbody coverTop;

	// Token: 0x04003B0C RID: 15116
	public Rigidbody coverBottom;

	// Token: 0x04003B0D RID: 15117
	public Transform loadTopComplete;

	// Token: 0x04003B0E RID: 15118
	public Transform loadBottomComplete;

	// Token: 0x04003B0F RID: 15119
	public Transform coverForcePos;

	// Token: 0x04003B10 RID: 15120
	public Vector3 coverForceFree;

	// Token: 0x04003B11 RID: 15121
	public Vector3 coverForceBlocked;

	// Token: 0x04003B12 RID: 15122
	public AnimClipNode animStop;

	// Token: 0x04003B13 RID: 15123
	public Collider collidesWithCover;

	// Token: 0x04003B14 RID: 15124
	public Collider collidesWithCoverKillTransform;

	// Token: 0x04003B15 RID: 15125
	private SignalIn blow;

	// Token: 0x04003B16 RID: 15126
	private SignalIn loadComplete;

	// Token: 0x04003B17 RID: 15127
	private SignalOut killingBoy;

	// Token: 0x04003B18 RID: 15128
	private ForcePushMovingCover.State state;

	// Token: 0x04003B19 RID: 15129
	private float blowTimer;

	// Token: 0x04003B1A RID: 15130
	private float boyForceTimer;

	// Token: 0x04003B1B RID: 15131
	private List<Collider> currentColliders = new List<Collider>();

	// Token: 0x04003B1C RID: 15132
	private Boy boy;

	// Token: 0x04003B1D RID: 15133
	private Transform cameraProbe;

	// Token: 0x04003B1E RID: 15134
	private int coverTriggerEnterHandle = -1;

	// Token: 0x04003B1F RID: 15135
	private int coverTriggerExitHandle = -1;

	// Token: 0x04003B20 RID: 15136
	private bool hasLoaded;

	// Token: 0x04003B21 RID: 15137
	private float loadTimer = 2f;

	// Token: 0x04003B22 RID: 15138
	private bool boyKilled;

	// Token: 0x020004C4 RID: 1220
	private enum State
	{
		// Token: 0x04003B24 RID: 15140
		None,
		// Token: 0x04003B25 RID: 15141
		Blow,
		// Token: 0x04003B26 RID: 15142
		PostBlow
	}
}