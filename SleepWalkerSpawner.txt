using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x020000EA RID: 234
public class SleepWalkerSpawner : MonoBehaviour, IPreAwake
{
	// Token: 0x0600074C RID: 1868 RVA: 0x0005194C File Offset: 0x0004FB4C
	[LateProcessBuild(1)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		int childCount = this.sleepWalkerCollection.transform.childCount;
		this.modelTemplates = new GameObject[childCount];
		int i = 0;
		int num = childCount;
		while (i < num)
		{
			GameObject gameObject = this.sleepWalkerCollection.transform.GetChild(i).gameObject;
			this.modelTemplates[i] = gameObject;
			i++;
		}
		this.Generate();
	}

	// Token: 0x0600074D RID: 1869 RVA: 0x000519C4 File Offset: 0x0004FBC4
	public bool PreAwake(int callcount)
	{
		this.startWalking = SignalIn.Create("startWalking", base.gameObject, new Action(this.OnStartWalking));
		this.stopWalking = SignalIn.Create("stopWalking", base.gameObject, new Action(this.OnStopWalking));
		this.spawnNextTime = this.distanceBetween / this.walkingSpeed;
		this.spawnTimer = this.spawnNextTime;
		return true;
	}

	// Token: 0x0600074E RID: 1870 RVA: 0x00051A38 File Offset: 0x0004FC38
	private void Update()
	{
		float deltaTime = Time.deltaTime;
		int i = 0;
		int num = this.lineUp.Length;
		while (i < num)
		{
			this.lineUp[i].UpdateSleepWalker(deltaTime);
			i++;
		}
		this.initTimer -= deltaTime;
		if (this.isWalking)
		{
			this.spawnTimer -= deltaTime;
		}
		if (this.spawnTimer <= 0f)
		{
			this.spawnTimer = this.spawnNextTime + Random.Range(-this.spawnTimeRandom, this.spawnTimeRandom);
			this.SpawnNewFromPool();
		}
	}

	// Token: 0x0600074F RID: 1871 RVA: 0x00051AD0 File Offset: 0x0004FCD0
	private void Generate()
	{
		float num = 0f;
		Quaternion rotation = Quaternion.LookRotation(base.transform.right);
		List<SleepWalkerRandom> list = new List<SleepWalkerRandom>();
		this.startPosY = this.modelTemplates[0].transform.position.y;
		while (num < base.transform.lossyScale.x - this.distanceBetween)
		{
			this.GenerateSleepWalker(num, rotation, false, list);
			num += this.distanceBetween;
		}
		for (int i = 0; i < 5; i++)
		{
			this.GenerateSleepWalker(0f, rotation, true, list);
		}
		int j = 0;
		int num2 = this.modelTemplates.Length;
		while (j < num2)
		{
			GameObject obj = this.modelTemplates[j];
			PDUtilities.Destroy(obj);
			j++;
		}
		this.lineUp = list.ToArray();
		if (this.standIdle)
		{
			int k = 0;
			int num3 = this.lineUp.Length;
			while (k < num3)
			{
				this.lineUp[k].SetWaitState();
				k++;
			}
		}
	}

	// Token: 0x06000750 RID: 1872 RVA: 0x00051BF0 File Offset: 0x0004FDF0
	private void GenerateSleepWalker(float xCoord, Quaternion rotation, bool forPool, List<SleepWalkerRandom> list)
	{
		int num = this.previousModelIndex + 1;
		if (num == this.modelTemplates.Length)
		{
			num = 0;
		}
		this.previousModelIndex = num;
		GameObject gameObject = Object.Instantiate(this.modelTemplates[num], Vector3.zero, rotation) as GameObject;
		gameObject.transform.parent = this.sleepWalkerCollection.transform;
		SleepWalkerRandom component = gameObject.GetComponent<SleepWalkerRandom>();
		component.SetModelIndex(num);
		component.speed = this.walkingSpeed;
		if (this.standIdle)
		{
			component.standIdle = true;
		}
		list.Add(component);
		if (!forPool)
		{
			component.SetIsActive(true);
		}
		else
		{
			this.AddSleepwalkerToPool(gameObject);
			if (this.standIdle)
			{
				gameObject.SetActive(false);
			}
		}
		xCoord += Random.Range(-this.distanceRandomAdd * 0.5f, this.distanceRandomAdd * 0.5f);
		this.RandomizeSleepWalker(gameObject, xCoord);
	}

	// Token: 0x06000751 RID: 1873 RVA: 0x00051CD8 File Offset: 0x0004FED8
	private void RandomizeSleepWalker(GameObject sleepWalker, float xCoord)
	{
		Vector3 vector = base.transform.position;
		vector.y = this.startPosY;
		vector -= base.transform.right * base.transform.lossyScale.x * 0.5f;
		Vector3 position = vector + base.transform.right * xCoord;
		position.z += Random.Range(-0.15f, 0.15f);
		vector = this.sleepWalkerCollection.transform.InverseTransformPoint(vector);
		sleepWalker.transform.position = position;
		float num = Random.Range(-this.heightRandomScale, this.heightRandomScale);
		float num2 = Random.Range(-this.widthtRandomScale, this.widthtRandomScale);
		if (Mathf.Sign(num) != Mathf.Sign(num2))
		{
			num2 *= 0.5f;
		}
		Vector3 modelScale;
		modelScale..ctor(1f + num2, 1f + num, 1f);
		string idleAnim = string.Empty;
		if (this.idleAnimations.Count > 0)
		{
			idleAnim = this.idleAnimations[Random.Range(0, this.idleAnimations.Count)];
		}
		SleepWalkerRandom component = sleepWalker.GetComponent<SleepWalkerRandom>();
		component.walkAnim = this.walkAnimations[this.animationIndex];
		component.idleAnim = idleAnim;
		this.animationIndex += Random.Range(1, 3);
		if (this.animationIndex >= this.walkAnimations.Count)
		{
			this.animationIndex -= this.walkAnimations.Count;
		}
		component.InitializeSleepWalker(base.transform.lossyScale.x, vector, modelScale, this);
	}

	// Token: 0x06000752 RID: 1874 RVA: 0x00051EA0 File Offset: 0x000500A0
	public void SpawnNewFromPool()
	{
		if (this.standIdle)
		{
			return;
		}
		Vector3 vector = base.transform.position;
		vector.y = this.startPosY;
		vector -= base.transform.right * base.transform.lossyScale.x * 0.5f;
		vector += base.transform.right * Random.Range(-this.distanceRandomAdd * 0.5f, this.distanceRandomAdd * 0.5f);
		int num = Random.Range(0, this.modelsPool.Count);
		GameObject gameObject = null;
		for (int i = 0; i < 4; i++)
		{
			gameObject = this.modelsPool[num];
			if (gameObject.GetComponent<SleepWalkerRandom>().GetModelIndex() == this.previousUsedModelIndex)
			{
				num++;
				if (num >= this.modelsPool.Count)
				{
					num = 0;
				}
			}
		}
		this.previousUsedModelIndex = gameObject.GetComponent<SleepWalkerRandom>().GetModelIndex();
		this.modelsPool.Remove(gameObject);
		gameObject.GetComponent<SleepWalkerRandom>().SetIsActive(true);
		this.RandomizeSleepWalker(gameObject, 0f);
		gameObject.transform.position = vector;
	}

	// Token: 0x06000753 RID: 1875 RVA: 0x00051FE0 File Offset: 0x000501E0
	private void OnStartWalking()
	{
		this.isWalking = true;
		int i = 0;
		int num = this.lineUp.Length;
		while (i < num)
		{
			this.lineUp[i].SetMoveState();
			i++;
		}
	}

	// Token: 0x06000754 RID: 1876 RVA: 0x0005201C File Offset: 0x0005021C
	private void OnStopWalking()
	{
		this.isWalking = false;
		int i = 0;
		int num = this.lineUp.Length;
		while (i < num)
		{
			this.lineUp[i].SetWaitState();
			i++;
		}
	}

	// Token: 0x06000755 RID: 1877 RVA: 0x00052058 File Offset: 0x00050258
	public void AddSleepwalkerToPool(GameObject oldSleepWalker)
	{
		this.modelsPool.Add(oldSleepWalker);
		oldSleepWalker.GetComponent<SleepWalkerRandom>().SetIsActive(false);
	}

	// Token: 0x04000CAF RID: 3247
	public GameObject sleepWalkerCollection;

	// Token: 0x04000CB0 RID: 3248
	public GameObject sleepWalkerATemplate;

	// Token: 0x04000CB1 RID: 3249
	public List<string> walkAnimations = new List<string>();

	// Token: 0x04000CB2 RID: 3250
	public List<string> idleAnimations = new List<string>();

	// Token: 0x04000CB3 RID: 3251
	public float walkDelayRandomAdd = 0.1f;

	// Token: 0x04000CB4 RID: 3252
	public float heightRandomScale = 0.2f;

	// Token: 0x04000CB5 RID: 3253
	public float widthtRandomScale = 0.2f;

	// Token: 0x04000CB6 RID: 3254
	public float distanceBetween = 2.5f;

	// Token: 0x04000CB7 RID: 3255
	public float distanceRandomAdd = 0.5f;

	// Token: 0x04000CB8 RID: 3256
	public float spawnTimeRandom = 0.18f;

	// Token: 0x04000CB9 RID: 3257
	public float walkingSpeed = 0.8f;

	// Token: 0x04000CBA RID: 3258
	public bool standIdle;

	// Token: 0x04000CBB RID: 3259
	public bool debug;

	// Token: 0x04000CBC RID: 3260
	private float initTimer = 0.1f;

	// Token: 0x04000CBD RID: 3261
	private bool doDelayedStart;

	// Token: 0x04000CBE RID: 3262
	private bool didDelayedStart;

	// Token: 0x04000CBF RID: 3263
	private float spawnNextTime;

	// Token: 0x04000CC0 RID: 3264
	private float spawnTimer;

	// Token: 0x04000CC1 RID: 3265
	private int previousUsedModelIndex;

	// Token: 0x04000CC2 RID: 3266
	private SignalIn startWalking;

	// Token: 0x04000CC3 RID: 3267
	private SignalIn stopWalking;

	// Token: 0x04000CC4 RID: 3268
	private bool isWalking = true;

	// Token: 0x04000CC5 RID: 3269
	private List<string> animationSelectionList = new List<string>();

	// Token: 0x04000CC6 RID: 3270
	[SerializeField]
	[HideInInspector]
	private float startPosY;

	// Token: 0x04000CC7 RID: 3271
	[HideInInspector]
	[SerializeField]
	private int previousModelIndex = -1;

	// Token: 0x04000CC8 RID: 3272
	[SerializeField]
	[HideInInspector]
	private int animationIndex;

	// Token: 0x04000CC9 RID: 3273
	[SerializeField]
	[HideInInspector]
	private List<GameObject> modelsPool = new List<GameObject>();

	// Token: 0x04000CCA RID: 3274
	[SerializeField]
	[HideInInspector]
	private SleepWalkerRandom[] lineUp;

	// Token: 0x04000CCB RID: 3275
	[SerializeField]
	[HideInInspector]
	private GameObject[] modelTemplates;

	// Token: 0x04000CCC RID: 3276
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;
}
