using System;
using UnityEngine;

// Token: 0x02000443 RID: 1091
public class PigFightSunFade : MonoBehaviour, IPreAwake
{
	// Token: 0x06001C94 RID: 7316 RVA: 0x000F918C File Offset: 0x000F738C
	public bool PreAwake(int callcount)
	{
		this.startFade = SignalIn.Create("startFade", base.gameObject, new Action(this.OnStartFade));
		return true;
	}

	// Token: 0x06001C95 RID: 7317 RVA: 0x000F91B4 File Offset: 0x000F73B4
	private void Start()
	{
		int num = this.materialInstances.Length;
		this.miColorProperties = new MaterialInstance.ColorProperty[num];
		this.startColor = new Color[num];
		for (int i = 0; i < num; i++)
		{
			MaterialInstance materialInstance = this.materialInstances[i];
			MaterialInstance.ColorProperty orAddColorProperty = materialInstance.GetOrAddColorProperty("_Color");
			Color colorValue = materialInstance.GetColorValue(orAddColorProperty);
			colorValue.a = this.bloomStartAlpha;
			materialInstance.SetColorProperty(orAddColorProperty, colorValue);
			this.miColorProperties[i] = orAddColorProperty;
			this.startColor[i] = colorValue;
		}
	}

	// Token: 0x06001C96 RID: 7318 RVA: 0x000F9244 File Offset: 0x000F7444
	private void OnStartFade()
	{
		this.fading = true;
	}

	// Token: 0x06001C97 RID: 7319 RVA: 0x000F9250 File Offset: 0x000F7450
	private void Update()
	{
		if (this.fading)
		{
			this.fadeTimer += Time.deltaTime;
			if (this.fadeTimer >= this.fadeDuration)
			{
				this.fadeTimer = this.fadeDuration;
				this.fading = false;
			}
			float num = this.fadeCurve.Evaluate(this.fadeTimer / this.fadeDuration);
			if (this.lightObj)
			{
				float intensity = this.lightStartIntensity + (this.lightEndIntensity - this.lightStartIntensity) * num;
				this.lightObj.intensity = intensity;
			}
			float a = this.bloomStartAlpha + (this.bloomEndAlpha - this.bloomStartAlpha) * num;
			int i = 0;
			int num2 = this.materialInstances.Length;
			while (i < num2)
			{
				Color value = this.startColor[i];
				value.a = a;
				this.materialInstances[i].SetColorProperty(this.miColorProperties[i], value);
				i++;
			}
		}
	}

	// Token: 0x04003457 RID: 13399
	public float fadeDuration = 4f;

	// Token: 0x04003458 RID: 13400
	public AnimationCurve fadeCurve;

	// Token: 0x04003459 RID: 13401
	public Light lightObj;

	// Token: 0x0400345A RID: 13402
	public float lightStartIntensity;

	// Token: 0x0400345B RID: 13403
	public float lightEndIntensity;

	// Token: 0x0400345C RID: 13404
	public MaterialInstance[] materialInstances;

	// Token: 0x0400345D RID: 13405
	public float bloomStartAlpha;

	// Token: 0x0400345E RID: 13406
	public float bloomEndAlpha;

	// Token: 0x0400345F RID: 13407
	private SignalIn startFade;

	// Token: 0x04003460 RID: 13408
	private bool fading;

	// Token: 0x04003461 RID: 13409
	private float fadeTimer;

	// Token: 0x04003462 RID: 13410
	private MaterialInstance.ColorProperty[] miColorProperties;

	// Token: 0x04003463 RID: 13411
	private Color[] startColor;
}
