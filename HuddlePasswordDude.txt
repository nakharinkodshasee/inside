using System;
using System.Diagnostics;
using UnityEngine;

// Token: 0x02000468 RID: 1128
public class HuddlePasswordDude : MonoBehaviour, IPreAwake
{
	// Token: 0x06001D9F RID: 7583 RVA: 0x000FF97C File Offset: 0x000FDB7C
	public bool PreAwake(int callcount)
	{
		this.start = SignalIn.Create("start", base.gameObject, new Action(this.SetIntroState));
		this.openDoor = SignalOut.Create("openDoor", base.gameObject);
		this.reachDoor = SignalOut.Create("reachDoor", base.gameObject);
		return true;
	}

	// Token: 0x06001DA0 RID: 7584 RVA: 0x000FF9D8 File Offset: 0x000FDBD8
	private void Start()
	{
		int i = 0;
		int num = this.approaches.Length;
		while (i < num)
		{
			HuddlePasswordDude.Approach approach = this.approaches[i];
			AnimationState animationState = this.animDude[approach.animApproach.name];
			animationState.wrapMode = 8;
			approach.animApproachState = animationState;
			i++;
		}
		this.animRunInitialState = this.animDude[this.animRunInitial.name];
		this.animRunInitialState.wrapMode = 8;
		this.animDirectState = this.animDude[this.animDirect.name];
		this.animDirectState.wrapMode = 8;
		this.animSuccessState = this.animDude[this.animSuccess.name];
		this.animSuccessState.wrapMode = 8;
		this.SetWaitState();
	}

	// Token: 0x06001DA1 RID: 7585 RVA: 0x000FFAAC File Offset: 0x000FDCAC
	private void SetWaitState()
	{
		this.animDude.Play(this.animWaitAtStairs.name);
		this.state = HuddlePasswordDude.State.Wait;
	}

	// Token: 0x06001DA2 RID: 7586 RVA: 0x000FFACC File Offset: 0x000FDCCC
	private void SetIntroState()
	{
		if (this.state != HuddlePasswordDude.State.Wait)
		{
			return;
		}
		this.animDude.CrossFade(this.animRunInitial.name);
		this.state = HuddlePasswordDude.State.Intro;
	}

	// Token: 0x06001DA3 RID: 7587 RVA: 0x000FFB04 File Offset: 0x000FDD04
	private void IntroState()
	{
		if (this.animRunInitialState.time > this.animRunInitialState.length - 0.3f)
		{
			this.hideTimer = Random.Range(this.hideMin, this.hideMax);
			this.SetDirectState();
		}
	}

	// Token: 0x06001DA4 RID: 7588 RVA: 0x000FFB50 File Offset: 0x000FDD50
	private void SetDirectState()
	{
		this.animDude.CrossFade(this.animDirect.name);
		this.state = HuddlePasswordDude.State.Direct;
	}

	// Token: 0x06001DA5 RID: 7589 RVA: 0x000FFB70 File Offset: 0x000FDD70
	private void DirectState()
	{
		if (this.animDirectState.time > this.animDirectState.length - 0.3f)
		{
			this.SetIdleState();
			return;
		}
		if (this.SafeCheck())
		{
			this.hideTimer -= Time.deltaTime;
			if (this.hideTimer <= 0f)
			{
				this.SetApproachState();
			}
		}
	}

	// Token: 0x06001DA6 RID: 7590 RVA: 0x000FFBD8 File Offset: 0x000FDDD8
	private void SetIdleState()
	{
		this.animDude.CrossFade(this.animIdle.name);
		this.idleTimer = Random.Range(this.directIntervalMin, this.directIntervalMax);
		this.state = HuddlePasswordDude.State.Idle;
	}

	// Token: 0x06001DA7 RID: 7591 RVA: 0x000FFC1C File Offset: 0x000FDE1C
	private void IdleState()
	{
		this.idleTimer -= Time.deltaTime;
		if (this.idleTimer < 0f)
		{
			this.SetDirectState();
			return;
		}
		if (this.SafeCheck())
		{
			this.hideTimer -= Time.deltaTime;
			if (this.hideTimer <= 0f)
			{
				this.SetApproachState();
			}
		}
	}

	// Token: 0x06001DA8 RID: 7592 RVA: 0x000FFC88 File Offset: 0x000FDE88
	private void SetApproachState()
	{
		int num = Random.Range(0, this.approaches.Length);
		this.currentApproach = this.approaches[num];
		this.animDude.CrossFade(this.currentApproach.animApproach.name);
		this.state = HuddlePasswordDude.State.Approach;
	}

	// Token: 0x06001DA9 RID: 7593 RVA: 0x000FFCD4 File Offset: 0x000FDED4
	private void ApproachState()
	{
		if (!this.SafeCheck())
		{
			this.SetScaredState();
			return;
		}
		if (this.currentApproach.ConsoleReached())
		{
			this.SetConsoleState();
		}
	}

	// Token: 0x06001DAA RID: 7594 RVA: 0x000FFD0C File Offset: 0x000FDF0C
	private void SetConsoleState()
	{
		this.animDude.CrossFade(this.animConsoleWork.name);
		this.workTimer = this.workDuration;
		this.reachDoor.Signal();
		this.state = HuddlePasswordDude.State.Console;
	}

	// Token: 0x06001DAB RID: 7595 RVA: 0x000FFD50 File Offset: 0x000FDF50
	private void ConsoleState()
	{
		if (!this.SafeCheck())
		{
			AnimationClip lastFleeAnimation = this.currentApproach.GetLastFleeAnimation();
			this.SetFleeState(lastFleeAnimation);
			return;
		}
		this.workTimer -= Time.deltaTime;
		if (this.workTimer <= 0f)
		{
			this.SetSuccessState();
		}
	}

	// Token: 0x06001DAC RID: 7596 RVA: 0x000FFDA4 File Offset: 0x000FDFA4
	private void SetScaredState()
	{
		this.state = HuddlePasswordDude.State.Scared;
	}

	// Token: 0x06001DAD RID: 7597 RVA: 0x000FFDB0 File Offset: 0x000FDFB0
	private void ScaredState()
	{
		AnimationClip animationClip = this.currentApproach.FindFleeAnimation();
		if (animationClip != null)
		{
			this.SetFleeState(animationClip);
		}
	}

	// Token: 0x06001DAE RID: 7598 RVA: 0x000FFDDC File Offset: 0x000FDFDC
	private void SetFleeState(AnimationClip animFlee)
	{
		this.currentFleeAnimState = this.animDude[animFlee.name];
		this.currentFleeAnimState.wrapMode = 8;
		this.animDude.CrossFade(this.currentFleeAnimState.name);
		this.state = HuddlePasswordDude.State.Flee;
	}

	// Token: 0x06001DAF RID: 7599 RVA: 0x000FFE2C File Offset: 0x000FE02C
	private void FleeState()
	{
		if (this.currentFleeAnimState.time > this.currentFleeAnimState.length - 0.3f)
		{
			this.hideTimer = Random.Range(this.hideMin, this.hideMax);
			this.SetIdleState();
		}
	}

	// Token: 0x06001DB0 RID: 7600 RVA: 0x000FFE78 File Offset: 0x000FE078
	private void SetSuccessState()
	{
		this.openDoor.Signal();
		this.animDude.CrossFade(this.animSuccess.name);
		this.state = HuddlePasswordDude.State.Success;
	}

	// Token: 0x06001DB1 RID: 7601 RVA: 0x000FFEA4 File Offset: 0x000FE0A4
	private void SuccessState()
	{
		if (this.animSuccessState.time > this.animSuccessState.length - 0.3f)
		{
			this.animDude.CrossFade(this.animSuccessIdle.name);
			this.state = HuddlePasswordDude.State.Complete;
		}
	}

	// Token: 0x06001DB2 RID: 7602 RVA: 0x000FFEF0 File Offset: 0x000FE0F0
	private void Update()
	{
		switch (this.state)
		{
		case HuddlePasswordDude.State.Intro:
			this.IntroState();
			break;
		case HuddlePasswordDude.State.Direct:
			this.DirectState();
			break;
		case HuddlePasswordDude.State.Idle:
			this.IdleState();
			break;
		case HuddlePasswordDude.State.Approach:
			this.ApproachState();
			break;
		case HuddlePasswordDude.State.Console:
			this.ConsoleState();
			break;
		case HuddlePasswordDude.State.Scared:
			this.ScaredState();
			break;
		case HuddlePasswordDude.State.Flee:
			this.FleeState();
			break;
		case HuddlePasswordDude.State.Success:
			this.SuccessState();
			break;
		}
		if (this.debug && EditorMode.DebugLayerActive(EditorMode.EDebugLayers.Gameplay) && this.currentApproach != null && this.currentApproach.animApproach != null && this.currentApproach.animApproachState != null)
		{
			float num = this.currentApproach.animApproachState.time * this.currentApproach.animApproach.frameRate;
		}
	}

	// Token: 0x06001DB3 RID: 7603 RVA: 0x000FFFF8 File Offset: 0x000FE1F8
	private bool SafeCheck()
	{
		bool flag = ScriptGlobals.huddle.pos.x < this.safePos.position.x;
		return (!this.debug || !GameInput.rawAction) && flag;
	}

	// Token: 0x06001DB4 RID: 7604 RVA: 0x00100048 File Offset: 0x000FE248
	[Conditional("PARANOID")]
	private void DataConsistencyTest()
	{
		int i = 0;
		int num = this.approaches.Length;
		while (i < num)
		{
			HuddlePasswordDude.Approach approach = this.approaches[i];
			AnimationState animationState = this.animDude[approach.animApproach.name];
			if (approach.animApproachState != animationState)
			{
			}
			i++;
		}
	}

	// Token: 0x0400367D RID: 13949
	public float hideMin = 0.25f;

	// Token: 0x0400367E RID: 13950
	public float hideMax = 0.5f;

	// Token: 0x0400367F RID: 13951
	public float directIntervalMin = 5f;

	// Token: 0x04003680 RID: 13952
	public float directIntervalMax = 6f;

	// Token: 0x04003681 RID: 13953
	public float workDuration = 5f;

	// Token: 0x04003682 RID: 13954
	public Transform safePos;

	// Token: 0x04003683 RID: 13955
	public Animation animDude;

	// Token: 0x04003684 RID: 13956
	public AnimationClip animWaitAtStairs;

	// Token: 0x04003685 RID: 13957
	public AnimationClip animRunInitial;

	// Token: 0x04003686 RID: 13958
	public AnimationClip animDirect;

	// Token: 0x04003687 RID: 13959
	public AnimationClip animIdle;

	// Token: 0x04003688 RID: 13960
	public AnimationClip animConsoleWork;

	// Token: 0x04003689 RID: 13961
	public AnimationClip animSuccess;

	// Token: 0x0400368A RID: 13962
	public AnimationClip animSuccessIdle;

	// Token: 0x0400368B RID: 13963
	public HuddlePasswordDude.Approach[] approaches;

	// Token: 0x0400368C RID: 13964
	public bool debug;

	// Token: 0x0400368D RID: 13965
	private SignalIn start;

	// Token: 0x0400368E RID: 13966
	private SignalOut openDoor;

	// Token: 0x0400368F RID: 13967
	private SignalOut reachDoor;

	// Token: 0x04003690 RID: 13968
	private HuddlePasswordDude.State state;

	// Token: 0x04003691 RID: 13969
	private HuddlePasswordDude.Approach currentApproach;

	// Token: 0x04003692 RID: 13970
	private float idleTimer;

	// Token: 0x04003693 RID: 13971
	private float hideTimer;

	// Token: 0x04003694 RID: 13972
	private float workTimer;

	// Token: 0x04003695 RID: 13973
	private AnimationState animRunInitialState;

	// Token: 0x04003696 RID: 13974
	private AnimationState animDirectState;

	// Token: 0x04003697 RID: 13975
	private AnimationState animSuccessState;

	// Token: 0x04003698 RID: 13976
	private AnimationState currentFleeAnimState;

	// Token: 0x02000469 RID: 1129
	private enum State
	{
		// Token: 0x0400369A RID: 13978
		None,
		// Token: 0x0400369B RID: 13979
		Wait,
		// Token: 0x0400369C RID: 13980
		Intro,
		// Token: 0x0400369D RID: 13981
		Direct,
		// Token: 0x0400369E RID: 13982
		Idle,
		// Token: 0x0400369F RID: 13983
		Approach,
		// Token: 0x040036A0 RID: 13984
		Console,
		// Token: 0x040036A1 RID: 13985
		Scared,
		// Token: 0x040036A2 RID: 13986
		Flee,
		// Token: 0x040036A3 RID: 13987
		Success,
		// Token: 0x040036A4 RID: 13988
		Complete
	}

	// Token: 0x0200046A RID: 1130
	[Serializable]
	public class Approach
	{
		// Token: 0x06001DB6 RID: 7606 RVA: 0x001000AC File Offset: 0x000FE2AC
		public AnimationClip FindFleeAnimation()
		{
			float num = this.animApproachState.time * this.animApproach.frameRate;
			int i = 0;
			int num2 = this.fleePoints.Length;
			while (i < num2)
			{
				HuddlePasswordDude.FleePoint fleePoint = this.fleePoints[i];
				if (num >= fleePoint.frameMin && num <= fleePoint.frameMax)
				{
					return fleePoint.animFlee;
				}
				i++;
			}
			return null;
		}

		// Token: 0x06001DB7 RID: 7607 RVA: 0x00100118 File Offset: 0x000FE318
		public AnimationClip GetLastFleeAnimation()
		{
			return this.fleePoints[this.fleePoints.Length - 1].animFlee;
		}

		// Token: 0x06001DB8 RID: 7608 RVA: 0x00100130 File Offset: 0x000FE330
		public bool ConsoleReached()
		{
			return this.animApproachState.time > this.animApproachState.length - 0.3f;
		}

		// Token: 0x040036A5 RID: 13989
		public AnimationClip animApproach;

		// Token: 0x040036A6 RID: 13990
		public AnimationState animApproachState;

		// Token: 0x040036A7 RID: 13991
		public HuddlePasswordDude.FleePoint[] fleePoints;
	}

	// Token: 0x0200046B RID: 1131
	[Serializable]
	public class FleePoint
	{
		// Token: 0x040036A8 RID: 13992
		public AnimationClip animFlee;

		// Token: 0x040036A9 RID: 13993
		public float frameMin;

		// Token: 0x040036AA RID: 13994
		public float frameMax;
	}
}
