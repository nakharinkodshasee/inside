using System;
using UnityEngine;

// Token: 0x02000590 RID: 1424
public class MindHatLimitControl : MonoBehaviour
{
	// Token: 0x0600247A RID: 9338 RVA: 0x0012CA74 File Offset: 0x0012AC74
	private void Start()
	{
		this.boy = ScriptGlobals.boy;
	}

	// Token: 0x0600247B RID: 9339 RVA: 0x0012CA84 File Offset: 0x0012AC84
	public void EnableLimit()
	{
		this.limitEnabled = true;
	}

	// Token: 0x0600247C RID: 9340 RVA: 0x0012CA90 File Offset: 0x0012AC90
	public void DisableLimit()
	{
		this.limitEnabled = false;
	}

	// Token: 0x0600247D RID: 9341 RVA: 0x0012CA9C File Offset: 0x0012AC9C
	private void FixedUpdate()
	{
		if (this.dudeSpawner.GetBoy() == null)
		{
			this.receiver = null;
			return;
		}
		if (!this.limitEnabled || !this.boy)
		{
			return;
		}
		Boy boy = this.dudeSpawner.GetBoy();
		if (boy)
		{
			this.receiver = boy.GetComponent<MindHatReceiver>();
		}
		if (this.receiver == null || !this.receiver.ControlIsActive())
		{
			return;
		}
		if (this.receiver.GetHangingInHat() != null)
		{
			this.receiver.SetMoveSpeed(1f);
		}
		else
		{
			float num = this.receiver.gameObject.transform.position.x - this.controller.transform.position.x;
			float x = this.boy.input.stick.x;
			float num2 = 1f;
			if (num > this.maxDistance && x > 0f)
			{
				num2 = 1f - (num - this.maxDistance) * this.fallOff;
			}
			else if (num < -this.maxDistance && x < 0f)
			{
				num2 = 1f - (num + this.maxDistance) * -this.fallOff;
			}
			if (this.mindhatWagonGuarantee != null && this.mindhatWagonGuarantee.position.x < boy.pos.x - 1f && num2 < 0.6f && BoyUtils.GetCurrentGrabBody(boy) == null)
			{
				num2 = 0.6f;
			}
			num2 = Mathf.Clamp(num2, 0f, 1f);
			float num3 = 1f;
			if (this.limitYAswell)
			{
				float num4 = this.receiver.gameObject.transform.position.y - this.controller.transform.position.y;
				float y = this.boy.input.stick.y;
				if (num4 > this.maxYDistance && y > 0f)
				{
					num3 = 1f - (num4 - this.maxYDistance) * this.fallOff;
				}
				else if (num4 < -this.maxYDistance && y < 0f)
				{
					num3 = 1f - (num4 + this.maxYDistance) * -this.fallOff;
				}
				num3 = Mathf.Clamp(num3, 0f, 1f);
			}
			num2 = Mathf.Min(num2, num3);
			this.receiver.SetMoveSpeed(num2);
		}
	}

	// Token: 0x040042E7 RID: 17127
	public GameObject controller;

	// Token: 0x040042E8 RID: 17128
	public float maxDistance = 5f;

	// Token: 0x040042E9 RID: 17129
	public float fallOff = 0.2f;

	// Token: 0x040042EA RID: 17130
	public bool limitEnabled = true;

	// Token: 0x040042EB RID: 17131
	public MindHatDudeSpawner dudeSpawner;

	// Token: 0x040042EC RID: 17132
	public bool limitYAswell;

	// Token: 0x040042ED RID: 17133
	public float maxYDistance = 5f;

	// Token: 0x040042EE RID: 17134
	public Transform mindhatWagonGuarantee;

	// Token: 0x040042EF RID: 17135
	private MindHatReceiver receiver;

	// Token: 0x040042F0 RID: 17136
	private Boy boy;
}