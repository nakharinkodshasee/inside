using System;
using UnityEngine;

// Token: 0x0200046F RID: 1135
public class HuddleTrapChainAudio : AudioTriggerBehaviour, IPlayerBehaviour, IContinuousPlayerBehaviour
{
	// Token: 0x06001DCC RID: 7628 RVA: 0x00100A50 File Offset: 0x000FEC50
	[EarlyProcessBuild(0)]
	private void OnPreprocess()
	{
		if (this.preprocessed)
		{
			return;
		}
		GameObject defaultAudioGameObject = base.GetDefaultAudioGameObject(null);
		this.akGameObj = AudioUtils.EnsureAkGameObj(defaultAudioGameObject, this);
		this.player = new ContinuousEventPlayer(this.akGameObj, this.playerConfig, this.eventTypeValue != AudioEventNameType.None, base.GetPrefix(), "twirl", "phy_rope", 20f, this.eventTypeValue == AudioEventNameType.Test);
		this.preprocessed = true;
	}

	// Token: 0x06001DCD RID: 7629 RVA: 0x00100AC8 File Offset: 0x000FECC8
	protected override void Awake()
	{
		base.Awake();
		if (!this.preprocessed)
		{
			this.OnPreprocess();
		}
		SoundEngine.Switches.climbMaterial.SetFast("chain", this.akGameObj);
	}

	// Token: 0x06001DCE RID: 7630 RVA: 0x00100B04 File Offset: 0x000FED04
	private float GetVelocity()
	{
		return (this.chainBottom.angularVelocity.magnitude + this.chainTop.angularVelocity.magnitude) / 2f;
	}

	// Token: 0x06001DCF RID: 7631 RVA: 0x00100B40 File Offset: 0x000FED40
	private void FixedUpdate()
	{
		float speed = Mathf.InverseLerp(0f, 25f, this.GetVelocity()) * 100f;
		this.player.OnUpdate(this.playerConfig, 0f);
		this.player.SetValue(speed, EffectMaterial.Material.None);
	}

	// Token: 0x06001DD0 RID: 7632 RVA: 0x00100B8C File Offset: 0x000FED8C
	private void OnDisable()
	{
		this.player.StopSound();
	}

	// Token: 0x06001DD1 RID: 7633 RVA: 0x00100B9C File Offset: 0x000FED9C
	public string[] GetEvents()
	{
		return ContinuousEventPlayer.GetEvents(base.playEvents, base.GetPrefix(), "twirl", base.useTestEvents);
	}

	// Token: 0x06001DD2 RID: 7634 RVA: 0x00100BC8 File Offset: 0x000FEDC8
	public string[] GetRTPCs()
	{
		return ContinuousEventPlayer.GetRTPCs(base.GetPrefix(), "phy_rope", base.useTestEvents);
	}

	// Token: 0x06001DD3 RID: 7635 RVA: 0x00100BE0 File Offset: 0x000FEDE0
	public ContinuousEventPlayer.Config GetPlayerConfig()
	{
		return this.playerConfig;
	}

	// Token: 0x06001DD4 RID: 7636 RVA: 0x00100BE8 File Offset: 0x000FEDE8
	public void Reset()
	{
		this.player.Reset();
	}

	// Token: 0x06001DD5 RID: 7637 RVA: 0x00100BF8 File Offset: 0x000FEDF8
	virtual GameObject get_gameObject()
	{
		return base.gameObject;
	}

	// Token: 0x06001DD6 RID: 7638 RVA: 0x00100C00 File Offset: 0x000FEE00
	virtual AudioEventNameType get_eventNameType()
	{
		return base.eventNameType;
	}

	// Token: 0x06001DD7 RID: 7639 RVA: 0x00100C08 File Offset: 0x000FEE08
	virtual void set_eventNameType(AudioEventNameType value)
	{
		base.eventNameType = value;
	}

	// Token: 0x06001DD8 RID: 7640 RVA: 0x00100C14 File Offset: 0x000FEE14
	virtual string get_prefix()
	{
		return base.prefix;
	}

	// Token: 0x06001DD9 RID: 7641 RVA: 0x00100C1C File Offset: 0x000FEE1C
	virtual void set_prefix(string value)
	{
		base.prefix = value;
	}

	// Token: 0x06001DDA RID: 7642 RVA: 0x00100C28 File Offset: 0x000FEE28
	virtual string GetPrefix()
	{
		return base.GetPrefix();
	}

	// Token: 0x040036D0 RID: 14032
	private const string eventNameStub = "twirl";

	// Token: 0x040036D1 RID: 14033
	private const string rtpcNameStub = "phy_rope";

	// Token: 0x040036D2 RID: 14034
	public Rigidbody chainTop;

	// Token: 0x040036D3 RID: 14035
	public Rigidbody chainBottom;

	// Token: 0x040036D4 RID: 14036
	public ContinuousEventPlayer.Config playerConfig = new ContinuousEventPlayer.Config(1f, 15f, 0, 0);

	// Token: 0x040036D5 RID: 14037
	private float rtpc;

	// Token: 0x040036D6 RID: 14038
	private bool isPlaying;

	// Token: 0x040036D7 RID: 14039
	[SerializeField]
	private ContinuousEventPlayer player;

	// Token: 0x040036D8 RID: 14040
	[SerializeField]
	private bool preprocessed;

	// Token: 0x040036D9 RID: 14041
	[SerializeField]
	private AkGameObj akGameObj;
}