using System;
using UnityEngine;

// Token: 0x02000354 RID: 852
[ExecuteInEditMode]
public class ParticleSpeedScale : UmbrellaBehaviour<ParticleSpeedScale>, IPreAwake
{
	// Token: 0x06001792 RID: 6034 RVA: 0x000CDF84 File Offset: 0x000CC184
	public bool PreAwake(int callcount)
	{
		this.matinstance = base.gameObject.GetComponent<MaterialInstance>();
		this.matscaleproperty = this.matinstance.GetOrAddVectorProperty("_ParticlePosScale");
		this.matspeedproperty = this.matinstance.GetOrAddFloatProperty("_ParticleSpeed");
		this.mattoggle = this.matinstance.GetOrAddVectorProperty("_SpeedScaleToggle");
		this.particleSys = base.GetComponent<ParticleSystem>();
		this.preAwoken = true;
		this.Enable();
		return true;
	}

	// Token: 0x06001793 RID: 6035 RVA: 0x000CE000 File Offset: 0x000CC200
	protected override void OnEnable()
	{
		if (!this.preAwoken)
		{
			this.PreAwake(0);
		}
		base.OnEnable();
	}

	// Token: 0x06001794 RID: 6036 RVA: 0x000CE01C File Offset: 0x000CC21C
	private void Enable()
	{
		if (this.setScale)
		{
			this.SetScale(true);
		}
		else if (!this.resetScale)
		{
			this.ResetScale();
		}
		if (this.setSpeed)
		{
			this.SetSpeed();
		}
		else if (!this.resetSpeed)
		{
			this.ResetSpeed();
		}
	}

	// Token: 0x06001795 RID: 6037 RVA: 0x000CE078 File Offset: 0x000CC278
	public void UmbrellaUpdate()
	{
		if (this.setScale)
		{
			this.SetScale(false);
		}
		else if (!this.resetScale)
		{
			this.ResetScale();
		}
		if (this.setSpeed)
		{
			this.SetSpeed();
		}
		else if (!this.resetSpeed)
		{
			this.ResetSpeed();
		}
		this.SetMatToggles();
	}

	// Token: 0x06001796 RID: 6038 RVA: 0x000CE0DC File Offset: 0x000CC2DC
	private void SetScale(bool skiphaschanged)
	{
		if (!base.transform.ConsumeChangedBits(4) && !skiphaschanged)
		{
			return;
		}
		float x = base.transform.localScale.x;
		base.transform.localScale = new Vector3(x, x, x);
		Vector3 position = base.transform.position;
		Vector3 lossyScale = base.transform.lossyScale;
		float num = (lossyScale.x + lossyScale.y + lossyScale.z) / 3f;
		this.matinstance.SetVectorProperty(this.matscaleproperty, new Vector4(position.x, position.y, position.z, num));
		this.resetScale = false;
	}

	// Token: 0x06001797 RID: 6039 RVA: 0x000CE198 File Offset: 0x000CC398
	private void ResetScale()
	{
		this.matinstance.SetVectorProperty(this.matscaleproperty, new Vector4(0f, 0f, 0f, 1f));
		this.resetScale = true;
	}

	// Token: 0x06001798 RID: 6040 RVA: 0x000CE1CC File Offset: 0x000CC3CC
	private void SetSpeed()
	{
		this.particleSys.playbackSpeed = this.speed;
		this.matinstance.SetFloatProperty(this.matspeedproperty, this.speed);
		this.resetSpeed = false;
	}

	// Token: 0x06001799 RID: 6041 RVA: 0x000CE200 File Offset: 0x000CC400
	private void ResetSpeed()
	{
		this.particleSys.playbackSpeed = 1f;
		this.matinstance.SetFloatProperty(this.matspeedproperty, 1f);
		this.resetSpeed = true;
	}

	// Token: 0x0600179A RID: 6042 RVA: 0x000CE230 File Offset: 0x000CC430
	private void SetMatToggles()
	{
		Vector2 vector;
		vector.x = Convert.ToSingle(this.setScale);
		vector.y = Convert.ToSingle(this.setSpeed);
		this.matinstance.SetVectorProperty(this.mattoggle, vector);
	}

	// Token: 0x04002A23 RID: 10787
	public bool setScale = true;

	// Token: 0x04002A24 RID: 10788
	public bool setSpeed = true;

	// Token: 0x04002A25 RID: 10789
	[Range(0.1f, 10f)]
	public float speed = 1f;

	// Token: 0x04002A26 RID: 10790
	private bool resetScale = true;

	// Token: 0x04002A27 RID: 10791
	private bool resetSpeed = true;

	// Token: 0x04002A28 RID: 10792
	private MaterialInstance matinstance;

	// Token: 0x04002A29 RID: 10793
	private MaterialInstance.VectorProperty matscaleproperty;

	// Token: 0x04002A2A RID: 10794
	private MaterialInstance.FloatProperty matspeedproperty;

	// Token: 0x04002A2B RID: 10795
	private MaterialInstance.VectorProperty mattoggle;

	// Token: 0x04002A2C RID: 10796
	private ParticleSystem particleSys;

	// Token: 0x04002A2D RID: 10797
	private bool preAwoken;
}
