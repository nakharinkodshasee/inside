using System;
using UnityEngine;

// Token: 0x02000011 RID: 17
public class AlbinoLiftHuddleDetector : DefaultBoyInput, IPreAwake
{
	// Token: 0x060000E7 RID: 231 RVA: 0x00010D3C File Offset: 0x0000EF3C
	public bool PreAwake(int callcount)
	{
		this.huddleLifted = SignalOut.Create("huddleLifted", base.gameObject);
		this.huddleNotLifted = SignalOut.Create("huddleNotLifted", base.gameObject);
		return true;
	}

	// Token: 0x17000005 RID: 5
	// (get) Token: 0x060000E8 RID: 232 RVA: 0x00010D78 File Offset: 0x0000EF78
	public override vector2f stick
	{
		get
		{
			float num = Mathf.Clamp(ScriptGlobals.huddle.pos.x - this.takeOverControlPoint.position.x, 0.1f, 0.5f);
			ScriptGlobals.huddle.AddVelocity(Vector3.left * (Time.deltaTime * num));
			vector2f stick = base.stick;
			if (stick.y > 0.5f && stick.x < 0.5f)
			{
				return new vector2f(-0.1f, 1f);
			}
			return stick;
		}
	}

	// Token: 0x060000E9 RID: 233 RVA: 0x00010E10 File Offset: 0x0000F010
	private void Update()
	{
		if (!(ScriptGlobals.mainCharacter is Huddle))
		{
			return;
		}
		bool flag = AlbinoGroupManager.mInstance.IsInAlbinoJumpState() && ScriptGlobals.mainCharacter is Huddle;
		bool flag2 = ScriptGlobals.huddle.state is HuddleClimbState;
		if (this.currentlyLifting && flag2)
		{
			flag = true;
		}
		if (flag != this.currentlyLifting)
		{
			if (flag)
			{
				this.huddleLifted.Signal();
			}
			else
			{
				this.huddleNotLifted.Signal();
			}
		}
		this.currentlyLifting = flag;
		if (this.takeOverControlPoint != null)
		{
			float num = Mathf.Abs(this.takeOverControlPoint.position.x - ScriptGlobals.huddle.pos.x);
			if (this.huddleInputSet)
			{
				if (num > this.takeOverControlDist || !flag)
				{
					this.huddleInputSet = false;
					ScriptGlobals.huddle.input = null;
				}
			}
			else if (num <= this.takeOverControlDist && flag)
			{
				this.huddleInputSet = true;
				ScriptGlobals.huddle.input = this;
			}
			this.timer -= Time.deltaTime;
			if (this.armReachPoint != null && this.timer < 0f && num < this.takeOverControlDist && ScriptGlobals.huddle.input.looseDir.y > 0.5f && !flag2)
			{
				float y = ScriptGlobals.huddle.cloth.topBone.pos.y;
				if (this.armReachPoint.transform.position.y - y > 1.5f)
				{
					ScriptGlobals.huddle.visualHuddle.arms2.ReachOutFor(this.armReachPoint, true);
					this.timer = Random.Range(0.4f, 0.7f);
				}
			}
		}
	}

	// Token: 0x04000129 RID: 297
	private bool currentlyLifting;

	// Token: 0x0400012A RID: 298
	private SignalOut huddleLifted;

	// Token: 0x0400012B RID: 299
	private SignalOut huddleNotLifted;

	// Token: 0x0400012C RID: 300
	public Transform takeOverControlPoint;

	// Token: 0x0400012D RID: 301
	public Collider armReachPoint;

	// Token: 0x0400012E RID: 302
	public float takeOverControlDist = 1.25f;

	// Token: 0x0400012F RID: 303
	private bool huddleInputSet;

	// Token: 0x04000130 RID: 304
	private float timer;
}
