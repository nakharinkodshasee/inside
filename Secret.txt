using System;
using UnityEngine;

// Token: 0x0200021A RID: 538
public class Secret : Device, IFastEventExListener<Collision>, IPreAwake
{
	// Token: 0x0600108A RID: 4234 RVA: 0x0009C018 File Offset: 0x0009A218
	public bool PreAwake(int callcount)
	{
		this.loadTaken = SignalIn.Create("loadTaken", base.gameObject, new Action(this.OnLoadTaken));
		this.pulled = SignalOut.Create("pulled", base.gameObject);
		this.eggDestroyed = SignalOut.Create("eggDestroyed", base.gameObject);
		return true;
	}

	// Token: 0x0600108B RID: 4235 RVA: 0x0009C074 File Offset: 0x0009A274
	protected override void Start()
	{
		base.Start();
		this.orbRigidbody = this.orb.GetComponent<Rigidbody>();
		this.orbRigidbody.isKinematic = true;
		this.orbCollider.isTrigger = true;
		this.orbCollisionEvents = this.orbRigidbody.GetComponent<CollisionEvents>();
		this.orb.SetActive(false);
		this.burstFx.SetActive(false);
		this.secretTransform = base.transform;
		this.orbCollisionEvents.collisionEnter.Register(this, ref this.collisionEnterHandle);
		this.animVisualsPullBWState = this.anim[this.animVisualsPullBW.name];
		this.animVisualsPullUPState = this.anim[this.animVisualsPullUP.name];
		this.animVisualsPullFWState = this.anim[this.animVisualsPullFW.name];
		this.animVisualsPullBWState.layer = 0;
		this.animVisualsPullUPState.layer = 1;
		this.animVisualsPullFWState.layer = 2;
		this.animVisualsPullBWState.speed = 0f;
		this.animVisualsPullUPState.speed = 0f;
		this.animVisualsPullFWState.speed = 0f;
		this.anim.Play(this.animVisualsPullBWState.name);
		this.anim.Play(this.animVisualsPullUPState.name);
		this.anim.Play(this.animVisualsPullFWState.name);
		this.animVisualsReleaseAState = this.anim[this.animVisualsRelease[0].name];
		this.animVisualsReleaseAState.layer = 3;
		this.animVisualsReleaseBState = this.anim[this.animVisualsRelease[1].name];
		this.animVisualsReleaseBState.layer = this.animVisualsReleaseAState.layer;
		this.animVisualsReleaseCState = this.anim[this.animVisualsRelease[2].name];
		this.animVisualsReleaseCState.layer = this.animVisualsReleaseAState.layer;
		this.SetIdleState();
	}

	// Token: 0x0600108C RID: 4236 RVA: 0x0009C284 File Offset: 0x0009A484
	private void OnEnable()
	{
		if (this.animVisualsPullBWState && this.animVisualsPullUPState && this.animVisualsPullFWState)
		{
			this.anim.Play(this.animVisualsPullBWState.name);
			this.anim.Play(this.animVisualsPullUPState.name);
			this.anim.Play(this.animVisualsPullFWState.name);
		}
	}

	// Token: 0x0600108D RID: 4237 RVA: 0x0009C308 File Offset: 0x0009A508
	private void SetIdleState()
	{
		this.pullReturnTimer = this.pullReturnTotalTime;
		this.releasePullFraction = this.currentPullFraction;
		this.state = Secret.State.Idle;
	}

	// Token: 0x0600108E RID: 4238 RVA: 0x0009C32C File Offset: 0x0009A52C
	private void IdleState()
	{
		this.grabTimer += Time.deltaTime;
		this.PullFractionReturn(0.5f);
		this.ReleaseFade(1f, 6f);
		if (this.currentInputX != 0f)
		{
			this.PullBlendReturn();
			return;
		}
		if (this.releaseTimer > 0f)
		{
			this.releaseTimer -= Time.deltaTime;
			return;
		}
		for (int i = 0; i < this.boysInside.Count; i++)
		{
			Boy boy = this.boysInside[i];
			if (Device.GrabCheck(boy, false) && !AlbinoGroupManager.mInstance.IsInAlbinoJumpState())
			{
				this.SetGrabState(boy);
				break;
			}
		}
	}

	// Token: 0x0600108F RID: 4239 RVA: 0x0009C3F0 File Offset: 0x0009A5F0
	private void SetGrabState(Boy boy)
	{
		this.boyGrabbing = boy;
		float num = this.secretTransform.InverseTransformPoint(this.boyGrabbing.transform.position).x + this.grabOffset * -this.boyGrabbing.facing;
		this.grabDir = Mathf.Sign(num);
		if (this.animHolder)
		{
			this.animHolder.localRotation = Quaternion.Euler(0f, (this.grabDir != 1f) ? 0f : 180f, 0f);
		}
		this.currentGrabBlend = this.currentInputX * -this.grabDir;
		this.currentPullBlend = this.currentInputX * -this.grabDir;
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animGrab, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.grabTimer = 0f;
		Device.SetVoicePassive();
		this.state = Secret.State.Grab;
	}

	// Token: 0x06001090 RID: 4240 RVA: 0x0009C4EC File Offset: 0x0009A6EC
	private void SetGrabStateNoTransition()
	{
		this.animGrabBlend.currentBlendValue = this.currentInputX;
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animGrabBlend, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		this.pullReturnTimer = this.pullReturnTotalTime;
		this.releasePullFraction = this.currentPullFraction;
		this.grabTimer = 0f;
		Device.SetVoicePassive();
		this.state = Secret.State.Grab;
	}

	// Token: 0x06001091 RID: 4241 RVA: 0x0009C554 File Offset: 0x0009A754
	private void GrabState()
	{
		this.grabTimer += Time.deltaTime;
		if (!this.boyGrabbing.input.rawAction)
		{
			this.Release();
			return;
		}
		if (this.currentPullFraction > 0f)
		{
			this.PullFractionReturn(1f);
			return;
		}
		if (!this.animGrab.animFinished)
		{
			return;
		}
		VisualBoyCustomAnim visualBoyCustomAnim = this.boyGrabbing.visualBoy.state as VisualBoyCustomAnim;
		if (visualBoyCustomAnim == null || visualBoyCustomAnim.anim != this.animGrabBlend)
		{
			BoyUtils.StartCustomAnim(this.boyGrabbing, this.animGrabBlend, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		}
		this.ReleaseFade(0f, 4.5f);
		Vector3 relativeStick = this.GetRelativeStick();
		this.targetInputX = relativeStick.x * -this.grabDir;
		this.currentInputX += (this.targetInputX - this.currentInputX) * Time.deltaTime * this.pullBlendSpeed;
		this.animGrabBlend.currentBlendValue = this.currentInputX;
		this.currentGrabBlend = this.currentInputX * -this.grabDir;
		this.currentPullBlend = this.currentInputX * -this.grabDir;
		if (this.PullingCheck(relativeStick) && this.currentReleaseState == null)
		{
			this.SetPullState();
		}
	}

	// Token: 0x06001092 RID: 4242 RVA: 0x0009C6BC File Offset: 0x0009A8BC
	private void SetPullState()
	{
		this.pullTimer = 0f;
		this.animPullBlend.currentBlendValue = this.currentInputX;
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animPullBlend, null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		Device.SetVoiceActive();
		this.state = Secret.State.Pull;
	}

	// Token: 0x06001093 RID: 4243 RVA: 0x0009C70C File Offset: 0x0009A90C
	private void PullState()
	{
		if (!this.boyGrabbing.input.rawAction)
		{
			this.Release();
			return;
		}
		Vector3 relativeStick = this.GetRelativeStick();
		if (!this.PullingCheck(relativeStick))
		{
			this.SetGrabStateNoTransition();
			return;
		}
		this.targetInputX = relativeStick.x * -this.grabDir;
		this.currentInputX += (this.targetInputX - this.currentInputX) * Time.deltaTime * this.pullBlendSpeed;
		this.pullTimer += Time.deltaTime;
		this.pullTimer = Mathf.Min(this.totalPullTime, this.pullTimer);
		float num = this.pullCurve.Evaluate(this.pullTimer / this.totalPullTime);
		this.animPullBlend.currentBlendValue = this.currentInputX;
		int i = 0;
		int count = this.animPullBlend.children.Count;
		while (i < count)
		{
			AnimClipNode animClipNode = this.animPullBlend.children[i].anim as AnimClipNode;
			animClipNode.frame = animClipNode.numFrames * num;
			i++;
		}
		this.currentPullBlend = this.currentInputX * -this.grabDir;
		this.currentPullFraction = num;
		if (this.pullTimer >= this.totalPullTime)
		{
			this.SetSuccessState();
		}
	}

	// Token: 0x06001094 RID: 4244 RVA: 0x0009C860 File Offset: 0x0009AA60
	private void SetSuccessState()
	{
		float num = (this.animPullBlend.currentBlendValue + 1f) / 2f;
		int num2 = Mathf.RoundToInt(num * (float)(this.animSuccess.Length - 1));
		BoyUtils.StartCustomAnim(this.boyGrabbing, this.animSuccess[num2], null, 0f, Boy.AffectMode.Default, EffectMaterial.Material.None);
		Vector3 relativeStick = this.GetRelativeStick();
		if (Mathf.Abs(relativeStick.x) > this.throwDirLimit)
		{
			relativeStick.x = Mathf.Sign(relativeStick.x) * (1f - this.throwDirLimit);
		}
		if (relativeStick.y < this.throwDirLimit)
		{
			relativeStick.y = this.throwDirLimit;
		}
		relativeStick.Normalize();
		Vector3 vector;
		vector.x = relativeStick.x;
		vector.y = relativeStick.y * 1.5f;
		vector.z = (Random.value - 0.5f) / 3f;
		this.orbAnim.SetActive(false);
		int i = 0;
		int num3 = this.disableOnSuccess.Length;
		while (i < num3)
		{
			this.disableOnSuccess[i].gameObject.SetActive(false);
			i++;
		}
		this.orb.transform.position = this.orbThrowPos.position;
		this.orb.transform.rotation = this.orbThrowPos.rotation;
		this.orb.SetActive(true);
		this.orbCollider.isTrigger = false;
		this.orbRigidbody.isKinematic = false;
		Vector3 vector2 = this.secretTransform.TransformDirection(vector);
		this.orbRigidbody.AddForce(vector2 * this.throwForce, 1);
		this.currentReleaseState = this.anim.CrossFadeQueued(this.animVisualsReleaseCState.name, 0.5f, 2);
		this.currentReleaseState.layer = this.animVisualsReleaseAState.layer;
		this.currentReleaseState.weight = 0f;
		this.pullReturnTimer = this.pullReturnTotalTime;
		this.releasePullFraction = this.currentPullFraction;
		this.flyingFx.SetActive(true);
		this.detachFx.SetActive(true);
		this.pulled.Signal();
		if (this.unlockAchievementOnPull)
		{
			User.Achievement.Acquire(this.achievement);
		}
		Device.SetVoiceNone();
		this.state = Secret.State.Success;
	}

	// Token: 0x06001095 RID: 4245 RVA: 0x0009CAC0 File Offset: 0x0009ACC0
	private void SuccessState()
	{
		this.PullFractionReturn(0.5f);
		this.ReleaseFade(1f, 6f);
		this.orbRigidbody.rotation = Quaternion.LookRotation(this.orbRigidbody.velocity);
		if (this.currentInputX != 0f)
		{
			this.PullBlendReturn();
			return;
		}
	}

	// Token: 0x06001096 RID: 4246 RVA: 0x0009CB1C File Offset: 0x0009AD1C
	private void SetDestroyedState(Collision collision)
	{
		ContactPoint contactPoint = collision.contacts[0];
		this.burstFx.transform.position = contactPoint.point;
		this.burstFx.transform.rotation = Quaternion.LookRotation(contactPoint.normal);
		this.burstFx.SetActive(true);
		this.orbRigidbody.isKinematic = true;
		this.orbRigidbody.gameObject.SetActive(false);
		this.eggDestroyed.Signal();
		if (!this.unlockAchievementOnPull)
		{
			User.Achievement.Acquire(this.achievement);
		}
		this.state = Secret.State.Destroy;
	}

	// Token: 0x06001097 RID: 4247 RVA: 0x0009CBC4 File Offset: 0x0009ADC4
	private void DestroyState()
	{
		if (this.fadeOutTimer > 0f)
		{
			this.fadeOutTimer -= Time.deltaTime;
			if (this.fadeOutTimer < 0f)
			{
				this.fadeOut = true;
			}
		}
		else if (this.fadeOut)
		{
			this.guiAlpha -= Time.deltaTime * 2f;
			if (this.guiAlpha <= 0f)
			{
				this.guiAlpha = 0f;
			}
		}
		else
		{
			this.guiAlpha += Time.deltaTime * 7f;
			if (this.guiAlpha >= 1f)
			{
				this.guiAlpha = 1f;
				this.fadeOutTimer = 5f;
			}
		}
		this.PullFractionReturn(0.5f);
		this.ReleaseFade(1f, 6f);
		if (this.currentInputX != 0f)
		{
			this.PullBlendReturn();
			return;
		}
	}

	// Token: 0x06001098 RID: 4248 RVA: 0x0009CCC4 File Offset: 0x0009AEC4
	private void FixedUpdate()
	{
		if (Hulv.GetHulvKilledBoy() != null)
		{
			if (this.state == Secret.State.Pull)
			{
				this.Release();
			}
			if (this.state != Secret.State.Idle)
			{
				return;
			}
		}
		if (this.state != Secret.State.None)
		{
			switch (this.state)
			{
			case Secret.State.Idle:
				this.IdleState();
				break;
			case Secret.State.Grab:
				this.GrabState();
				break;
			case Secret.State.Pull:
				this.PullState();
				break;
			case Secret.State.Success:
				this.SuccessState();
				break;
			case Secret.State.Destroy:
				this.DestroyState();
				break;
			}
			this.UpdatePullAnim();
		}
	}

	// Token: 0x06001099 RID: 4249 RVA: 0x0009CD70 File Offset: 0x0009AF70
	private void ReleaseFade(float target, float speed = 4.5f)
	{
		if (this.currentReleaseState == null)
		{
			return;
		}
		float num = this.currentReleaseState.weight;
		float num2 = target - num;
		if (num2 == 0f)
		{
			return;
		}
		float num3 = Mathf.Sign(num2);
		num += num3 * Time.deltaTime * speed;
		if (num * num3 > target * num3)
		{
			this.currentReleaseState.weight = target;
			if (target == 0f)
			{
				this.currentReleaseState = null;
			}
		}
		else
		{
			this.currentReleaseState.weight = num;
		}
	}

	// Token: 0x0600109A RID: 4250 RVA: 0x0009CDF8 File Offset: 0x0009AFF8
	private void PullBlendReturn()
	{
		float num = Mathf.Sign(this.currentInputX);
		this.currentInputX -= num * Time.deltaTime * 2f;
		if ((num == 1f && this.currentInputX < 0f) || (num == -1f && this.currentInputX > 0f))
		{
			this.currentInputX = 0f;
		}
		this.currentGrabBlend = this.currentInputX * -this.grabDir;
		this.currentPullBlend = this.currentInputX * -this.grabDir;
	}

	// Token: 0x0600109B RID: 4251 RVA: 0x0009CE94 File Offset: 0x0009B094
	private void PullFractionReturn(float speed = 1f)
	{
		if (this.pullReturnTimer > 0f)
		{
			this.pullReturnTimer -= Time.deltaTime * speed;
			this.pullReturnTimer = Mathf.Max(this.pullReturnTimer, 0f);
			this.currentPullFraction = this.releasePullFraction * (this.pullReturnTimer / this.pullReturnTotalTime);
		}
	}

	// Token: 0x0600109C RID: 4252 RVA: 0x0009CEF8 File Offset: 0x0009B0F8
	private void UpdatePullAnim()
	{
		if (this.currentPullBlend >= 0f)
		{
			this.animVisualsPullFWState.weight = this.currentPullBlend * this.pullTransitionWeight;
			this.animVisualsPullUPState.weight = 1f * this.pullTransitionWeight;
		}
		else
		{
			this.animVisualsPullFWState.weight = 0f;
			this.animVisualsPullUPState.weight = (1f + this.currentPullBlend) * this.pullTransitionWeight;
		}
		this.animVisualsPullBWState.weight = 1f * this.pullTransitionWeight;
		this.animVisualsPullBWState.normalizedTime = this.currentPullFraction;
		this.animVisualsPullUPState.normalizedTime = this.currentPullFraction;
		this.animVisualsPullFWState.normalizedTime = this.currentPullFraction;
	}

	// Token: 0x0600109D RID: 4253 RVA: 0x0009CFC4 File Offset: 0x0009B1C4
	private Vector3 GetRelativeStick()
	{
		vector2f stick = this.boyGrabbing.input.stick;
		Vector3 vector;
		vector.x = stick.x;
		vector.y = stick.y;
		vector.z = 0f;
		return this.secretTransform.InverseTransformDirection(vector);
	}

	// Token: 0x0600109E RID: 4254 RVA: 0x0009D018 File Offset: 0x0009B218
	private bool PullingCheck(Vector3 stick)
	{
		if (stick.magnitude < 0.3f)
		{
			return false;
		}
		float num = Vector3.Dot(stick, Vector3.up);
		return num > 0f || Mathf.Abs(num) < 0.25f;
	}

	// Token: 0x0600109F RID: 4255 RVA: 0x0009D064 File Offset: 0x0009B264
	public bool IsBoyClose()
	{
		Vector3 vector = ScriptGlobals.boy.pos3 - base.transform.position;
		return Mathf.Abs(vector.y) <= 3f && Mathf.Abs(vector.x) < 1.5f;
	}

	// Token: 0x060010A0 RID: 4256 RVA: 0x0009D0B8 File Offset: 0x0009B2B8
	public bool IsBeingGrabbed()
	{
		return this.state == Secret.State.Pull || this.state == Secret.State.Grab || (this.state == Secret.State.Idle && this.grabTimer < 0.5f);
	}

	// Token: 0x060010A1 RID: 4257 RVA: 0x0009D0F4 File Offset: 0x0009B2F4
	public bool HulvAllowSneakInWhileGrabbing()
	{
		return this.state == Secret.State.Grab && this.grabTimer >= 0.4f;
	}

	// Token: 0x060010A2 RID: 4258 RVA: 0x0009D118 File Offset: 0x0009B318
	public void DisableSecret()
	{
		this.state = Secret.State.None;
	}

	// Token: 0x060010A3 RID: 4259 RVA: 0x0009D124 File Offset: 0x0009B324
	public void Release()
	{
		if (this.boyGrabbing && !this.boyGrabbing.isDead && Hulv.GetHulvKilledBoy() == null)
		{
			BoyUtils.ClearState(this.boyGrabbing, -1f);
		}
		AnimationState animationState = null;
		if (this.currentPullFraction > 0.75f)
		{
			animationState = this.anim.CrossFadeQueued(this.animVisualsReleaseCState.name, 0.5f, 2);
		}
		else if (this.currentPullFraction > 0.45f)
		{
			animationState = this.anim.CrossFadeQueued(this.animVisualsReleaseBState.name, 0.5f, 2);
		}
		else if (this.currentPullFraction > 0f || Mathf.Abs(this.currentInputX) > 0.4f)
		{
			animationState = this.anim.CrossFadeQueued(this.animVisualsReleaseAState.name, 0.2f, 2);
		}
		if (animationState != null)
		{
			animationState.layer = this.animVisualsReleaseAState.layer;
			animationState.weight = 0f;
			this.currentReleaseState = animationState;
		}
		this.releaseTimer = this.releaseDelay;
		this.boyGrabbing = null;
		Device.SetVoiceNone();
		this.SetIdleState();
	}

	// Token: 0x060010A4 RID: 4260 RVA: 0x0009D268 File Offset: 0x0009B468
	private void OnGUI()
	{
		if (this.guiAlpha > 0f)
		{
			float num = 3.5f;
			float num2 = 28f;
			float num3 = 40f;
			float num4 = (float)Screen.width;
			if (num4 < 745f)
			{
				num4 = 745f;
			}
			float num5 = num4 / num;
			float num6 = num4 / num2;
			float num7 = 15f;
			float num8 = (float)Screen.width - num5 - num7;
			float num9 = (float)Screen.height - num6 - num7;
			GUI.color = new Color(1f, 1f, 1f, this.guiAlpha);
			GUI.skin.box.fontSize = Mathf.RoundToInt(num4 / num3);
			GUI.Box(new Rect(num8, num9, num5, num6), "Achievement unlocked");
		}
	}

	// Token: 0x060010A5 RID: 4261 RVA: 0x0009D32C File Offset: 0x0009B52C
	private void OnLoadTaken()
	{
		this.orbRigidbody.gameObject.SetActive(false);
		this.state = Secret.State.None;
	}

	// Token: 0x060010A6 RID: 4262 RVA: 0x0009D348 File Offset: 0x0009B548
	public void OnFastEventEx(FastEventEx<Collision> sender, ref Collision collision)
	{
		if (sender == this.orbCollisionEvents.collisionEnter)
		{
			this.SetDestroyedState(collision);
		}
	}

	// Token: 0x04001DC7 RID: 7623
	public Transform animHolder;

	// Token: 0x04001DC8 RID: 7624
	public AnimClipNode animGrab;

	// Token: 0x04001DC9 RID: 7625
	public AnimBlendNode animGrabBlend;

	// Token: 0x04001DCA RID: 7626
	public AnimBlendNode animPullBlend;

	// Token: 0x04001DCB RID: 7627
	public AnimClipNode[] animSuccess;

	// Token: 0x04001DCC RID: 7628
	public Animation anim;

	// Token: 0x04001DCD RID: 7629
	public AnimationClip animVisualsIdle;

	// Token: 0x04001DCE RID: 7630
	private AnimationState animVisualsIdleState;

	// Token: 0x04001DCF RID: 7631
	public AnimationClip animVisualsPullBW;

	// Token: 0x04001DD0 RID: 7632
	private AnimationState animVisualsPullBWState;

	// Token: 0x04001DD1 RID: 7633
	public AnimationClip animVisualsPullUP;

	// Token: 0x04001DD2 RID: 7634
	private AnimationState animVisualsPullUPState;

	// Token: 0x04001DD3 RID: 7635
	public AnimationClip animVisualsPullFW;

	// Token: 0x04001DD4 RID: 7636
	private AnimationState animVisualsPullFWState;

	// Token: 0x04001DD5 RID: 7637
	public AnimationClip[] animVisualsRelease;

	// Token: 0x04001DD6 RID: 7638
	public AchievementPlatform.EAchievements achievement;

	// Token: 0x04001DD7 RID: 7639
	public bool unlockAchievementOnPull;

	// Token: 0x04001DD8 RID: 7640
	private SignalIn loadTaken;

	// Token: 0x04001DD9 RID: 7641
	private SignalOut pulled;

	// Token: 0x04001DDA RID: 7642
	private SignalOut eggDestroyed;

	// Token: 0x04001DDB RID: 7643
	private Secret.State state;

	// Token: 0x04001DDC RID: 7644
	private AnimationState animVisualsReleaseAState;

	// Token: 0x04001DDD RID: 7645
	private AnimationState animVisualsReleaseBState;

	// Token: 0x04001DDE RID: 7646
	private AnimationState animVisualsReleaseCState;

	// Token: 0x04001DDF RID: 7647
	private Transform secretTransform;

	// Token: 0x04001DE0 RID: 7648
	private CollisionEvents orbCollisionEvents;

	// Token: 0x04001DE1 RID: 7649
	private Rigidbody orbRigidbody;

	// Token: 0x04001DE2 RID: 7650
	private int collisionEnterHandle = -1;

	// Token: 0x04001DE3 RID: 7651
	private float grabDir;

	// Token: 0x04001DE4 RID: 7652
	private float grabOffset = 0.2f;

	// Token: 0x04001DE5 RID: 7653
	private float releaseDelay = 0.12f;

	// Token: 0x04001DE6 RID: 7654
	private float releaseTimer;

	// Token: 0x04001DE7 RID: 7655
	private AnimationState currentReleaseState;

	// Token: 0x04001DE8 RID: 7656
	private float currentGrabBlend;

	// Token: 0x04001DE9 RID: 7657
	private float pullReturnTimer;

	// Token: 0x04001DEA RID: 7658
	private float pullReturnTotalTime = 0.2f;

	// Token: 0x04001DEB RID: 7659
	private float grabTimer;

	// Token: 0x04001DEC RID: 7660
	public AnimationCurve pullCurve;

	// Token: 0x04001DED RID: 7661
	private float requiredInputY = 0.4f;

	// Token: 0x04001DEE RID: 7662
	private float targetInputX;

	// Token: 0x04001DEF RID: 7663
	private float currentInputX;

	// Token: 0x04001DF0 RID: 7664
	public float pullBlendSpeed = 6.5f;

	// Token: 0x04001DF1 RID: 7665
	private float pullTimer;

	// Token: 0x04001DF2 RID: 7666
	public float totalPullTime = 1.5f;

	// Token: 0x04001DF3 RID: 7667
	private float currentPullBlend;

	// Token: 0x04001DF4 RID: 7668
	private float pullTransitionWeight = 1f;

	// Token: 0x04001DF5 RID: 7669
	private float currentPullFraction;

	// Token: 0x04001DF6 RID: 7670
	private float releasePullFraction;

	// Token: 0x04001DF7 RID: 7671
	public GameObject orbAnim;

	// Token: 0x04001DF8 RID: 7672
	public GameObject orb;

	// Token: 0x04001DF9 RID: 7673
	public Collider orbCollider;

	// Token: 0x04001DFA RID: 7674
	public Renderer[] disableOnSuccess;

	// Token: 0x04001DFB RID: 7675
	public Transform orbThrowPos;

	// Token: 0x04001DFC RID: 7676
	private float orbImpactTimer;

	// Token: 0x04001DFD RID: 7677
	private float throwDirLimit = 0.5f;

	// Token: 0x04001DFE RID: 7678
	public float throwForce = 2f;

	// Token: 0x04001DFF RID: 7679
	public GameObject flyingFx;

	// Token: 0x04001E00 RID: 7680
	public GameObject detachFx;

	// Token: 0x04001E01 RID: 7681
	public GameObject burstFx;

	// Token: 0x04001E02 RID: 7682
	private float guiAlpha;

	// Token: 0x04001E03 RID: 7683
	private float fadeOutTimer;

	// Token: 0x04001E04 RID: 7684
	private bool fadeOut;

	// Token: 0x0200021B RID: 539
	private enum State
	{
		// Token: 0x04001E06 RID: 7686
		None,
		// Token: 0x04001E07 RID: 7687
		Idle,
		// Token: 0x04001E08 RID: 7688
		Grab,
		// Token: 0x04001E09 RID: 7689
		Pull,
		// Token: 0x04001E0A RID: 7690
		Success,
		// Token: 0x04001E0B RID: 7691
		Destroy
	}
}