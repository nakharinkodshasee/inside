using System;
using UnityEngine;

// Token: 0x0200045D RID: 1117
public class EndCredits : MonoBehaviour, IPreAwake
{
	// Token: 0x06001D69 RID: 7529 RVA: 0x000FE100 File Offset: 0x000FC300
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.audioTheEnd = new AudioEventSimple("amb_sws_huddle_huddleNorway_theEnd");
		this.audioFinalFade = new AudioEventSimple("amb_sws_huddle_huddleNorway_finalFade");
	}

	// Token: 0x06001D6A RID: 7530 RVA: 0x000FE138 File Offset: 0x000FC338
	public bool PreAwake(int callcount)
	{
		this.show = SignalIn.Create("show", base.gameObject, new Action(this.ShowCredits));
		this.fadeComplete = SignalOut.Create("fadeComplete", base.gameObject);
		return true;
	}

	// Token: 0x06001D6B RID: 7531 RVA: 0x000FE180 File Offset: 0x000FC380
	private void Awake()
	{
		this.OnPreProcess();
	}

	// Token: 0x06001D6C RID: 7532 RVA: 0x000FE188 File Offset: 0x000FC388
	private void OnDisable()
	{
		if (this.state != EndCredits.State.None)
		{
			SingletonBehaviour<CreditsOverlay>.instance.HideCredits();
		}
	}

	// Token: 0x06001D6D RID: 7533 RVA: 0x000FE1A0 File Offset: 0x000FC3A0
	private void ShowCredits()
	{
		GameStatsTracker.OnGameCompleted();
		this.SetWaitState();
	}

	// Token: 0x06001D6E RID: 7534 RVA: 0x000FE1B0 File Offset: 0x000FC3B0
	private void SetWaitState()
	{
		this.waitTimer = this.waitDuration;
		this.state = EndCredits.State.Wait;
	}

	// Token: 0x06001D6F RID: 7535 RVA: 0x000FE1C8 File Offset: 0x000FC3C8
	private void WaitState()
	{
		this.waitTimer -= Time.deltaTime;
		if (this.waitTimer <= 0f)
		{
			this.SetTextShowState();
		}
	}

	// Token: 0x06001D70 RID: 7536 RVA: 0x000FE200 File Offset: 0x000FC400
	private void SetTextShowState()
	{
		this.restartTimer = this.waitBeforeRestart;
		this.audioTheEnd.PostFast(AudioKeyObject.AkGameObjs.global);
		this.state = EndCredits.State.TextShow;
		SingletonBehaviour<CreditsOverlay>.instance.FadeIn();
		this.fadeComplete.Signal();
	}

	// Token: 0x06001D71 RID: 7537 RVA: 0x000FE248 File Offset: 0x000FC448
	private void ShowTextState()
	{
		bool flag = SingletonBehaviour<CreditsOverlay>.instance.IsCompleted();
		if (flag)
		{
			if (this.restartTimer > 0f)
			{
				this.restartTimer -= Time.deltaTime;
			}
			else
			{
				GameController gameController = GameEventManager.gameController;
				if (gameController.A.Down || gameController.B.Down || gameController.X.Down || gameController.Y.Down)
				{
					this.SetRestartState();
				}
			}
		}
	}

	// Token: 0x06001D72 RID: 7538 RVA: 0x000FE2DC File Offset: 0x000FC4DC
	private void SetRestartState()
	{
		SingletonBehaviour<CreditsOverlay>.instance.HideCredits();
		this.audioFinalFade.PostFast(AudioKeyObject.AkGameObjs.global);
		PersistentBehaviour<GameManager>.instance.fader.StartFade(0f, 1f, this.fadeoutDuration);
		this.state = EndCredits.State.Restart;
	}

	// Token: 0x06001D73 RID: 7539 RVA: 0x000FE32C File Offset: 0x000FC52C
	private void RestartState()
	{
		if (PersistentBehaviour<GameManager>.instance.fader.IsDone)
		{
			GameEventManager.StartNewGame();
			this.state = EndCredits.State.Complete;
		}
	}

	// Token: 0x06001D74 RID: 7540 RVA: 0x000FE35C File Offset: 0x000FC55C
	private void Update()
	{
		switch (this.state)
		{
		case EndCredits.State.Wait:
			this.WaitState();
			break;
		case EndCredits.State.TextShow:
			this.ShowTextState();
			break;
		case EndCredits.State.Restart:
			this.RestartState();
			break;
		}
	}

	// Token: 0x06001D75 RID: 7541 RVA: 0x000FE3B4 File Offset: 0x000FC5B4
	private void OnDrawGizmos()
	{
		Gizmos.color = Color.blue.Alpha(0.35f);
		Gizmos.DrawSphere(base.transform.position, 1f);
	}

	// Token: 0x0400361A RID: 13850
	public float waitDuration = 5f;

	// Token: 0x0400361B RID: 13851
	public float waitBeforeRestart = 2f;

	// Token: 0x0400361C RID: 13852
	public float fadeoutDuration = 3f;

	// Token: 0x0400361D RID: 13853
	private SignalIn show;

	// Token: 0x0400361E RID: 13854
	private SignalOut fadeComplete;

	// Token: 0x0400361F RID: 13855
	private EndCredits.State state;

	// Token: 0x04003620 RID: 13856
	private float fadeOutTimer;

	// Token: 0x04003621 RID: 13857
	private float restartTimer;

	// Token: 0x04003622 RID: 13858
	private float waitTimer;

	// Token: 0x04003623 RID: 13859
	[SerializeField]
	[HideInInspector]
	private AudioEventSimple audioTheEnd;

	// Token: 0x04003624 RID: 13860
	[SerializeField]
	[HideInInspector]
	private AudioEventSimple audioFinalFade;

	// Token: 0x04003625 RID: 13861
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x0200045E RID: 1118
	private enum State
	{
		// Token: 0x04003627 RID: 13863
		None,
		// Token: 0x04003628 RID: 13864
		Wait,
		// Token: 0x04003629 RID: 13865
		Fade,
		// Token: 0x0400362A RID: 13866
		TextWait,
		// Token: 0x0400362B RID: 13867
		TextShow,
		// Token: 0x0400362C RID: 13868
		Restart,
		// Token: 0x0400362D RID: 13869
		Complete
	}
}