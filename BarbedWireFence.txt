using System;
using UnityEngine;

// Token: 0x0200018C RID: 396
public class BarbedWireFence : MonoBehaviour, IFastEventExListener<Collider>
{
	// Token: 0x06000B87 RID: 2951 RVA: 0x00071790 File Offset: 0x0006F990
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(base.gameObject, this);
		this.audioMove = new AudioEventSimpleLocal(this.audioPrefix + "_move", akGameObj);
		this.boySetInput = base.GetComponent<BoySetInput>();
	}

	// Token: 0x06000B88 RID: 2952 RVA: 0x000717E8 File Offset: 0x0006F9E8
	private void Start()
	{
		this.OnPreProcess();
		this.animMoveState = this.animFence[this.animFenceMove.name];
		this.animMoveState.speed = 0f;
		this.animShakeState = this.animFence[this.animFenceShake.name];
		this.triggerForwardInput.enterTrigger.Register(this, ref this.forwardTriggerEnterHandle);
		this.triggerForwardInput.exitTrigger.Register(this, ref this.forwardTriggerExitHandle);
		this.animFence.Play(this.animFenceMove.name);
	}

	// Token: 0x06000B89 RID: 2953 RVA: 0x00071888 File Offset: 0x0006FA88
	private void Update()
	{
		Boy boy = ScriptGlobals.boy;
		BoyState state = boy.state;
		BoyJumpState boyJumpState = state as BoyJumpState;
		if (boyJumpState != null)
		{
			Boy.Status status = boy.status;
			if (!(this.previousBoyState is BoyJumpState) && boyJumpState.takeoffCollider == this.fenceCollider && boyJumpState.state != BoyJumpState.State.JumpDown)
			{
				this.ShakeFence();
			}
			if (status.obstructionDistance < 0.2f && status.obstructionCollider == this.fenceCollider && boy.facing == 1f && boy.velocity.x > 1.5f)
			{
				float time = this.animShakeState.time;
				if (time == 0f || time > 0.5f)
				{
					this.ShakeFence();
				}
			}
		}
		else
		{
			BoyCustomAnimState boyCustomAnimState = state as BoyCustomAnimState;
			if (boyCustomAnimState != null && boyCustomAnimState.anim == this.animClimbRight)
			{
				float num = this.moveCurve.Evaluate(this.animClimbRight.frame / this.animClimbRight.numFrames);
				num = Mathf.Clamp01(num);
				if (this.isShaking)
				{
					if (num < 1f)
					{
						this.animMoveState.normalizedTime = num;
						this.animFence.CrossFade(this.animFenceMove.name);
						this.isShaking = false;
					}
				}
				else
				{
					this.animMoveState.normalizedTime = num;
					if (num >= this.audioMoveFraction && this.previousFraction < this.audioMoveFraction && this.cooldownTimer <= 0f)
					{
						this.audioMove.PostFast();
						this.cooldownTimer = this.audioCooldown;
					}
					if (num >= 1f)
					{
						this.ShakeFence();
					}
				}
				this.previousFraction = num;
			}
		}
		if (this.cooldownTimer > 0f)
		{
			this.cooldownTimer -= Time.deltaTime;
		}
		this.previousBoyState = state;
		if (this.boyOnFence != null && this.boyOnFence.input.stick.x > -0.5f)
		{
			this.boySetInput.activateScript();
		}
		else
		{
			this.boySetInput.deactivateScript();
		}
	}

	// Token: 0x06000B8A RID: 2954 RVA: 0x00071AEC File Offset: 0x0006FCEC
	private void ShakeFence()
	{
		this.animFence.CrossFadeQueued(this.animFenceShake.name, 0.2f, 2);
		this.isShaking = true;
	}

	// Token: 0x06000B8B RID: 2955 RVA: 0x00071B20 File Offset: 0x0006FD20
	public void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		if (sender == this.triggerForwardInput.enterTrigger)
		{
			this.EnterForwardInput(collider);
		}
		else if (sender == this.triggerForwardInput.exitTrigger)
		{
			this.ExitForwardInput(collider);
		}
	}

	// Token: 0x06000B8C RID: 2956 RVA: 0x00071B5C File Offset: 0x0006FD5C
	private void EnterForwardInput(Collider collider)
	{
		BoyProbe component = collider.GetComponent<BoyProbe>();
		if (component)
		{
			this.boyOnFence = component.boy;
		}
	}

	// Token: 0x06000B8D RID: 2957 RVA: 0x00071B88 File Offset: 0x0006FD88
	private void ExitForwardInput(Collider collider)
	{
		if (collider.GetComponent<BoyProbe>())
		{
			this.boyOnFence = null;
		}
	}

	// Token: 0x040013F4 RID: 5108
	public Animation animFence;

	// Token: 0x040013F5 RID: 5109
	public AnimationClip animFenceMove;

	// Token: 0x040013F6 RID: 5110
	public AnimationClip animFenceShake;

	// Token: 0x040013F7 RID: 5111
	public AnimClipNode animClimbRight;

	// Token: 0x040013F8 RID: 5112
	public AnimationCurve moveCurve;

	// Token: 0x040013F9 RID: 5113
	public Collider fenceCollider;

	// Token: 0x040013FA RID: 5114
	public float audioMoveFraction = 0.33f;

	// Token: 0x040013FB RID: 5115
	public float audioCooldown = 0.3f;

	// Token: 0x040013FC RID: 5116
	public string audioPrefix = "env";

	// Token: 0x040013FD RID: 5117
	public CollisionEvents triggerForwardInput;

	// Token: 0x040013FE RID: 5118
	private float previousFraction;

	// Token: 0x040013FF RID: 5119
	private float cooldownTimer;

	// Token: 0x04001400 RID: 5120
	private BoyState previousBoyState;

	// Token: 0x04001401 RID: 5121
	private AnimationState animMoveState;

	// Token: 0x04001402 RID: 5122
	private AnimationState animShakeState;

	// Token: 0x04001403 RID: 5123
	private bool isShaking;

	// Token: 0x04001404 RID: 5124
	private Boy boyOnFence;

	// Token: 0x04001405 RID: 5125
	private int forwardTriggerEnterHandle = -1;

	// Token: 0x04001406 RID: 5126
	private int forwardTriggerExitHandle = -1;

	// Token: 0x04001407 RID: 5127
	[HideInInspector]
	[SerializeField]
	private BoySetInput boySetInput;

	// Token: 0x04001408 RID: 5128
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioMove;

	// Token: 0x04001409 RID: 5129
	[HideInInspector]
	[SerializeField]
	private bool preProcessed;
}