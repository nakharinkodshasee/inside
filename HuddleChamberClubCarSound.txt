using System;
using UnityEngine;

// Token: 0x02000503 RID: 1283
public class HuddleChamberClubCarSound : MonoBehaviour, IPreAwake
{
	// Token: 0x0600218D RID: 8589 RVA: 0x001192C0 File Offset: 0x001174C0
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.akGameObj = AudioUtils.EnsureAkGameObj(base.gameObject, null);
		this.audioStart = new AudioEventSimpleLocal("env_preHuddle_huddleChamber_clubCar_start", this.akGameObj);
		this.audioStop = new AudioEventSimpleLocal("env_preHuddle_huddleChamber_clubCar_stop", this.akGameObj);
	}

	// Token: 0x0600218E RID: 8590 RVA: 0x00119320 File Offset: 0x00117520
	public bool PreAwake(int callcount)
	{
		this.startDrive = SignalIn.Create("startDrive", base.gameObject, new Action(this.DoStartDrive));
		return true;
	}

	// Token: 0x0600218F RID: 8591 RVA: 0x00119348 File Offset: 0x00117548
	private void Start()
	{
		this.OnPreProcess();
	}

	// Token: 0x06002190 RID: 8592 RVA: 0x00119350 File Offset: 0x00117550
	private void DoStartDrive()
	{
		this.isDriving = true;
		this.audioStart.PostFast();
	}

	// Token: 0x06002191 RID: 8593 RVA: 0x00119368 File Offset: 0x00117568
	private void DoStopDrive()
	{
		this.isDriving = false;
		this.audioStop.PostFast();
	}

	// Token: 0x06002192 RID: 8594 RVA: 0x00119380 File Offset: 0x00117580
	private void NewTake()
	{
		if (this.doInput)
		{
			float num = this.input.Evaluate(this.timer);
			SoundEngine.RTPCs.forkLiftGas.SetFast(num * 100f, this.akGameObj);
		}
		if (this.doGas)
		{
			float num2 = this.gasPedal.Evaluate(this.timer);
			float num3 = Mathf.InverseLerp(this.minimumSpeed, this.maximumSpeed, num2);
			SoundEngine.RTPCs.forkLiftSpeed.SetFast(num3 * 100f, this.akGameObj);
		}
		if (this.doLoad)
		{
			float num4 = this.gasPedal.Evaluate(this.timer);
			float num5 = this.gasPedal.Evaluate(this.timer + 1f);
			float num6 = Mathf.Abs(num4 - num5);
			float num7 = Mathf.InverseLerp(0f, 6f, num6);
			float value;
			if (num5 > num4)
			{
				value = Mathf.Lerp(15f, 80f, num7);
			}
			else
			{
				value = Mathf.Lerp(5f, 80f, num7);
			}
			SoundEngine.RTPCs.forkLiftLoad.SetFast(value, this.akGameObj, 0f);
		}
	}

	// Token: 0x06002193 RID: 8595 RVA: 0x001194A8 File Offset: 0x001176A8
	private void Update()
	{
		if (this.isDriving)
		{
			this.timer += Time.deltaTime;
			this.NewTake();
			if (this.timer >= this.driveAnimLength)
			{
				this.DoStopDrive();
			}
		}
	}

	// Token: 0x04003E52 RID: 15954
	public bool doGas;

	// Token: 0x04003E53 RID: 15955
	public AnimationCurve gasPedal;

	// Token: 0x04003E54 RID: 15956
	public bool doInput;

	// Token: 0x04003E55 RID: 15957
	public AnimationCurve input;

	// Token: 0x04003E56 RID: 15958
	public bool doLoad;

	// Token: 0x04003E57 RID: 15959
	public float driveAnimLength = 43.3f;

	// Token: 0x04003E58 RID: 15960
	private bool isDriving;

	// Token: 0x04003E59 RID: 15961
	private float gasRTPC;

	// Token: 0x04003E5A RID: 15962
	private float speedRTPC;

	// Token: 0x04003E5B RID: 15963
	private float timer;

	// Token: 0x04003E5C RID: 15964
	private float secIntoFuture = 3f;

	// Token: 0x04003E5D RID: 15965
	private float maximumSpeed = 5f;

	// Token: 0x04003E5E RID: 15966
	private float minimumSpeed;

	// Token: 0x04003E5F RID: 15967
	private float oldSpeed;

	// Token: 0x04003E60 RID: 15968
	private SignalIn startDrive;

	// Token: 0x04003E61 RID: 15969
	[HideInInspector]
	[SerializeField]
	private AkGameObj akGameObj;

	// Token: 0x04003E62 RID: 15970
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioStart;

	// Token: 0x04003E63 RID: 15971
	[SerializeField]
	[HideInInspector]
	private AudioEventSimpleLocal audioStop;

	// Token: 0x04003E64 RID: 15972
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x04003E65 RID: 15973
	private float lastSoundLoad;
}
