using System;
using UnityEngine;

// Token: 0x0200052F RID: 1327
public class HideInShadowCagePhysics : MonoBehaviour, IPreAwake
{
	// Token: 0x0600229C RID: 8860 RVA: 0x00122A9C File Offset: 0x00120C9C
	public bool PreAwake(int callcount)
	{
		this.degreesReached = SignalOut.Create("degreesReached", base.gameObject);
		return true;
	}

	// Token: 0x0600229D RID: 8861 RVA: 0x00122AB8 File Offset: 0x00120CB8
	private void Start()
	{
		this.targetDegree = Random.Range(this.degreesMin, this.degreesMax);
	}

	// Token: 0x0600229E RID: 8862 RVA: 0x00122AD4 File Offset: 0x00120CD4
	private void FixedUpdate()
	{
		Quaternion rotation = base.transform.rotation;
		if (rotation != this.previousRotation)
		{
			this.rotationDiff = Quaternion.Angle(rotation, this.previousRotation);
			this.rotationProgress -= this.rotationDiff * Mathf.Sign(base.GetComponent<Rigidbody>().angularVelocity.z);
			if (Mathf.Abs(this.rotationProgress) >= this.targetDegree)
			{
				Debug.Log("Punched at: " + this.targetDegree);
				this.cage.AddForce(this.forceToApply, 1);
				this.degreesReached.Signal();
				this.rotationProgress = 0f;
				this.targetDegree = Random.Range(this.degreesMin, this.degreesMax);
			}
			this.previousRotation = rotation;
		}
	}

	// Token: 0x040040A5 RID: 16549
	public Rigidbody cage;

	// Token: 0x040040A6 RID: 16550
	public float degreesMin;

	// Token: 0x040040A7 RID: 16551
	public float degreesMax;

	// Token: 0x040040A8 RID: 16552
	public Vector3 forceToApply;

	// Token: 0x040040A9 RID: 16553
	private float rotationProgress;

	// Token: 0x040040AA RID: 16554
	private float rotationDiff;

	// Token: 0x040040AB RID: 16555
	private Quaternion previousRotation;

	// Token: 0x040040AC RID: 16556
	private float targetDegree = 1000f;

	// Token: 0x040040AD RID: 16557
	private SignalOut degreesReached;
}
