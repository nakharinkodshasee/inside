using System;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;

// Token: 0x02000619 RID: 1561
[ExecuteInEditMode]
public class Tester : MonoBehaviour
{
	// Token: 0x060026EF RID: 9967 RVA: 0x0013A560 File Offset: 0x00138760
	private void Update()
	{
		if (this.TestClassName != this.oldTestClassName)
		{
			this.SetTestSuiteType(this.TestClassName);
			this.oldTestClassName = this.TestClassName;
		}
	}

	// Token: 0x060026F0 RID: 9968 RVA: 0x0013A59C File Offset: 0x0013879C
	private void OnEnable()
	{
		this.SetTestSuiteType(this.TestClassName);
	}

	// Token: 0x060026F1 RID: 9969 RVA: 0x0013A5AC File Offset: 0x001387AC
	private void SetTestSuiteType(string testSuiteTypeName)
	{
		this.tests.Clear();
		this.properties.Clear();
		this.testSuiteType = Type.GetType(testSuiteTypeName);
		if (this.testSuiteType != null)
		{
			if (this.testSuiteType.IsSubclassOf(typeof(MonoBehaviour)))
			{
				Object[] array = Object.FindObjectsOfType(this.testSuiteType);
				if (array.Length > 0)
				{
					this.testSuite = array[0];
				}
			}
			else
			{
				this.testSuite = this.testSuiteType.GetConstructor(Type.EmptyTypes).Invoke(null);
			}
			MethodInfo[] methods = this.testSuiteType.GetMethods();
			Debug.Log(string.Format("Found {0} methods in '{1}'.", methods.Length, this.testSuiteType));
			foreach (MethodInfo methodInfo in methods)
			{
				object[] customAttributes = methodInfo.GetCustomAttributes(typeof(Tester.TestAttribute), false);
				if (customAttributes.Length > 0 && methodInfo.ReturnType == typeof(bool) && methodInfo.GetParameters().Length == 0)
				{
					Debug.Log(" - Method '" + methodInfo + "' added to tests.");
					this.tests.Add(methodInfo);
				}
			}
			PropertyInfo[] array3 = this.testSuiteType.GetProperties();
			Debug.Log(string.Format("Found {0} properties in '{1}'.", array3.Length, this.testSuiteType));
			foreach (PropertyInfo propertyInfo in array3)
			{
				object[] customAttributes2 = propertyInfo.GetCustomAttributes(typeof(Tester.TestAttribute), false);
				if (customAttributes2.Length > 0)
				{
					Debug.Log(" - Property '" + propertyInfo + "' added to properties.");
					this.properties.Add(propertyInfo);
				}
			}
		}
	}

	// Token: 0x060026F2 RID: 9970 RVA: 0x0013A778 File Offset: 0x00138978
	private void OnGUI()
	{
		if (this.testSuiteType == null)
		{
			GUILayout.BeginArea(new Rect(0f, 0f, (float)Screen.width, (float)Screen.height));
			GUILayout.BeginVertical(new GUILayoutOption[0]);
			GUILayout.FlexibleSpace();
			GUILayout.Label("Couldn't find test class '" + this.TestClassName + "'", new GUILayoutOption[0]);
			GUILayout.EndVertical();
			GUILayout.EndArea();
		}
		else
		{
			GUILayout.BeginArea(new Rect(0f, 0f, 600f, 600f));
			GUILayout.BeginVertical(new GUILayoutOption[0]);
			GUILayout.Label("Test suite: '" + this.TestClassName + "'", new GUILayoutOption[0]);
			GUILayout.Space(20f);
			foreach (MethodInfo testMethod in this.tests)
			{
				this.addButton(testMethod);
			}
			GUILayout.Space(20f);
			foreach (PropertyInfo property in this.properties)
			{
				this.addProperty(property);
			}
			GUILayout.EndVertical();
			GUILayout.EndArea();
		}
	}

	// Token: 0x060026F3 RID: 9971 RVA: 0x0013A904 File Offset: 0x00138B04
	private void addProperty(PropertyInfo property)
	{
		GUILayout.BeginHorizontal(new GUILayoutOption[0]);
		MethodInfo getMethod = property.GetGetMethod();
		if (getMethod != null)
		{
			GUILayout.Label(property.Name + ": " + getMethod.Invoke(this.testSuite, null), new GUILayoutOption[0]);
			object[] customAttributes = property.GetCustomAttributes(typeof(Tester.TestAttribute), false);
			foreach (object obj in customAttributes)
			{
				GUILayout.Label(((Tester.TestAttribute)obj).name, new GUILayoutOption[0]);
			}
		}
		GUILayout.EndHorizontal();
	}

	// Token: 0x060026F4 RID: 9972 RVA: 0x0013A9A0 File Offset: 0x00138BA0
	private void addButton(MethodInfo testMethod)
	{
		GUILayout.BeginHorizontal(new GUILayoutOption[0]);
		if (GUILayout.Button(testMethod.Name, new GUILayoutOption[]
		{
			GUILayout.Width(200f)
		}))
		{
			this.invoke(testMethod);
		}
		Tester.TimeoutMessage timeoutMessage;
		if (this.method2messageTimeout.TryGetValue(testMethod, out timeoutMessage))
		{
			if (Time.time - timeoutMessage.time < 1f)
			{
				GUILayout.Label(timeoutMessage.message, new GUILayoutOption[]
				{
					GUILayout.Width(50f)
				});
			}
			else
			{
				GUILayout.Label(string.Empty, new GUILayoutOption[]
				{
					GUILayout.Width(50f)
				});
			}
		}
		else
		{
			GUILayout.Label(string.Empty, new GUILayoutOption[]
			{
				GUILayout.Width(50f)
			});
		}
		object[] customAttributes = testMethod.GetCustomAttributes(typeof(Tester.TestAttribute), false);
		foreach (object obj in customAttributes)
		{
			GUILayout.Label(((Tester.TestAttribute)obj).name, new GUILayoutOption[0]);
		}
		GUILayout.EndHorizontal();
	}

	// Token: 0x060026F5 RID: 9973 RVA: 0x0013AABC File Offset: 0x00138CBC
	private void invoke(MethodInfo testMethod)
	{
		bool flag = (bool)testMethod.Invoke(this.testSuite, null);
		Tester.TimeoutMessage value = new Tester.TimeoutMessage
		{
			message = ((!flag) ? "FAILED" : "OK"),
			time = Time.time,
			color = ((!flag) ? Color.red : Color.green)
		};
		if (!this.method2messageTimeout.ContainsKey(testMethod))
		{
			this.method2messageTimeout.Add(testMethod, value);
		}
		else
		{
			this.method2messageTimeout[testMethod] = value;
		}
	}

	// Token: 0x04004654 RID: 18004
	public string TestClassName = "ExampleTestClass";

	// Token: 0x04004655 RID: 18005
	private Type testSuiteType;

	// Token: 0x04004656 RID: 18006
	private object testSuite;

	// Token: 0x04004657 RID: 18007
	private List<MethodInfo> tests = new List<MethodInfo>();

	// Token: 0x04004658 RID: 18008
	private List<PropertyInfo> properties = new List<PropertyInfo>();

	// Token: 0x04004659 RID: 18009
	private string oldTestClassName;

	// Token: 0x0400465A RID: 18010
	private Dictionary<MethodInfo, Tester.TimeoutMessage> method2messageTimeout = new Dictionary<MethodInfo, Tester.TimeoutMessage>();

	// Token: 0x0200061A RID: 1562
	public class TestAttribute : Attribute
	{
		// Token: 0x060026F6 RID: 9974 RVA: 0x0013AB58 File Offset: 0x00138D58
		public TestAttribute(string name)
		{
			this.name = name;
		}

		// Token: 0x0400465B RID: 18011
		public string name;
	}

	// Token: 0x0200061B RID: 1563
	private class TimeoutMessage
	{
		// Token: 0x0400465C RID: 18012
		public string message;

		// Token: 0x0400465D RID: 18013
		public float time;

		// Token: 0x0400465E RID: 18014
		public Color color;
	}

	// Token: 0x02000669 RID: 1641
	// (Invoke) Token: 0x0600283A RID: 10298
	private delegate bool TestMethod();
}
