using System;
using UnityEngine;

// Token: 0x02000222 RID: 546
public class SecretPodLargeIndicator : MonoBehaviour, IPreAwake
{
	// Token: 0x060010E1 RID: 4321 RVA: 0x0009F65C File Offset: 0x0009D85C
	public bool PreAwake(int callcount)
	{
		this.casingColorProperty = this.casing.GetColorProperty("_Color");
		this.originalCasingColor = this.casing.GetColorValue(this.casingColorProperty);
		this.coreGlowProperty = this.core.GetFloatProperty("_GlowIntensity");
		this.orignalCoreGlow = this.core.GetFloatValue(this.coreGlowProperty);
		this.coreColorProperty = this.core.GetColorProperty("_Color");
		this.originalCoreColor = this.core.GetColorValue(this.coreColorProperty);
		this.orignalLightIntensity = this.lightSource.intensity;
		return true;
	}

	// Token: 0x060010E2 RID: 4322 RVA: 0x0009F704 File Offset: 0x0009D904
	public bool UpdateAquired()
	{
		this.acquired = User.Achievement.IsAcquired(this.achievement);
		if (this.acquired)
		{
			this.visualsOn.SetActive(true);
			this.visualsOff.SetActive(false);
			return true;
		}
		return false;
	}

	// Token: 0x060010E3 RID: 4323 RVA: 0x0009F750 File Offset: 0x0009D950
	public void FadeOut()
	{
		this.fadeTimer = this.fadeDuration;
	}

	// Token: 0x060010E4 RID: 4324 RVA: 0x0009F760 File Offset: 0x0009D960
	public void LoadComplete()
	{
		this.UpdateFadeOut(0f);
	}

	// Token: 0x060010E5 RID: 4325 RVA: 0x0009F770 File Offset: 0x0009D970
	private void Update()
	{
		if (this.fadeTimer > 0f)
		{
			this.fadeTimer -= Time.deltaTime;
			float fadeFraction = Mathf.Clamp01(this.fadeTimer / this.fadeDuration);
			this.UpdateFadeOut(fadeFraction);
		}
	}

	// Token: 0x060010E6 RID: 4326 RVA: 0x0009F7BC File Offset: 0x0009D9BC
	private void UpdateFadeOut(float fadeFraction)
	{
		this.lightSource.intensity = fadeFraction * this.orignalLightIntensity;
		Color value = Color.Lerp(this.casingFadeOutColor, this.originalCasingColor, fadeFraction);
		this.casing.SetColorProperty(this.casingColorProperty, value);
		Color value2 = Color.Lerp(this.coreFadeOutColor, this.originalCoreColor, fadeFraction);
		this.core.SetColorProperty(this.coreColorProperty, value2);
		this.core.SetFloatProperty(this.coreGlowProperty, this.orignalCoreGlow * fadeFraction);
	}

	// Token: 0x04001EA6 RID: 7846
	public AchievementPlatform.EAchievements achievement;

	// Token: 0x04001EA7 RID: 7847
	public GameObject visualsOn;

	// Token: 0x04001EA8 RID: 7848
	public GameObject visualsOff;

	// Token: 0x04001EA9 RID: 7849
	public float fadeDuration = 2f;

	// Token: 0x04001EAA RID: 7850
	public Light lightSource;

	// Token: 0x04001EAB RID: 7851
	public MaterialInstance casing;

	// Token: 0x04001EAC RID: 7852
	public MaterialInstance core;

	// Token: 0x04001EAD RID: 7853
	public Color casingFadeOutColor;

	// Token: 0x04001EAE RID: 7854
	public Color coreFadeOutColor;

	// Token: 0x04001EAF RID: 7855
	private bool acquired;

	// Token: 0x04001EB0 RID: 7856
	private float fadeTimer;

	// Token: 0x04001EB1 RID: 7857
	private float orignalLightIntensity;

	// Token: 0x04001EB2 RID: 7858
	private MaterialInstance.ColorProperty casingColorProperty;

	// Token: 0x04001EB3 RID: 7859
	private Color originalCasingColor;

	// Token: 0x04001EB4 RID: 7860
	private MaterialInstance.FloatProperty coreGlowProperty;

	// Token: 0x04001EB5 RID: 7861
	private float orignalCoreGlow;

	// Token: 0x04001EB6 RID: 7862
	private MaterialInstance.ColorProperty coreColorProperty;

	// Token: 0x04001EB7 RID: 7863
	private Color originalCoreColor;
}