using System;
using UnityEngine;

// Token: 0x02000324 RID: 804
public class FireSpriteFollower : MonoBehaviour
{
	// Token: 0x060016A5 RID: 5797 RVA: 0x000C6A44 File Offset: 0x000C4C44
	private void OnEnable()
	{
		this.x = new AttackReleaseFilter(this.attack, this.release);
		this.y = new AttackReleaseFilter(this.attack, this.release);
		this.z = new AttackReleaseFilter(this.attack, this.release);
		this.mis = new MaterialInstance[this.sprites.Length];
		this.velProps = new MaterialInstance.VectorProperty[this.sprites.Length];
		this.boundProps = new MaterialInstance.VectorProperty[this.sprites.Length];
		for (int i = 0; i < this.sprites.Length; i++)
		{
			this.mis[i] = this.sprites[i].GetComponent<MaterialInstance>();
			this.velProps[i] = this.mis[i].GetOrAddVectorProperty("_Velocity");
			this.boundProps[i] = this.mis[i].GetOrAddVectorProperty("_Bounds");
		}
	}

	// Token: 0x060016A6 RID: 5798 RVA: 0x000C6B34 File Offset: 0x000C4D34
	private void Update()
	{
		Vector3 vector = this.crate.position + this.offset;
		float num = Mathf.Max(0f, this.crate.position.y - this.cratePosOld.y);
		base.transform.position = new Vector3(base.transform.position.x, base.transform.position.y + num, base.transform.position.z);
		this.vel = vector - base.transform.position;
		float num2 = Time.deltaTime * this.speed / Mathf.Clamp(this.vel.magnitude, 0.5f, 2f);
		base.transform.position = Vector3.Lerp(base.transform.position, vector, num2);
		this.cratePosOld = this.crate.position;
		Debug.DrawLine(this.posOld, base.transform.position);
		this.posOld = base.transform.position;
		Vector2 normalized = this.crate.InverseTransformPoint(base.transform.position).normalized;
		this.angularVel = Vector2.Angle(normalized, this.rotOld);
		this.rotOld = normalized;
		float num3 = Mathf.Abs(normalized.x);
		num3 *= num3;
		bool flag = normalized.y < 0f;
		bool flag2 = normalized.x < 0f;
		Vector4 value = this.crate.position;
		value.z = this.crate.transform.eulerAngles.z * 0.017453292f;
		value.w = this.crate.transform.localScale.x * 0.5f;
		Vector3 vector2;
		vector2..ctor(this.x.Filter(this.vel.x), this.y.Filter(num), this.z.Filter(this.angularVel));
		for (int i = 0; i < this.sprites.Length; i++)
		{
			this.mis[i].SetVectorProperty(this.boundProps[i], value);
			this.mis[i].SetVectorProperty(this.velProps[i], vector2);
			this.sprites[i].SetTranslation(flag, flag2, num3);
		}
	}

	// Token: 0x04002838 RID: 10296
	public float speed = 4f;

	// Token: 0x04002839 RID: 10297
	public Transform crate;

	// Token: 0x0400283A RID: 10298
	public Vector3 offset;

	// Token: 0x0400283B RID: 10299
	[Range(0f, 10f)]
	public int attack;

	// Token: 0x0400283C RID: 10300
	[Range(0f, 10f)]
	public int release;

	// Token: 0x0400283D RID: 10301
	public FireSpriteTranslate[] sprites;

	// Token: 0x0400283E RID: 10302
	private Vector2 vel;

	// Token: 0x0400283F RID: 10303
	private float angularVel;

	// Token: 0x04002840 RID: 10304
	private Vector3 cratePosOld;

	// Token: 0x04002841 RID: 10305
	private Vector3 posOld;

	// Token: 0x04002842 RID: 10306
	private Vector2 rotOld;

	// Token: 0x04002843 RID: 10307
	private MaterialInstance[] mis;

	// Token: 0x04002844 RID: 10308
	private MaterialInstance.VectorProperty[] velProps;

	// Token: 0x04002845 RID: 10309
	private MaterialInstance.VectorProperty[] boundProps;

	// Token: 0x04002846 RID: 10310
	private AttackReleaseFilter x;

	// Token: 0x04002847 RID: 10311
	private AttackReleaseFilter y;

	// Token: 0x04002848 RID: 10312
	private AttackReleaseFilter z;
}

