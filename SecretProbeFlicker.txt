using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x0200035E RID: 862
public class SecretProbeFlicker : MonoBehaviour, IPreAwake
{
	// Token: 0x060017B6 RID: 6070 RVA: 0x000CED3C File Offset: 0x000CCF3C
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		for (int i = this.materialInstances.Count - 1; i >= 0; i--)
		{
			if (this.materialInstances[i] == null)
			{
				this.materialInstances.RemoveAt(i);
			}
		}
	}

	// Token: 0x060017B7 RID: 6071 RVA: 0x000CEDA0 File Offset: 0x000CCFA0
	public bool PreAwake(int callcount)
	{
		this.OnPreProcess();
		this.probeIdle = SignalIn.Create("probeIdle", base.gameObject, new Action(this.OnSetIdle));
		this.probeActivate = SignalIn.Create("probeActivate", base.gameObject, new Action(this.OnSetActivated));
		this.probeDeactivate = SignalIn.Create("probeDeactivate", base.gameObject, new Action(this.OnSetDeactivate));
		if (this.probeLight != null)
		{
			this.orgLightColor = this.probeLight.color;
			this.orgLightIntensity = this.probeLight.intensity;
		}
		this.miCPs.size = 0;
		this.orgColors.size = 0;
		float num = 0f;
		int i = 0;
		int count = this.materialInstances.Count;
		while (i < count)
		{
			MaterialInstance materialInstance = this.materialInstances[i];
			MaterialInstance.ColorProperty orAddColorProperty = materialInstance.GetOrAddColorProperty(this.colorPropertyName);
			Color colorValue = materialInstance.GetColorValue(orAddColorProperty);
			this.miCPs.Add(orAddColorProperty);
			this.orgColors.Add(colorValue);
			if (this.initialCurveValues)
			{
				float num2 = this.idleCurve.Evaluate(0f);
				Color color = Color.Lerp(this.idleOffColor, this.idleOnColor, num2);
				materialInstance.SetColorProperty(orAddColorProperty, color);
				if (this.probeLight != null)
				{
					num += MathUtils.Luminance(color);
				}
			}
			i++;
		}
		if (this.insideMaterialInstance != null)
		{
			this.inside_miCP = this.insideMaterialInstance.GetOrAddColorProperty(this.colorPropertyName);
			Color colorValue2 = this.insideMaterialInstance.GetColorValue(this.inside_miCP);
			float num3 = this.idleCurve.Evaluate(0f);
			Color value = Color.Lerp(this.idleOffColor, this.idleOnColor, num3) * this.insideColorMultiplier;
			this.insideMaterialInstance.SetColorProperty(this.inside_miCP, value);
		}
		if (this.initialCurveValues && this.probeLight != null)
		{
			num /= (float)this.materialInstances.Count;
			this.probeLight.intensity = num * this.lightMultiplier;
		}
		return true;
	}

	// Token: 0x060017B8 RID: 6072 RVA: 0x000CEFE0 File Offset: 0x000CD1E0
	private void Awake()
	{
		if (this.idleOnStart)
		{
			this.SetIdleState();
		}
	}

	// Token: 0x060017B9 RID: 6073 RVA: 0x000CEFF4 File Offset: 0x000CD1F4
	private void Update()
	{
		if (this.rotateLight)
		{
			Vector3 position = base.gameObject.transform.position;
			float x = Vector3.Distance(position, ScriptGlobals.mainCharacter.pos3);
			this.falloff = MathUtils.SmoothStep(this.minBoyDistance, this.maxBoyDistance, x) * -1f + 1f;
		}
		if (this.state != SecretProbeFlicker.State.None)
		{
			switch (this.state)
			{
			case SecretProbeFlicker.State.Idle:
				this.IdleState();
				break;
			case SecretProbeFlicker.State.Delay:
				this.DelayState();
				break;
			case SecretProbeFlicker.State.Activated:
				this.ActivatedState();
				break;
			}
		}
	}

	// Token: 0x060017BA RID: 6074 RVA: 0x000CF0A0 File Offset: 0x000CD2A0
	private void RestoreValues()
	{
		if (this.probeLight != null)
		{
			this.probeLight.color = this.orgLightColor;
			this.probeLight.intensity = this.orgLightIntensity;
		}
		int i = 0;
		int count = this.materialInstances.Count;
		while (i < count)
		{
			this.materialInstances[i].SetColorProperty(this.miCPs.raw[i], this.orgColors.raw[i]);
			i++;
		}
	}

	// Token: 0x060017BB RID: 6075 RVA: 0x000CF134 File Offset: 0x000CD334
	private void SetIdleState()
	{
		this.offsetFloats.size = 0;
		int i = 0;
		int count = this.materialInstances.Count;
		while (i < count)
		{
			float v = Random.Range(-this.idleCurveOffset, this.idleCurveOffset);
			this.offsetFloats.Add(v);
			i++;
		}
		this.time = 0f;
		if (this.timeFromBoyDist)
		{
			Vector3 position = base.gameObject.transform.position;
			float x = Vector3.Distance(position, ScriptGlobals.mainCharacter.pos3);
			this.falloff = MathUtils.SmoothStep(this.minBoyDistance, this.maxBoyDistance, x) * -1f + 1f;
			this.animTime = Mathf.Lerp(this.idleAnimTimeMin, this.idleAnimTimeMax, this.falloff);
		}
		else
		{
			this.animTime = Random.Range(this.idleAnimTimeMin, this.idleAnimTimeMax);
		}
		this.state = SecretProbeFlicker.State.Idle;
	}

	// Token: 0x060017BC RID: 6076 RVA: 0x000CF228 File Offset: 0x000CD428
	private void IdleState()
	{
		if (this.time < this.animTime)
		{
			this.time += Time.deltaTime;
			float num = 1f / this.animTime;
			float num2 = 0f;
			float num3 = this.time * num;
			int count = this.materialInstances.Count;
			Color color = this.idleOffColor;
			for (int i = 0; i < count; i++)
			{
				float num4 = num3;
				num4 += this.offsetFloats.raw[i];
				float num5 = this.idleCurve.Evaluate(num4);
				color.r = this.idleOffColor.r * (1f - num5) + this.idleOnColor.r * num5;
				color.g = this.idleOffColor.g * (1f - num5) + this.idleOnColor.g * num5;
				color.b = this.idleOffColor.b * (1f - num5) + this.idleOnColor.b * num5;
				color.a = this.idleOffColor.a * (1f - num5) + this.idleOnColor.a * num5;
				num2 += MathUtils.Luminance(color);
				this.materialInstances[i].SetColorProperty(this.miCPs.raw[i], color);
			}
			if (this.probeLight != null)
			{
				if (this.setLightIntensity)
				{
					num2 /= (float)count;
					this.probeLight.intensity = num2 * this.lightMultiplier;
				}
				if (this.rotateLight)
				{
					float num6 = this.time * num;
					float num7 = this.idleCurve.Evaluate(num6);
					this.probeLight.intensity = num7 * this.lightMultiplier;
					float num8 = Mathf.Lerp(this.rotateSpeedMin, this.rotateSpeedMax, this.falloff) * Time.deltaTime;
					if (this.rotationTransformX != null)
					{
						this.rotationTransformX.Rotate(num8, 0f, 0f);
					}
					if (this.rotationTransformZ != null)
					{
						this.rotationTransformZ.Rotate(0f, 0f, num8 * this.rotationZMultiplier);
					}
					Color color2 = Color.Lerp(this.lightColorMin, this.lightColorMax, this.falloff);
					this.probeLight.color = color2;
					if (this.insideMaterialInstance != null)
					{
						this.insideMaterialInstance.SetColorProperty(this.inside_miCP, color2 * this.insideColorMultiplier * num7);
					}
				}
				int j = 0;
				int count2 = this.flares.Count;
				while (j < count2)
				{
					Vector3 vector = this.flares[j].transform.position - this.probeLight.transform.position;
					float num9 = Mathf.Clamp01(this.probeLight.transform.InverseTransformDirection(vector).z) * this.probeLight.intensity;
					this.flares[j].color = Color.Lerp(this.flareColorMin, this.flareColorMax, num9);
					j++;
				}
			}
		}
		else
		{
			int k = 0;
			int count3 = this.materialInstances.Count;
			while (k < count3)
			{
				if (!(this.materialInstances[k] == null))
				{
					this.materialInstances[k].SetColorProperty(this.miCPs.raw[k], this.idleOffColor);
				}
				k++;
			}
			if (this.probeLight != null)
			{
			}
			this.SetDelayState();
		}
	}

	// Token: 0x060017BD RID: 6077 RVA: 0x000CF600 File Offset: 0x000CD800
	private void SetDelayState()
	{
		if (this.timeFromBoyDist)
		{
			Vector3 position = base.gameObject.transform.position;
			float x = Vector3.Distance(position, ScriptGlobals.mainCharacter.pos3);
			this.falloff = MathUtils.SmoothStep(this.minBoyDistance, this.maxBoyDistance, x) * -1f + 1f;
			this.waitTimer = Mathf.Lerp(this.waitDelayMin, this.waitDelayMax, this.falloff);
		}
		else
		{
			this.waitTimer = Random.Range(this.waitDelayMin, this.waitDelayMax);
		}
		if (this.waitTimer <= 0f)
		{
			this.SetIdleState();
		}
		else
		{
			this.state = SecretProbeFlicker.State.Delay;
		}
	}

	// Token: 0x060017BE RID: 6078 RVA: 0x000CF6BC File Offset: 0x000CD8BC
	private void DelayState()
	{
		if (this.waitTimer > 0f)
		{
			this.waitTimer -= Time.deltaTime;
		}
		else
		{
			this.SetIdleState();
		}
	}

	// Token: 0x060017BF RID: 6079 RVA: 0x000CF6EC File Offset: 0x000CD8EC
	private void SetActivatedState()
	{
		this.time = 0f;
		this.animTime = Random.Range(this.activatedAnimTimeMin, this.activatedAnimTimeMax);
		if (this.rotateLight)
		{
			if (this.rotationTransformX != null)
			{
				this.rotationTransformX.localEulerAngles = Vector3.zero;
			}
			if (this.rotationTransformZ != null)
			{
				this.rotationTransformZ.localEulerAngles = Vector3.zero;
			}
			if (this.probeLight != null)
			{
				this.probeLight.transform.localEulerAngles = new Vector3(280f, 0f, 0f);
			}
		}
		this.state = SecretProbeFlicker.State.Activated;
	}

	// Token: 0x060017C0 RID: 6080 RVA: 0x000CF7A4 File Offset: 0x000CD9A4
	private void ActivatedState()
	{
		if (this.time < this.animTime)
		{
			this.time += Time.deltaTime;
			float num = 1f / this.animTime;
			float num2 = 0f;
			int i = 0;
			int count = this.materialInstances.Count;
			while (i < count)
			{
				float num3 = this.time * num;
				float num4 = this.activatedCurve.Evaluate(num3);
				Color color = Color.Lerp(this.activeOffColor, this.activeOnColor, num4);
				num2 += MathUtils.Luminance(color);
				this.materialInstances[i].SetColorProperty(this.miCPs.raw[i], color);
				i++;
			}
			if (this.probeLight != null)
			{
				if (this.setLightIntensity)
				{
					num2 /= (float)this.materialInstances.Count;
					this.probeLight.intensity = num2 * this.lightMultiplier;
				}
				if (this.rotateLight)
				{
					float num5 = this.time * num;
					float num6 = this.activatedCurve.Evaluate(num5);
					this.probeLight.intensity = num6 * this.lightMultiplier;
					Color color2 = Color.Lerp(this.lightColorMin, this.lightColorMax, this.falloff);
					this.probeLight.color = color2;
					if (this.insideMaterialInstance != null)
					{
						this.insideMaterialInstance.SetColorProperty(this.inside_miCP, color2 * this.insideColorMultiplier * num6);
					}
				}
				int j = 0;
				int count2 = this.flares.Count;
				while (j < count2)
				{
					Vector3 vector = this.flares[j].transform.position - this.probeLight.transform.position;
					float num7 = Mathf.Clamp01(this.probeLight.transform.InverseTransformDirection(vector).z) * this.probeLight.intensity;
					this.flares[j].color = Color.Lerp(this.flareColorMin, this.flareColorMax, num7);
					j++;
				}
			}
		}
		else
		{
			int k = 0;
			int count3 = this.materialInstances.Count;
			while (k < count3)
			{
				if (!(this.materialInstances[k] == null))
				{
					this.materialInstances[k].SetColorProperty(this.miCPs.raw[k], this.activeOffColor);
				}
				k++;
			}
			if (this.probeLight != null)
			{
			}
			this.state = SecretProbeFlicker.State.None;
		}
	}

	// Token: 0x060017C1 RID: 6081 RVA: 0x000CFA58 File Offset: 0x000CDC58
	private void SetDeactivatedState()
	{
		float num = 0f;
		int i = 0;
		int count = this.materialInstances.Count;
		while (i < count)
		{
			num += MathUtils.Luminance(this.activeOffColor);
			this.materialInstances[i].SetColorProperty(this.miCPs.raw[i], this.activeOffColor);
			i++;
		}
		if (this.probeLight != null)
		{
			if (this.setLightIntensity && this.materialInstances.Count > 0)
			{
				num /= (float)this.materialInstances.Count;
				this.probeLight.intensity = num * this.lightMultiplier;
			}
			int j = 0;
			int count2 = this.flares.Count;
			while (j < count2)
			{
				Vector3 vector = this.flares[j].transform.position - this.probeLight.transform.position;
				float num2 = Mathf.Clamp01(this.probeLight.transform.InverseTransformDirection(vector).z) * this.probeLight.intensity;
				this.flares[j].color = Color.Lerp(this.flareColorMin, this.flareColorMax, num2);
				j++;
			}
		}
		this.state = SecretProbeFlicker.State.None;
	}

	// Token: 0x060017C2 RID: 6082 RVA: 0x000CFBB0 File Offset: 0x000CDDB0
	public void OnSetIdle()
	{
		this.SetIdleState();
	}

	// Token: 0x060017C3 RID: 6083 RVA: 0x000CFBB8 File Offset: 0x000CDDB8
	public void OnSetActivated()
	{
		this.SetActivatedState();
	}

	// Token: 0x060017C4 RID: 6084 RVA: 0x000CFBC0 File Offset: 0x000CDDC0
	public void OnSetDeactivate()
	{
		this.SetDeactivatedState();
	}

	// Token: 0x04002A5E RID: 10846
	public Light probeLight;

	// Token: 0x04002A5F RID: 10847
	public float lightMultiplier = 1f;

	// Token: 0x04002A60 RID: 10848
	[Tooltip("Set light intensity based on material instances combined color luminance...")]
	public bool setLightIntensity = true;

	// Token: 0x04002A61 RID: 10849
	[Header("--- Rotating Light Settings ---")]
	public bool rotateLight;

	// Token: 0x04002A62 RID: 10850
	public Transform rotationTransformX;

	// Token: 0x04002A63 RID: 10851
	public Transform rotationTransformZ;

	// Token: 0x04002A64 RID: 10852
	public float rotationZMultiplier = -0.444f;

	// Token: 0x04002A65 RID: 10853
	public float rotateSpeedMin = 10f;

	// Token: 0x04002A66 RID: 10854
	public float rotateSpeedMax = 100f;

	// Token: 0x04002A67 RID: 10855
	public Color lightColorMin = Color.white;

	// Token: 0x04002A68 RID: 10856
	public Color lightColorMax = Color.red;

	// Token: 0x04002A69 RID: 10857
	public Color flareColorMin = Color.black;

	// Token: 0x04002A6A RID: 10858
	public Color flareColorMax = Color.white;

	// Token: 0x04002A6B RID: 10859
	[Header("--- References ---")]
	public List<MaterialInstance> materialInstances = new List<MaterialInstance>();

	// Token: 0x04002A6C RID: 10860
	public List<LensFlareSimple> flares = new List<LensFlareSimple>();

	// Token: 0x04002A6D RID: 10861
	public MaterialInstance insideMaterialInstance;

	// Token: 0x04002A6E RID: 10862
	private MaterialInstance.ColorProperty inside_miCP;

	// Token: 0x04002A6F RID: 10863
	public float insideColorMultiplier = 1f;

	// Token: 0x04002A70 RID: 10864
	private FastList<MaterialInstance.ColorProperty> miCPs = new FastList<MaterialInstance.ColorProperty>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04002A71 RID: 10865
	private FastList<Color> orgColors = new FastList<Color>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04002A72 RID: 10866
	public string colorPropertyName = "_Color";

	// Token: 0x04002A73 RID: 10867
	[Header("--- Idle Settings ---")]
	public AnimationCurve idleCurve;

	// Token: 0x04002A74 RID: 10868
	public float idleAnimTimeMin = 0.75f;

	// Token: 0x04002A75 RID: 10869
	public float idleAnimTimeMax = 0.95f;

	// Token: 0x04002A76 RID: 10870
	public Color idleOffColor = Color.black;

	// Token: 0x04002A77 RID: 10871
	public Color idleOnColor = Color.white;

	// Token: 0x04002A78 RID: 10872
	public float idleCurveOffset = 0.1f;

	// Token: 0x04002A79 RID: 10873
	[Tooltip("Enter idle state on startup...")]
	public bool idleOnStart;

	// Token: 0x04002A7A RID: 10874
	[Header("--- Activate Settings ---")]
	public AnimationCurve activatedCurve;

	// Token: 0x04002A7B RID: 10875
	public float activatedAnimTimeMin = 0.75f;

	// Token: 0x04002A7C RID: 10876
	public float activatedAnimTimeMax = 0.95f;

	// Token: 0x04002A7D RID: 10877
	public Color activeOffColor = Color.black;

	// Token: 0x04002A7E RID: 10878
	public Color activeOnColor = Color.white;

	// Token: 0x04002A7F RID: 10879
	[Tooltip("Use distance to boy for setting min and max time on delay and idle states...")]
	[Header("--- Misc Settings ---")]
	public bool timeFromBoyDist;

	// Token: 0x04002A80 RID: 10880
	private float animTime = 1f;

	// Token: 0x04002A81 RID: 10881
	public float minBoyDistance = 1f;

	// Token: 0x04002A82 RID: 10882
	public float maxBoyDistance = 10f;

	// Token: 0x04002A83 RID: 10883
	private float waitTimer;

	// Token: 0x04002A84 RID: 10884
	public float waitDelayMin = 1f;

	// Token: 0x04002A85 RID: 10885
	public float waitDelayMax = 3f;

	// Token: 0x04002A86 RID: 10886
	public bool initialCurveValues;

	// Token: 0x04002A87 RID: 10887
	private FastList<float> offsetFloats = new FastList<float>(0, FastListExpandMode.Exponential, 100);

	// Token: 0x04002A88 RID: 10888
	private float time;

	// Token: 0x04002A89 RID: 10889
	public float falloff;

	// Token: 0x04002A8A RID: 10890
	private Color orgLightColor = Color.white;

	// Token: 0x04002A8B RID: 10891
	private float orgLightIntensity;

	// Token: 0x04002A8C RID: 10892
	private SecretProbeFlicker.State state;

	// Token: 0x04002A8D RID: 10893
	public SignalIn probeIdle;

	// Token: 0x04002A8E RID: 10894
	public SignalIn probeActivate;

	// Token: 0x04002A8F RID: 10895
	public SignalIn probeDeactivate;

	// Token: 0x04002A90 RID: 10896
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x0200035F RID: 863
	private enum State
	{
		// Token: 0x04002A92 RID: 10898
		None,
		// Token: 0x04002A93 RID: 10899
		Idle,
		// Token: 0x04002A94 RID: 10900
		Delay,
		// Token: 0x04002A95 RID: 10901
		Activated
	}
}
