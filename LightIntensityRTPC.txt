using System;
using UnityEngine;

// Token: 0x02000296 RID: 662
public class LightIntensityRTPC : MonoBehaviour
{
	// Token: 0x0600140F RID: 5135 RVA: 0x000B9EB4 File Offset: 0x000B80B4
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		this.rtpc = new RTPC(this.RtpcName, false);
	}

	// Token: 0x06001410 RID: 5136 RVA: 0x000B9EDC File Offset: 0x000B80DC
	private void Start()
	{
		this.OnPreProcess();
		if (!this.lightObject && base.GetComponent<Light>())
		{
			this.lightObject = base.GetComponent<Light>();
		}
		GameObject go;
		if (this.keyObject == AudioKeyObject.Key.This)
		{
			go = base.gameObject;
		}
		else if (this.keyObject == AudioKeyObject.Key.Custom)
		{
			RTPCCapsule component = this.useThisObj.GetComponent<RTPCCapsule>();
			if (component)
			{
				go = component.audioSourceGameObject;
			}
			else
			{
				go = this.useThisObj;
			}
		}
		else
		{
			go = AudioKeyObject.GetObject(this.keyObject, null, null);
		}
		this.akGameObj = AudioUtils.EnsureAkGameObj(go, this);
	}

	// Token: 0x06001411 RID: 5137 RVA: 0x000B9F8C File Offset: 0x000B818C
	private void Update()
	{
		if (!this.lightObject || !this.akGameObj)
		{
			return;
		}
		float num = this.highValue - this.lowValue;
		float num2 = this.lightObject.intensity - this.lowValue;
		float num3 = Mathf.InverseLerp(0f, num, num2);
		float num4 = Mathf.Lerp(this.lowRTPC, this.highRTPC, num3);
		if (num4 != this.previousRtpc && SoundEngine.IsRunning && SoundEngine.AreEngineUpdatesEnabled())
		{
			this.rtpc.SetFast(num4, this.akGameObj, 0f);
		}
		this.previousRtpc = num4;
	}

	// Token: 0x04002482 RID: 9346
	public AudioKeyObject.Key keyObject;

	// Token: 0x04002483 RID: 9347
	public bool useOtherGameObj;

	// Token: 0x04002484 RID: 9348
	public GameObject useThisObj;

	// Token: 0x04002485 RID: 9349
	public Light lightObject;

	// Token: 0x04002486 RID: 9350
	public float lowValue;

	// Token: 0x04002487 RID: 9351
	public float highValue = 8f;

	// Token: 0x04002488 RID: 9352
	public string RtpcName = string.Empty;

	// Token: 0x04002489 RID: 9353
	public float lowRTPC;

	// Token: 0x0400248A RID: 9354
	public float highRTPC = 100f;

	// Token: 0x0400248B RID: 9355
	public bool debugIntensity;

	// Token: 0x0400248C RID: 9356
	private float previousRtpc;

	// Token: 0x0400248D RID: 9357
	private AkGameObj akGameObj;

	// Token: 0x0400248E RID: 9358
	private bool firstExecution;

	// Token: 0x0400248F RID: 9359
	private float intensityDebugMaxValue = float.MinValue;

	// Token: 0x04002490 RID: 9360
	private float intensityDebugMinValue = float.MaxValue;

	// Token: 0x04002491 RID: 9361
	[HideInInspector]
	[SerializeField]
	private RTPC rtpc;

	// Token: 0x04002492 RID: 9362
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;
}