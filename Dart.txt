using System;
using System.Collections.Generic;
using UnityEngine;

// Token: 0x02000193 RID: 403
public class Dart : MonoBehaviour, IFastEventExListener<Collider>, IPreAwake
{
	// Token: 0x06000BC1 RID: 3009 RVA: 0x00073518 File Offset: 0x00071718
	[LateProcessBuild(0)]
	private void OnPreProcess()
	{
		if (this.preProcessed)
		{
			return;
		}
		this.preProcessed = true;
		AkGameObj akGameObj = AudioUtils.EnsureAkGameObj(this.gunLocation.gameObject, this);
		this.audioShot = new AudioEventSimpleLocal(this.audioPrefix + "_dart_shot", akGameObj);
		this.audioMissBoy = new AudioEventSimple(this.audioPrefix + "_dart_hit" + this.audioMissMaterial);
		this.audioHitBoy = new AudioEventSimple(this.audioPrefix + "_dart_hitBoy");
		this.dartEffectHolder = new GameObject("DartEffectHolder").transform;
		this.dartEffectHolder.parent = base.transform.parent;
		this.dartEffectHolder.localPosition = Vector3Fast.zero;
		this.dartEffects = new DartEffect[this.maxDartsMissingBoy];
		for (int i = 0; i < this.maxDartsMissingBoy; i++)
		{
			Transform transform = Object.Instantiate<GameObject>(this.dartEffectPrefab).transform;
			transform.parent = this.dartEffectHolder;
			this.dartEffectHolder.localPosition = Vector3Fast.zero;
			transform.gameObject.SetActive(false);
			this.dartEffects[i] = transform.GetComponent<DartEffect>();
		}
		int num = this.edgeTriggers.Length;
		this.edgeTriggerEnterHandles = new int[num];
		for (int j = 0; j < num; j++)
		{
			this.edgeTriggerEnterHandles[j] = -1;
		}
		this.edgeTriggerExitHandles = new int[num];
		for (int k = 0; k < num; k++)
		{
			this.edgeTriggerExitHandles[k] = -1;
		}
	}

	// Token: 0x06000BC2 RID: 3010 RVA: 0x000736B0 File Offset: 0x000718B0
	public bool PreAwake(int callcount)
	{
		this.tranquilise = SignalIn.Create("tranquilise", base.gameObject, new Action(this.OnTranquilise));
		this.kill = SignalIn.Create("kill", base.gameObject, new Action(this.OnKill));
		this.stopShooting = SignalIn.Create("stopShooting", base.gameObject, new Action(this.OnStopShooting));
		this.enableKillStanding = SignalIn.Create("enableKillStandig", base.gameObject, new Action(this.OnEnableKillStanding));
		this.boyShot = SignalOut.Create("boyShot", base.gameObject);
		this.missShot = SignalOut.Create("missShot", base.gameObject);
		this.firstShot = SignalOut.Create("firstShot", base.gameObject);
		this.shotFired = SignalOut.Create("shotFired", base.gameObject);
		this.enableMissFireVisual = SignalIn.Create("enableMissFireVisual", base.gameObject, new Action(this.EnableMissFireVisuals));
		this.disableMissFireVisual = SignalIn.Create("disableMissFireVisual", base.gameObject, new Action(this.DsiableMissFireVisuals));
		this.forceFallBack = SignalIn.Create("forceFallBack", base.gameObject, new Action(this.SetForceFallBack));
		return true;
	}

	// Token: 0x06000BC3 RID: 3011 RVA: 0x00073804 File Offset: 0x00071A04
	private void Start()
	{
		this.OnPreProcess();
		this.limitInput = base.GetComponent<BoySetInput>();
		this.dartTransform = this.dartParent.transform;
		if (this.dartParent.activeSelf)
		{
			this.dartParent.SetActive(false);
		}
		this.pauseTimer = this.pauseDelay;
		this.currentDartsMissingBoy = Random.Range(this.minDartsMissingBoy, this.maxDartsMissingBoy + 1);
		int i = 0;
		int num = this.edgeTriggers.Length;
		while (i < num)
		{
			CollisionEvents collisionEvents = this.edgeTriggers[i];
			collisionEvents.enterTrigger.Register(this, ref this.edgeTriggerEnterHandles[i]);
			collisionEvents.exitTrigger.Register(this, ref this.edgeTriggerExitHandles[i]);
			i++;
		}
		this.boy = ScriptGlobals.boy;
	}

	// Token: 0x06000BC4 RID: 3012 RVA: 0x000738D4 File Offset: 0x00071AD4
	private void SetShootState()
	{
		if (this.state != Dart.State.None)
		{
			return;
		}
		this.state = Dart.State.Shoot;
	}

	// Token: 0x06000BC5 RID: 3013 RVA: 0x000738EC File Offset: 0x00071AEC
	private void ShootState()
	{
		if (this.forceStopShooting)
		{
			return;
		}
		if (!this.firstShotFired)
		{
			this.firstShot.Signal();
			this.firstShotFired = true;
		}
		if (this.boy.velocity3.magnitude < 0.5f && this.killBoyIfStandingStill)
		{
			this.pauseTimer -= Time.deltaTime;
			if (this.pauseTimer <= 0f)
			{
				this.SetPrepareState();
				return;
			}
		}
		else if (this.pauseTimer < this.pauseDelay)
		{
			this.pauseTimer += Time.deltaTime;
		}
		if (this.shootTimer > 0f)
		{
			this.shootTimer -= Time.deltaTime;
		}
		else if (this.currentDartCount >= this.currentDartsMissingBoy)
		{
			if (this.boy.state is BoyJumpState)
			{
				this.dieOnLanding = true;
			}
			else
			{
				this.SetPrepareState();
			}
		}
		else
		{
			this.shootTimer = Random.Range(this.minShootDelay, this.maxShootDelay);
			this.PrepareDartEffect();
		}
	}

	// Token: 0x06000BC6 RID: 3014 RVA: 0x00073A1C File Offset: 0x00071C1C
	private void SetPrepareState()
	{
		this.audioShot.PostFast();
		this.shotFired.Signal();
		if (!this.firstShotFired)
		{
			this.firstShot.Signal();
			this.firstShotFired = true;
		}
		this.state = Dart.State.Prepare;
	}

	// Token: 0x06000BC7 RID: 3015 RVA: 0x00073A5C File Offset: 0x00071C5C
	private void PrepareState()
	{
		this.killShotDelayTimer += Time.deltaTime;
		if (this.killShotDelayTimer >= this.timeToHit && !this.boy.isDead)
		{
			this.SetTranquiliseState();
		}
	}

	// Token: 0x06000BC8 RID: 3016 RVA: 0x00073A98 File Offset: 0x00071C98
	private void SetTranquiliseState()
	{
		this.boyShot.Signal();
		Transform transform = this.boy.visualBoy.actor.bones[this.boy.visualBoy.actor.GetBone("SpineB")].transform;
		this.dartTransform.position = transform.position;
		this.dartTransform.rotation = transform.rotation;
		this.dartTransform.parent = transform;
		this.audioHitBoy.PostFast(AudioKeyObject.AkGameObjs.boy);
		RumbleManager.instance.AddOneTimeEffect(RumbleEffect.RumbleEffects.Spike, 0.5f, 0.2f, 0, 0f);
		ThemeUtils.SetBoyTheme(this.boy.visualBoy, "Dart", VisualBoy.ThemePriority.High);
		this.limitInput.activateScript();
		this.limitInput.posCapY = 0f;
		float num = Mathf.Sign(this.gunLocation.position.x - this.boy.pos3.x) * this.boy.facing;
		if (this.boy.state is BoyRunState)
		{
			float num2 = Mathf.Abs(this.boy.velocity3.x);
			AnimClipNode animClipNode;
			if (this.dieOnLanding && this.animDieLanding)
			{
				animClipNode = this.animDieLanding;
				this.AlignToGround(animClipNode.transform);
				this.boy.Kill();
			}
			else if (num2 > 1f)
			{
				if (this.currentEdge == 0f && this.animKillRunningBack.Length > 0 && this.animKillRunningFront.Length > 0)
				{
					if (num == -1f)
					{
						animClipNode = this.animKillRunningBack[Random.Range(0, this.animKillRunningBack.Length)];
					}
					else
					{
						animClipNode = this.animKillRunningFront[Random.Range(0, this.animKillRunningFront.Length)];
					}
					this.AlignToGround(animClipNode.transform);
					this.boy.Kill();
				}
				else
				{
					animClipNode = ((num != 1f) ? this.animHitRunFW : this.animHitRunBW);
				}
			}
			else
			{
				animClipNode = ((num != 1f) ? this.animHitIdleFW : this.animHitIdleBW);
			}
			if (this.CheckKillAngle(animClipNode.transform))
			{
				BoyUtils.StartCustomAnim(this.boy, animClipNode, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
			}
		}
		else if (this.boy.state is BoyGrabPlateauState)
		{
			BoyUtils.ClearState(this.boy, -1f);
		}
		if (num == 1f)
		{
			this.dartVisuals.localPosition = this.dartFrontPos.localPosition;
			this.dartVisuals.localRotation = this.dartFrontPos.localRotation;
		}
		this.dartParent.SetActive(true);
		this.shootTimer = Random.Range(this.minShootDelay, this.maxShootDelay);
		this.shootTimer -= this.timeToHit;
		if (this.boy.isDead)
		{
			this.state = Dart.State.Kill;
		}
		else
		{
			this.state = Dart.State.Tranquilise;
		}
	}

	// Token: 0x06000BC9 RID: 3017 RVA: 0x00073DD0 File Offset: 0x00071FD0
	private void TranquiliseState()
	{
		if (this.shootTimer > 0f)
		{
			this.shootTimer -= Time.deltaTime;
			if (this.shootTimer <= 0f && this.currentDartCount < this.currentDartsMissingBoy)
			{
				this.shootTimer = Random.Range(this.minShootDelay, this.maxShootDelay);
				this.PrepareDartEffect();
			}
		}
		if (!this.isJumpDisabled && this.timer > this.timeRemoveJump)
		{
			this.limitInput.useJumpVal = true;
			this.isJumpDisabled = true;
		}
		BoyGrabPlateauState boyGrabPlateauState = this.boy.state as BoyGrabPlateauState;
		if (boyGrabPlateauState != null)
		{
			this.limitInput.useStickVal_Y = true;
			this.limitInput.stickVal.y = -1f;
		}
		else
		{
			this.limitInput.useStickVal_Y = false;
		}
		float num = 1f;
		if (this.timeTotal > 0f)
		{
			num = 1f - this.inputLimitCurve.Evaluate(this.timer / this.timeTotal);
		}
		this.limitInput.negCapX = num * -1f;
		this.limitInput.posCapX = num * 1f;
		this.timer += Time.deltaTime;
		if (this.timer >= this.timeTotal)
		{
			this.SetSleepState();
			return;
		}
	}

	// Token: 0x06000BCA RID: 3018 RVA: 0x00073F38 File Offset: 0x00072138
	private void SetSleepState()
	{
		this.limitInput.negCapX = 0f;
		this.limitInput.posCapX = 0f;
		this.limitInput.negCapY = 0f;
		this.limitInput.posCapY = 0f;
		if (this.allowSpecialAirKill && this.boy.state is BoyJumpState)
		{
			this.dieOnLanding = true;
		}
		this.state = Dart.State.Sleep;
	}

	// Token: 0x06000BCB RID: 3019 RVA: 0x00073FB4 File Offset: 0x000721B4
	private void SleepState()
	{
		if (this.boy.isDead)
		{
			return;
		}
		BoyReachPlateauState boyReachPlateauState = this.boy.state as BoyReachPlateauState;
		if (!BoyState.op_True(boyReachPlateauState))
		{
			if (this.boy.state as BoyGrabPlateauState)
			{
				BoyUtils.ClearState(this.boy, -1f);
			}
			else if (this.boy.status.groundPlateau != null)
			{
				this.FallAsleep();
			}
			return;
		}
		if (boyReachPlateauState.climbDown)
		{
			return;
		}
		float num = (boyReachPlateauState.plateau.pos2.x - this.boy.pos.x) * this.boy.facing;
		if (num < 0.05f)
		{
			BoyUtils.ClearState(this.boy, -1f);
		}
	}

	// Token: 0x06000BCC RID: 3020 RVA: 0x00074094 File Offset: 0x00072294
	private void KillState()
	{
		if (!this.deathAnim)
		{
			BoyCustomAnimState boyCustomAnimState = this.boy.state as BoyCustomAnimState;
			if (boyCustomAnimState)
			{
				AnimClipNode anim = boyCustomAnimState.anim as AnimClipNode;
				this.audioDeathExhaleFrame = this.GetDeathExhaleFrame(anim);
				if (this.audioDeathExhaleFrame > 0f)
				{
					this.deathAnim = anim;
				}
			}
		}
		else if (!this.audioDeathComplete && this.deathAnim.frame > this.audioDeathExhaleFrame)
		{
			SingletonBehaviour<BoyAudio>.instance.ExhaleImmediatelyWithStateOverride(BoyVoiceState.ActionState.die);
			this.audioDeathComplete = true;
		}
		if (this.killTimer > 0f)
		{
			this.killTimer -= Time.deltaTime;
			PersistentBehaviour<GameManager>.instance.deathManager.ResetTimeElapsed();
		}
		if (this.shootTimer > 0f)
		{
			this.shootTimer -= Time.deltaTime;
			if (this.shootTimer <= 0f && this.currentDartCount < this.currentDartsMissingBoy)
			{
				this.shootTimer = Random.Range(this.minShootDelay, this.maxShootDelay);
				this.PrepareDartEffect();
			}
		}
	}

	// Token: 0x06000BCD RID: 3021 RVA: 0x000741C8 File Offset: 0x000723C8
	private void FixedUpdate()
	{
		if (this.state != Dart.State.None)
		{
			switch (this.state)
			{
			case Dart.State.Prepare:
				this.PrepareState();
				break;
			case Dart.State.Shoot:
				this.ShootState();
				break;
			case Dart.State.Kill:
				this.KillState();
				break;
			case Dart.State.Tranquilise:
				this.TranquiliseState();
				break;
			case Dart.State.Sleep:
				this.SleepState();
				break;
			}
		}
		if (this.shotQueue.Count > 0)
		{
			this.shotDelayTimer += Time.deltaTime;
			if (this.shotDelayTimer >= this.timeToHit)
			{
				DartEffect dartEffect = this.dartEffects[this.currentDartIndex];
				dartEffect.Place(this.shotQueue[0], this.gunLocation.position, Vector3Fast.zero);
				if (!this.missFireVisualsEnabled)
				{
					dartEffect.gameObject.SetActive(false);
				}
				this.shotQueue.RemoveAt(0);
				this.missShot.Signal();
				this.audioMissBoy.PostFast(dartEffect.akGameObj);
				this.shotDelayTimer = 0f;
				this.currentDartIndex++;
			}
		}
	}

	// Token: 0x06000BCE RID: 3022 RVA: 0x000742FC File Offset: 0x000724FC
	private void PrepareDartEffect()
	{
		Vector3 vector = this.FindDartTarget();
		if (vector != Vector3Fast.zero && (!this.maxDartPos || vector.x < this.maxDartPos.position.x))
		{
			this.shotFired.Signal();
			this.audioShot.PostFast();
			this.shotQueue.Add(vector);
		}
		this.currentDartCount++;
	}

	// Token: 0x06000BCF RID: 3023 RVA: 0x00074380 File Offset: 0x00072580
	private Vector3 FindDartTarget()
	{
		Vector2 vector = Random.insideUnitCircle.normalized * (0.6f + Random.value * 1f);
		Vector3 pos = this.boy.pos3;
		Vector3 vector2 = pos;
		vector2.x += vector.x;
		vector2.z += vector.y;
		if (this.previousShotInDepth && vector2.z > 0f)
		{
			vector2.z *= -1f;
		}
		this.previousShotInDepth = (vector2.z > 0f);
		float num = vector2.x - pos.x;
		if (vector2.z < 0f && Mathf.Abs(num) < this.dartMinDistX)
		{
			vector2.x = pos.x + Mathf.Sign(num) * this.dartMinDistX;
		}
		Ray ray;
		ray..ctor(vector2, Vector3.down);
		RaycastHit[] hits = Physics.RaycastAll(ray, 2.3f);
		Vector3 point = PhysicsUtils.GetClosestValidHit(hits, LayerMask.NameToLayer("Ungrouped"), true).point;
		if (point != Vector3.zero)
		{
			if (this.minDartPos)
			{
				float num2 = this.minDartPos.position.x + point.z * 0.3f;
				if (point.x < num2)
				{
					point.x = num2;
				}
			}
			return point;
		}
		return Vector3Fast.zero;
	}

	// Token: 0x06000BD0 RID: 3024 RVA: 0x00074518 File Offset: 0x00072718
	private void FallAsleep()
	{
		this.boy.Kill();
		float num = Mathf.Abs(this.boy.velocity3.x);
		AnimClipNode animClipNode;
		if (this.b_forceFallBack)
		{
			animClipNode = this.animDieFallBack;
		}
		else if (this.currentEdge != 0f)
		{
			if (this.boy.facing * this.currentEdge == 1f)
			{
				animClipNode = this.animDieFallBack;
			}
			else
			{
				animClipNode = ((num >= 0.2f) ? this.animDieWalking : this.animDieStanding);
			}
		}
		else if (num < 0.2f)
		{
			animClipNode = ((Random.value <= 0.5f) ? this.animDieFallBack : this.animDieStanding);
		}
		else
		{
			animClipNode = this.animDieWalking;
		}
		if (this.allowSpecialAirKill && this.dieOnLanding)
		{
			animClipNode = this.animDieLanding;
		}
		this.AlignToGround(animClipNode.transform);
		if (this.CheckKillAngle(animClipNode.transform))
		{
			BoyUtils.StartCustomAnim(this.boy, animClipNode, null, 0f, Boy.AffectMode.AffectDeadBoy, EffectMaterial.Material.None);
		}
		this.state = Dart.State.Kill;
	}

	// Token: 0x06000BD1 RID: 3025 RVA: 0x0007464C File Offset: 0x0007284C
	private bool CheckKillAngle(Transform target)
	{
		float num = target.eulerAngles.x;
		if (num > 180f)
		{
			num = Mathf.Abs(num - 360f);
		}
		return num < 30f;
	}

	// Token: 0x06000BD2 RID: 3026 RVA: 0x00074688 File Offset: 0x00072888
	private void EnableMissFireVisuals()
	{
		this.missFireVisualsEnabled = true;
	}

	// Token: 0x06000BD3 RID: 3027 RVA: 0x00074694 File Offset: 0x00072894
	private void DsiableMissFireVisuals()
	{
		this.missFireVisualsEnabled = false;
	}

	// Token: 0x06000BD4 RID: 3028 RVA: 0x000746A0 File Offset: 0x000728A0
	private void SetForceFallBack()
	{
		this.b_forceFallBack = true;
	}

	// Token: 0x06000BD5 RID: 3029 RVA: 0x000746AC File Offset: 0x000728AC
	private void AlignToGround(Transform obj)
	{
		Vector3 pos = this.boy.pos3;
		pos.y -= 0.67f;
		obj.position = pos;
		if (this.boy.status.groundPlateau != null)
		{
			vector2f? groundRaycastNormal = this.boy.status.groundRaycastNormal;
			if (groundRaycastNormal != null)
			{
				Vector3 vector;
				vector..ctor(groundRaycastNormal.Value.x, groundRaycastNormal.Value.y, 0f);
				Vector3 vector2;
				if (this.boy.facing == 1f)
				{
					vector2.x = vector.y;
					vector2.y = -vector.x;
				}
				else
				{
					vector2.x = -vector.y;
					vector2.y = vector.x;
				}
				vector2.z = 0f;
				obj.rotation = Quaternion.LookRotation(vector2, vector);
			}
		}
	}

	// Token: 0x06000BD6 RID: 3030 RVA: 0x000747AC File Offset: 0x000729AC
	public void OnKill()
	{
		if (this.state == Dart.State.None || this.state == Dart.State.Shoot)
		{
			if (this.minDartPos && Mathf.Abs(this.minDartPos.position.x - this.boy.pos.x) > 2.75f)
			{
				this.SetShootState();
			}
			else
			{
				this.SetPrepareState();
			}
		}
	}

	// Token: 0x06000BD7 RID: 3031 RVA: 0x00074828 File Offset: 0x00072A28
	public void OnTranquilise()
	{
		this.SetShootState();
	}

	// Token: 0x06000BD8 RID: 3032 RVA: 0x00074830 File Offset: 0x00072A30
	private void OnStopShooting()
	{
		this.forceStopShooting = true;
	}

	// Token: 0x06000BD9 RID: 3033 RVA: 0x0007483C File Offset: 0x00072A3C
	private float GetDeathExhaleFrame(AnimClipNode anim)
	{
		if (anim == this.animDieStanding)
		{
			return this.audioDieStanding;
		}
		if (anim == this.animDieWalking)
		{
			return this.audioDieWalking;
		}
		if (anim == this.animDieFallBack)
		{
			return this.audioDieFallBack;
		}
		if (anim == this.animDieLanding)
		{
			return this.audioDieLanding;
		}
		int i = 0;
		int num = this.animKillRunningFront.Length;
		while (i < num)
		{
			if (anim == this.animKillRunningFront[i])
			{
				return this.audioKillRunningFront[i];
			}
			i++;
		}
		int j = 0;
		int num2 = this.animKillRunningBack.Length;
		while (j < num2)
		{
			if (anim == this.animKillRunningBack[j])
			{
				return this.audioKillRunningBack[j];
			}
			j++;
		}
		return 0f;
	}

	// Token: 0x06000BDA RID: 3034 RVA: 0x0007491C File Offset: 0x00072B1C
	public void OnFastEventEx(FastEventEx<Collider> sender, ref Collider collider)
	{
		int i = 0;
		int num = this.edgeTriggers.Length;
		while (i < num)
		{
			CollisionEvents collisionEvents = this.edgeTriggers[i];
			if (sender == collisionEvents.enterTrigger)
			{
				if (collisionEvents.transform.right.x == 1f)
				{
					this.OnEnterRightEdgeTrigger(collider);
				}
				else
				{
					this.OnEnterLeftEdgeTrigger(collider);
				}
			}
			else if (sender == collisionEvents.exitTrigger)
			{
				this.OnExitEdgeTrigger(collider);
			}
			i++;
		}
	}

	// Token: 0x06000BDB RID: 3035 RVA: 0x000749A4 File Offset: 0x00072BA4
	private void OnEnterRightEdgeTrigger(Collider collider)
	{
		if (collider.GetComponent<BoyProbe>())
		{
			this.currentEdge = 1f;
		}
	}

	// Token: 0x06000BDC RID: 3036 RVA: 0x000749C4 File Offset: 0x00072BC4
	private void OnEnterLeftEdgeTrigger(Collider collider)
	{
		if (collider.GetComponent<BoyProbe>())
		{
			this.currentEdge = -1f;
		}
	}

	// Token: 0x06000BDD RID: 3037 RVA: 0x000749E4 File Offset: 0x00072BE4
	private void OnExitEdgeTrigger(Collider collider)
	{
		if (collider.GetComponent<BoyProbe>())
		{
			this.currentEdge = 0f;
		}
	}

	// Token: 0x06000BDE RID: 3038 RVA: 0x00074A04 File Offset: 0x00072C04
	private void OnEnableKillStanding()
	{
		this.killBoyIfStandingStill = true;
	}

	// Token: 0x0400146C RID: 5228
	public float timeTotal = 3f;

	// Token: 0x0400146D RID: 5229
	public float timeRemoveJump = 2f;

	// Token: 0x0400146E RID: 5230
	public AnimationCurve inputLimitCurve;

	// Token: 0x0400146F RID: 5231
	public AnimClipNode animDieStanding;

	// Token: 0x04001470 RID: 5232
	public AnimClipNode animDieWalking;

	// Token: 0x04001471 RID: 5233
	public AnimClipNode animDieFallBack;

	// Token: 0x04001472 RID: 5234
	public AnimClipNode animDieLanding;

	// Token: 0x04001473 RID: 5235
	public AnimClipNode animHitIdleFW;

	// Token: 0x04001474 RID: 5236
	public AnimClipNode animHitIdleBW;

	// Token: 0x04001475 RID: 5237
	public AnimClipNode animHitRunFW;

	// Token: 0x04001476 RID: 5238
	public AnimClipNode animHitRunBW;

	// Token: 0x04001477 RID: 5239
	public AnimClipNode[] animKillRunningFront;

	// Token: 0x04001478 RID: 5240
	public AnimClipNode[] animKillRunningBack;

	// Token: 0x04001479 RID: 5241
	public float audioDieStanding;

	// Token: 0x0400147A RID: 5242
	public float audioDieWalking;

	// Token: 0x0400147B RID: 5243
	public float audioDieFallBack;

	// Token: 0x0400147C RID: 5244
	public float audioDieLanding;

	// Token: 0x0400147D RID: 5245
	public float[] audioKillRunningFront;

	// Token: 0x0400147E RID: 5246
	public float[] audioKillRunningBack;

	// Token: 0x0400147F RID: 5247
	public GameObject dartParent;

	// Token: 0x04001480 RID: 5248
	public Transform dartVisuals;

	// Token: 0x04001481 RID: 5249
	public Transform dartFrontPos;

	// Token: 0x04001482 RID: 5250
	public Transform gunLocation;

	// Token: 0x04001483 RID: 5251
	public GameObject dartEffectPrefab;

	// Token: 0x04001484 RID: 5252
	public Transform dartTargetsHolder;

	// Token: 0x04001485 RID: 5253
	public Transform minDartPos;

	// Token: 0x04001486 RID: 5254
	public Transform maxDartPos;

	// Token: 0x04001487 RID: 5255
	public CollisionEvents[] edgeTriggers;

	// Token: 0x04001488 RID: 5256
	public int minDartsMissingBoy = 2;

	// Token: 0x04001489 RID: 5257
	public int maxDartsMissingBoy = 3;

	// Token: 0x0400148A RID: 5258
	public float minShootDelay = 0.2f;

	// Token: 0x0400148B RID: 5259
	public float maxShootDelay = 0.5f;

	// Token: 0x0400148C RID: 5260
	public bool killBoyIfStandingStill = true;

	// Token: 0x0400148D RID: 5261
	public bool allowSpecialAirKill;

	// Token: 0x0400148E RID: 5262
	public float timeToHit = 0.19f;

	// Token: 0x0400148F RID: 5263
	public string audioPrefix = string.Empty;

	// Token: 0x04001490 RID: 5264
	public string audioMissMaterial = "Ground";

	// Token: 0x04001491 RID: 5265
	private SignalIn tranquilise;

	// Token: 0x04001492 RID: 5266
	private SignalIn kill;

	// Token: 0x04001493 RID: 5267
	private SignalIn stopShooting;

	// Token: 0x04001494 RID: 5268
	private SignalIn enableKillStanding;

	// Token: 0x04001495 RID: 5269
	private SignalIn disableMissFireVisual;

	// Token: 0x04001496 RID: 5270
	private SignalIn enableMissFireVisual;

	// Token: 0x04001497 RID: 5271
	private SignalIn forceFallBack;

	// Token: 0x04001498 RID: 5272
	private SignalOut firstShot;

	// Token: 0x04001499 RID: 5273
	private SignalOut boyShot;

	// Token: 0x0400149A RID: 5274
	private SignalOut missShot;

	// Token: 0x0400149B RID: 5275
	private SignalOut shotFired;

	// Token: 0x0400149C RID: 5276
	private Dart.State state;

	// Token: 0x0400149D RID: 5277
	private float shootTimer;

	// Token: 0x0400149E RID: 5278
	private int currentDartCount;

	// Token: 0x0400149F RID: 5279
	private int currentDartIndex;

	// Token: 0x040014A0 RID: 5280
	private float pauseDelay = 0.3f;

	// Token: 0x040014A1 RID: 5281
	private float pauseTimer;

	// Token: 0x040014A2 RID: 5282
	private float dartMinDistX = 0.6f;

	// Token: 0x040014A3 RID: 5283
	private bool previousShotInDepth;

	// Token: 0x040014A4 RID: 5284
	private BoySetInput limitInput;

	// Token: 0x040014A5 RID: 5285
	private bool isJumpDisabled;

	// Token: 0x040014A6 RID: 5286
	private float timer;

	// Token: 0x040014A7 RID: 5287
	private Boy boy;

	// Token: 0x040014A8 RID: 5288
	private Transform dartTransform;

	// Token: 0x040014A9 RID: 5289
	private AnimClipNode deathAnim;

	// Token: 0x040014AA RID: 5290
	private bool audioDeathComplete;

	// Token: 0x040014AB RID: 5291
	private float audioDeathExhaleFrame;

	// Token: 0x040014AC RID: 5292
	private float shotDelayTimer;

	// Token: 0x040014AD RID: 5293
	private float killShotDelayTimer;

	// Token: 0x040014AE RID: 5294
	private List<Vector3> shotQueue = new List<Vector3>();

	// Token: 0x040014AF RID: 5295
	private bool forceStopShooting;

	// Token: 0x040014B0 RID: 5296
	private int currentDartsMissingBoy;

	// Token: 0x040014B1 RID: 5297
	private float currentEdge;

	// Token: 0x040014B2 RID: 5298
	private bool firstShotFired;

	// Token: 0x040014B3 RID: 5299
	private bool dieOnLanding;

	// Token: 0x040014B4 RID: 5300
	private bool b_forceFallBack;

	// Token: 0x040014B5 RID: 5301
	private float killTimer = 1.5f;

	// Token: 0x040014B6 RID: 5302
	[HideInInspector]
	[SerializeField]
	private int[] edgeTriggerEnterHandles;

	// Token: 0x040014B7 RID: 5303
	[HideInInspector]
	[SerializeField]
	private int[] edgeTriggerExitHandles;

	// Token: 0x040014B8 RID: 5304
	[SerializeField]
	[HideInInspector]
	private bool preProcessed;

	// Token: 0x040014B9 RID: 5305
	[HideInInspector]
	[SerializeField]
	private Transform dartEffectHolder;

	// Token: 0x040014BA RID: 5306
	[HideInInspector]
	[SerializeField]
	private DartEffect[] dartEffects;

	// Token: 0x040014BB RID: 5307
	[HideInInspector]
	[SerializeField]
	private Transform[] dartTargets;

	// Token: 0x040014BC RID: 5308
	[HideInInspector]
	[SerializeField]
	private AudioEventSimpleLocal audioShot;

	// Token: 0x040014BD RID: 5309
	[HideInInspector]
	[SerializeField]
	private AudioEventSimple audioHitBoy;

	// Token: 0x040014BE RID: 5310
	[HideInInspector]
	[SerializeField]
	private AudioEventSimple audioMissBoy;

	// Token: 0x040014BF RID: 5311
	private bool missFireVisualsEnabled = true;

	// Token: 0x02000194 RID: 404
	private enum State
	{
		// Token: 0x040014C1 RID: 5313
		None,
		// Token: 0x040014C2 RID: 5314
		Prepare,
		// Token: 0x040014C3 RID: 5315
		Shoot,
		// Token: 0x040014C4 RID: 5316
		Kill,
		// Token: 0x040014C5 RID: 5317
		Tranquilise,
		// Token: 0x040014C6 RID: 5318
		Sleep
	}
}